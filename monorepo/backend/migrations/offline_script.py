"""
This script generates an initial migration without connecting to the database.
Run this script to create the initial migration file.
"""

import os
import sys
from alembic import op
from alembic.autogenerate import produce_migrations
from alembic.operations import Operations, MigrationScript
import sqlalchemy as sa

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

# Import models
from models import Base

# Generate migration script
def main():
    migration_script = MigrationScript(
        rev_id='initial',
        message='create users table',
        upgrade_ops=sa.util.immutabledict({
            'ops': [
                op.CreateTableOp(
                    'users',
                    [
                        sa.Column('id', sa.Integer(), primary_key=True, index=True),
                        sa.Column('email', sa.String(), unique=True, index=True),
                        sa.Column('hashed_password', sa.String()),
                        sa.Column('is_active', sa.Boolean(), default=True),
                        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.func.now()),
                        sa.Column('updated_at', sa.DateTime(timezone=True), onupdate=sa.func.now()),
                    ],
                    schema=None
                )
            ],
            'schemas': [],
            'tables': {}
        }),
        downgrade_ops=sa.util.immutabledict({
            'ops': [
                op.DropTableOp('users', schema=None)
            ],
            'schemas': [],
            'tables': {}
        })
    )
    
    # Create migration file
    from alembic.config import Config
    from alembic.script import ScriptDirectory
    from datetime import datetime
    
    config = Config("alembic.ini")
    script_dir = ScriptDirectory.from_config(config)
    
    # Format the filename with timestamp
    now = datetime.now()
    rev_id = f"{now.strftime('%Y%m%d_%H%M%S')}_initial_create_users_table"
    
    # Create the migration file
    with open(os.path.join(script_dir.dir, 'versions', f"{rev_id}.py"), 'w') as f:
        f.write(f"""\"\"\"create users table

Revision ID: {rev_id}
Revises: 
Create Date: {now.strftime('%Y-%m-%d %H:%M:%S')}

\"\"\"
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '{rev_id}'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
""")
    
    print(f"Created migration file: {rev_id}")

if __name__ == "__main__":
    main()