"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc+server@11.4.1_typescript@5.8.3";
exports.ids = ["vendor-chunks/@trpc+server@11.4.1_typescript@5.8.3"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-DyYil4aT.mjs":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-DyYil4aT.mjs ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTTP_CODE_TO_JSONRPC2: () => (/* binding */ HTTP_CODE_TO_JSONRPC2),\n/* harmony export */   JSONRPC2_TO_HTTP_CODE: () => (/* binding */ JSONRPC2_TO_HTTP_CODE),\n/* harmony export */   createFlatProxy: () => (/* binding */ createFlatProxy),\n/* harmony export */   createRecursiveProxy: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   getErrorShape: () => (/* binding */ getErrorShape),\n/* harmony export */   getHTTPStatusCode: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   getHTTPStatusCodeFromError: () => (/* binding */ getHTTPStatusCodeFromError),\n/* harmony export */   getStatusCodeFromKey: () => (/* binding */ getStatusCodeFromKey),\n/* harmony export */   getStatusKeyFromCode: () => (/* binding */ getStatusKeyFromCode)\n/* harmony export */ });\n/* harmony import */ var _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-BHZJcBRv.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs\");\n\n\n//#region src/unstable-core-do-not-import/createProxy.ts\nconst noop = () => {};\nconst freezeIfAvailable = (obj) => {\n\tif (Object.freeze) Object.freeze(obj);\n};\nfunction createInnerProxy(callback, path, memo) {\n\tconst cacheKey = path.join(\".\");\n\tmemo[cacheKey] ??= new Proxy(noop, {\n\t\tget(_obj, key) {\n\t\t\tif (typeof key !== \"string\" || key === \"then\") return void 0;\n\t\t\treturn createInnerProxy(callback, [...path, key], memo);\n\t\t},\n\t\tapply(_1, _2, args) {\n\t\t\tconst lastOfPath = path[path.length - 1];\n\t\t\tlet opts = {\n\t\t\t\targs,\n\t\t\t\tpath\n\t\t\t};\n\t\t\tif (lastOfPath === \"call\") opts = {\n\t\t\t\targs: args.length >= 2 ? [args[1]] : [],\n\t\t\t\tpath: path.slice(0, -1)\n\t\t\t};\n\t\t\telse if (lastOfPath === \"apply\") opts = {\n\t\t\t\targs: args.length >= 2 ? args[1] : [],\n\t\t\t\tpath: path.slice(0, -1)\n\t\t\t};\n\t\t\tfreezeIfAvailable(opts.args);\n\t\t\tfreezeIfAvailable(opts.path);\n\t\t\treturn callback(opts);\n\t\t}\n\t});\n\treturn memo[cacheKey];\n}\n/**\n* Creates a proxy that calls the callback with the path and arguments\n*\n* @internal\n*/\nconst createRecursiveProxy = (callback) => createInnerProxy(callback, [], Object.create(null));\n/**\n* Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n*\n* @internal\n*/\nconst createFlatProxy = (callback) => {\n\treturn new Proxy(noop, { get(_obj, name) {\n\t\tif (name === \"then\") return void 0;\n\t\treturn callback(name);\n\t} });\n};\n\n//#endregion\n//#region src/unstable-core-do-not-import/http/getHTTPStatusCode.ts\nconst JSONRPC2_TO_HTTP_CODE = {\n\tPARSE_ERROR: 400,\n\tBAD_REQUEST: 400,\n\tUNAUTHORIZED: 401,\n\tPAYMENT_REQUIRED: 402,\n\tFORBIDDEN: 403,\n\tNOT_FOUND: 404,\n\tMETHOD_NOT_SUPPORTED: 405,\n\tTIMEOUT: 408,\n\tCONFLICT: 409,\n\tPRECONDITION_FAILED: 412,\n\tPAYLOAD_TOO_LARGE: 413,\n\tUNSUPPORTED_MEDIA_TYPE: 415,\n\tUNPROCESSABLE_CONTENT: 422,\n\tTOO_MANY_REQUESTS: 429,\n\tCLIENT_CLOSED_REQUEST: 499,\n\tINTERNAL_SERVER_ERROR: 500,\n\tNOT_IMPLEMENTED: 501,\n\tBAD_GATEWAY: 502,\n\tSERVICE_UNAVAILABLE: 503,\n\tGATEWAY_TIMEOUT: 504\n};\nconst HTTP_CODE_TO_JSONRPC2 = {\n\t400: \"BAD_REQUEST\",\n\t401: \"UNAUTHORIZED\",\n\t402: \"PAYMENT_REQUIRED\",\n\t403: \"FORBIDDEN\",\n\t404: \"NOT_FOUND\",\n\t405: \"METHOD_NOT_SUPPORTED\",\n\t408: \"TIMEOUT\",\n\t409: \"CONFLICT\",\n\t412: \"PRECONDITION_FAILED\",\n\t413: \"PAYLOAD_TOO_LARGE\",\n\t415: \"UNSUPPORTED_MEDIA_TYPE\",\n\t422: \"UNPROCESSABLE_CONTENT\",\n\t429: \"TOO_MANY_REQUESTS\",\n\t499: \"CLIENT_CLOSED_REQUEST\",\n\t500: \"INTERNAL_SERVER_ERROR\",\n\t501: \"NOT_IMPLEMENTED\",\n\t502: \"BAD_GATEWAY\",\n\t503: \"SERVICE_UNAVAILABLE\",\n\t504: \"GATEWAY_TIMEOUT\"\n};\nfunction getStatusCodeFromKey(code) {\n\treturn JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getStatusKeyFromCode(code) {\n\treturn HTTP_CODE_TO_JSONRPC2[code] ?? \"INTERNAL_SERVER_ERROR\";\n}\nfunction getHTTPStatusCode(json) {\n\tconst arr = Array.isArray(json) ? json : [json];\n\tconst httpStatuses = new Set(arr.map((res) => {\n\t\tif (\"error\" in res && (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(res.error.data)) {\n\t\t\tif (typeof res.error.data?.[\"httpStatus\"] === \"number\") return res.error.data[\"httpStatus\"];\n\t\t\tconst code = _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n\t\t\treturn getStatusCodeFromKey(code);\n\t\t}\n\t\treturn 200;\n\t}));\n\tif (httpStatuses.size !== 1) return 207;\n\tconst httpStatus = httpStatuses.values().next().value;\n\treturn httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n\treturn getStatusCodeFromKey(error.code);\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/error/getErrorShape.ts\n/**\n* @internal\n*/\nfunction getErrorShape(opts) {\n\tconst { path, error, config } = opts;\n\tconst { code } = opts.error;\n\tconst shape = {\n\t\tmessage: error.message,\n\t\tcode: _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPC_ERROR_CODES_BY_KEY[code],\n\t\tdata: {\n\t\t\tcode,\n\t\t\thttpStatus: getHTTPStatusCodeFromError(error)\n\t\t}\n\t};\n\tif (config.isDev && typeof opts.error.stack === \"string\") shape.data.stack = opts.error.stack;\n\tif (typeof path === \"string\") shape.data.path = path;\n\treturn config.errorFormatter({\n\t\t...opts,\n\t\tshape\n\t});\n}\n\n//#endregion\n\n//# sourceMappingURL=getErrorShape-DyYil4aT.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDExLjQuMV90eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9nZXRFcnJvclNoYXBlLUR5WWlsNGFULm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXFHOztBQUVyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDZEQUFRO0FBQ2hDO0FBQ0EsZ0JBQWdCLDJFQUEwQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxzQkFBc0I7QUFDL0IsU0FBUyxPQUFPO0FBQ2hCO0FBQ0E7QUFDQSxRQUFRLHdFQUF1QjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUN5TTtBQUN6TSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK3NlcnZlckAxMS40LjFfdHlwZXNjcmlwdEA1LjguMy9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvZ2V0RXJyb3JTaGFwZS1EeVlpbDRhVC5tanM/NWVmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSwgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIsIGlzT2JqZWN0IH0gZnJvbSBcIi4vdXRpbHMtQkhaSmNCUnYubWpzXCI7XG5cbi8vI3JlZ2lvbiBzcmMvdW5zdGFibGUtY29yZS1kby1ub3QtaW1wb3J0L2NyZWF0ZVByb3h5LnRzXG5jb25zdCBub29wID0gKCkgPT4ge307XG5jb25zdCBmcmVlemVJZkF2YWlsYWJsZSA9IChvYmopID0+IHtcblx0aWYgKE9iamVjdC5mcmVlemUpIE9iamVjdC5mcmVlemUob2JqKTtcbn07XG5mdW5jdGlvbiBjcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBwYXRoLCBtZW1vKSB7XG5cdGNvbnN0IGNhY2hlS2V5ID0gcGF0aC5qb2luKFwiLlwiKTtcblx0bWVtb1tjYWNoZUtleV0gPz89IG5ldyBQcm94eShub29wLCB7XG5cdFx0Z2V0KF9vYmosIGtleSkge1xuXHRcdFx0aWYgKHR5cGVvZiBrZXkgIT09IFwic3RyaW5nXCIgfHwga2V5ID09PSBcInRoZW5cIikgcmV0dXJuIHZvaWQgMDtcblx0XHRcdHJldHVybiBjcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBbLi4ucGF0aCwga2V5XSwgbWVtbyk7XG5cdFx0fSxcblx0XHRhcHBseShfMSwgXzIsIGFyZ3MpIHtcblx0XHRcdGNvbnN0IGxhc3RPZlBhdGggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG5cdFx0XHRsZXQgb3B0cyA9IHtcblx0XHRcdFx0YXJncyxcblx0XHRcdFx0cGF0aFxuXHRcdFx0fTtcblx0XHRcdGlmIChsYXN0T2ZQYXRoID09PSBcImNhbGxcIikgb3B0cyA9IHtcblx0XHRcdFx0YXJnczogYXJncy5sZW5ndGggPj0gMiA/IFthcmdzWzFdXSA6IFtdLFxuXHRcdFx0XHRwYXRoOiBwYXRoLnNsaWNlKDAsIC0xKVxuXHRcdFx0fTtcblx0XHRcdGVsc2UgaWYgKGxhc3RPZlBhdGggPT09IFwiYXBwbHlcIikgb3B0cyA9IHtcblx0XHRcdFx0YXJnczogYXJncy5sZW5ndGggPj0gMiA/IGFyZ3NbMV0gOiBbXSxcblx0XHRcdFx0cGF0aDogcGF0aC5zbGljZSgwLCAtMSlcblx0XHRcdH07XG5cdFx0XHRmcmVlemVJZkF2YWlsYWJsZShvcHRzLmFyZ3MpO1xuXHRcdFx0ZnJlZXplSWZBdmFpbGFibGUob3B0cy5wYXRoKTtcblx0XHRcdHJldHVybiBjYWxsYmFjayhvcHRzKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbWVtb1tjYWNoZUtleV07XG59XG4vKipcbiogQ3JlYXRlcyBhIHByb3h5IHRoYXQgY2FsbHMgdGhlIGNhbGxiYWNrIHdpdGggdGhlIHBhdGggYW5kIGFyZ3VtZW50c1xuKlxuKiBAaW50ZXJuYWxcbiovXG5jb25zdCBjcmVhdGVSZWN1cnNpdmVQcm94eSA9IChjYWxsYmFjaykgPT4gY3JlYXRlSW5uZXJQcm94eShjYWxsYmFjaywgW10sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuLyoqXG4qIFVzZWQgaW4gcGxhY2Ugb2YgYG5ldyBQcm94eWAgd2hlcmUgZWFjaCBoYW5kbGVyIHdpbGwgbWFwIDEgbGV2ZWwgZGVlcCB0byBhbm90aGVyIHZhbHVlLlxuKlxuKiBAaW50ZXJuYWxcbiovXG5jb25zdCBjcmVhdGVGbGF0UHJveHkgPSAoY2FsbGJhY2spID0+IHtcblx0cmV0dXJuIG5ldyBQcm94eShub29wLCB7IGdldChfb2JqLCBuYW1lKSB7XG5cdFx0aWYgKG5hbWUgPT09IFwidGhlblwiKSByZXR1cm4gdm9pZCAwO1xuXHRcdHJldHVybiBjYWxsYmFjayhuYW1lKTtcblx0fSB9KTtcbn07XG5cbi8vI2VuZHJlZ2lvblxuLy8jcmVnaW9uIHNyYy91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQvaHR0cC9nZXRIVFRQU3RhdHVzQ29kZS50c1xuY29uc3QgSlNPTlJQQzJfVE9fSFRUUF9DT0RFID0ge1xuXHRQQVJTRV9FUlJPUjogNDAwLFxuXHRCQURfUkVRVUVTVDogNDAwLFxuXHRVTkFVVEhPUklaRUQ6IDQwMSxcblx0UEFZTUVOVF9SRVFVSVJFRDogNDAyLFxuXHRGT1JCSURERU46IDQwMyxcblx0Tk9UX0ZPVU5EOiA0MDQsXG5cdE1FVEhPRF9OT1RfU1VQUE9SVEVEOiA0MDUsXG5cdFRJTUVPVVQ6IDQwOCxcblx0Q09ORkxJQ1Q6IDQwOSxcblx0UFJFQ09ORElUSU9OX0ZBSUxFRDogNDEyLFxuXHRQQVlMT0FEX1RPT19MQVJHRTogNDEzLFxuXHRVTlNVUFBPUlRFRF9NRURJQV9UWVBFOiA0MTUsXG5cdFVOUFJPQ0VTU0FCTEVfQ09OVEVOVDogNDIyLFxuXHRUT09fTUFOWV9SRVFVRVNUUzogNDI5LFxuXHRDTElFTlRfQ0xPU0VEX1JFUVVFU1Q6IDQ5OSxcblx0SU5URVJOQUxfU0VSVkVSX0VSUk9SOiA1MDAsXG5cdE5PVF9JTVBMRU1FTlRFRDogNTAxLFxuXHRCQURfR0FURVdBWTogNTAyLFxuXHRTRVJWSUNFX1VOQVZBSUxBQkxFOiA1MDMsXG5cdEdBVEVXQVlfVElNRU9VVDogNTA0XG59O1xuY29uc3QgSFRUUF9DT0RFX1RPX0pTT05SUEMyID0ge1xuXHQ0MDA6IFwiQkFEX1JFUVVFU1RcIixcblx0NDAxOiBcIlVOQVVUSE9SSVpFRFwiLFxuXHQ0MDI6IFwiUEFZTUVOVF9SRVFVSVJFRFwiLFxuXHQ0MDM6IFwiRk9SQklEREVOXCIsXG5cdDQwNDogXCJOT1RfRk9VTkRcIixcblx0NDA1OiBcIk1FVEhPRF9OT1RfU1VQUE9SVEVEXCIsXG5cdDQwODogXCJUSU1FT1VUXCIsXG5cdDQwOTogXCJDT05GTElDVFwiLFxuXHQ0MTI6IFwiUFJFQ09ORElUSU9OX0ZBSUxFRFwiLFxuXHQ0MTM6IFwiUEFZTE9BRF9UT09fTEFSR0VcIixcblx0NDE1OiBcIlVOU1VQUE9SVEVEX01FRElBX1RZUEVcIixcblx0NDIyOiBcIlVOUFJPQ0VTU0FCTEVfQ09OVEVOVFwiLFxuXHQ0Mjk6IFwiVE9PX01BTllfUkVRVUVTVFNcIixcblx0NDk5OiBcIkNMSUVOVF9DTE9TRURfUkVRVUVTVFwiLFxuXHQ1MDA6IFwiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCIsXG5cdDUwMTogXCJOT1RfSU1QTEVNRU5URURcIixcblx0NTAyOiBcIkJBRF9HQVRFV0FZXCIsXG5cdDUwMzogXCJTRVJWSUNFX1VOQVZBSUxBQkxFXCIsXG5cdDUwNDogXCJHQVRFV0FZX1RJTUVPVVRcIlxufTtcbmZ1bmN0aW9uIGdldFN0YXR1c0NvZGVGcm9tS2V5KGNvZGUpIHtcblx0cmV0dXJuIEpTT05SUEMyX1RPX0hUVFBfQ09ERVtjb2RlXSA/PyA1MDA7XG59XG5mdW5jdGlvbiBnZXRTdGF0dXNLZXlGcm9tQ29kZShjb2RlKSB7XG5cdHJldHVybiBIVFRQX0NPREVfVE9fSlNPTlJQQzJbY29kZV0gPz8gXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIjtcbn1cbmZ1bmN0aW9uIGdldEhUVFBTdGF0dXNDb2RlKGpzb24pIHtcblx0Y29uc3QgYXJyID0gQXJyYXkuaXNBcnJheShqc29uKSA/IGpzb24gOiBbanNvbl07XG5cdGNvbnN0IGh0dHBTdGF0dXNlcyA9IG5ldyBTZXQoYXJyLm1hcCgocmVzKSA9PiB7XG5cdFx0aWYgKFwiZXJyb3JcIiBpbiByZXMgJiYgaXNPYmplY3QocmVzLmVycm9yLmRhdGEpKSB7XG5cdFx0XHRpZiAodHlwZW9mIHJlcy5lcnJvci5kYXRhPy5bXCJodHRwU3RhdHVzXCJdID09PSBcIm51bWJlclwiKSByZXR1cm4gcmVzLmVycm9yLmRhdGFbXCJodHRwU3RhdHVzXCJdO1xuXHRcdFx0Y29uc3QgY29kZSA9IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSW3Jlcy5lcnJvci5jb2RlXTtcblx0XHRcdHJldHVybiBnZXRTdGF0dXNDb2RlRnJvbUtleShjb2RlKTtcblx0XHR9XG5cdFx0cmV0dXJuIDIwMDtcblx0fSkpO1xuXHRpZiAoaHR0cFN0YXR1c2VzLnNpemUgIT09IDEpIHJldHVybiAyMDc7XG5cdGNvbnN0IGh0dHBTdGF0dXMgPSBodHRwU3RhdHVzZXMudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xuXHRyZXR1cm4gaHR0cFN0YXR1cztcbn1cbmZ1bmN0aW9uIGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKSB7XG5cdHJldHVybiBnZXRTdGF0dXNDb2RlRnJvbUtleShlcnJvci5jb2RlKTtcbn1cblxuLy8jZW5kcmVnaW9uXG4vLyNyZWdpb24gc3JjL3Vuc3RhYmxlLWNvcmUtZG8tbm90LWltcG9ydC9lcnJvci9nZXRFcnJvclNoYXBlLnRzXG4vKipcbiogQGludGVybmFsXG4qL1xuZnVuY3Rpb24gZ2V0RXJyb3JTaGFwZShvcHRzKSB7XG5cdGNvbnN0IHsgcGF0aCwgZXJyb3IsIGNvbmZpZyB9ID0gb3B0cztcblx0Y29uc3QgeyBjb2RlIH0gPSBvcHRzLmVycm9yO1xuXHRjb25zdCBzaGFwZSA9IHtcblx0XHRtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuXHRcdGNvZGU6IFRSUENfRVJST1JfQ09ERVNfQllfS0VZW2NvZGVdLFxuXHRcdGRhdGE6IHtcblx0XHRcdGNvZGUsXG5cdFx0XHRodHRwU3RhdHVzOiBnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvcihlcnJvcilcblx0XHR9XG5cdH07XG5cdGlmIChjb25maWcuaXNEZXYgJiYgdHlwZW9mIG9wdHMuZXJyb3Iuc3RhY2sgPT09IFwic3RyaW5nXCIpIHNoYXBlLmRhdGEuc3RhY2sgPSBvcHRzLmVycm9yLnN0YWNrO1xuXHRpZiAodHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIpIHNoYXBlLmRhdGEucGF0aCA9IHBhdGg7XG5cdHJldHVybiBjb25maWcuZXJyb3JGb3JtYXR0ZXIoe1xuXHRcdC4uLm9wdHMsXG5cdFx0c2hhcGVcblx0fSk7XG59XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgSFRUUF9DT0RFX1RPX0pTT05SUEMyLCBKU09OUlBDMl9UT19IVFRQX0NPREUsIGNyZWF0ZUZsYXRQcm94eSwgY3JlYXRlUmVjdXJzaXZlUHJveHksIGdldEVycm9yU2hhcGUsIGdldEhUVFBTdGF0dXNDb2RlLCBnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciwgZ2V0U3RhdHVzQ29kZUZyb21LZXksIGdldFN0YXR1c0tleUZyb21Db2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRFcnJvclNoYXBlLUR5WWlsNGFULm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-DyYil4aT.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-B1orLHHI.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-B1orLHHI.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObservable: () => (/* binding */ isObservable),\n/* harmony export */   observable: () => (/* binding */ observable),\n/* harmony export */   observableToAsyncIterable: () => (/* binding */ observableToAsyncIterable),\n/* harmony export */   observableToPromise: () => (/* binding */ observableToPromise)\n/* harmony export */ });\n//#region src/observable/observable.ts\n/** @public */\nfunction isObservable(x) {\n\treturn typeof x === \"object\" && x !== null && \"subscribe\" in x;\n}\n/** @public */\nfunction observable(subscribe) {\n\tconst self = {\n\t\tsubscribe(observer) {\n\t\t\tlet teardownRef = null;\n\t\t\tlet isDone = false;\n\t\t\tlet unsubscribed = false;\n\t\t\tlet teardownImmediately = false;\n\t\t\tfunction unsubscribe() {\n\t\t\t\tif (teardownRef === null) {\n\t\t\t\t\tteardownImmediately = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (unsubscribed) return;\n\t\t\t\tunsubscribed = true;\n\t\t\t\tif (typeof teardownRef === \"function\") teardownRef();\n\t\t\t\telse if (teardownRef) teardownRef.unsubscribe();\n\t\t\t}\n\t\t\tteardownRef = subscribe({\n\t\t\t\tnext(value) {\n\t\t\t\t\tif (isDone) return;\n\t\t\t\t\tobserver.next?.(value);\n\t\t\t\t},\n\t\t\t\terror(err) {\n\t\t\t\t\tif (isDone) return;\n\t\t\t\t\tisDone = true;\n\t\t\t\t\tobserver.error?.(err);\n\t\t\t\t\tunsubscribe();\n\t\t\t\t},\n\t\t\t\tcomplete() {\n\t\t\t\t\tif (isDone) return;\n\t\t\t\t\tisDone = true;\n\t\t\t\t\tobserver.complete?.();\n\t\t\t\t\tunsubscribe();\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (teardownImmediately) unsubscribe();\n\t\t\treturn { unsubscribe };\n\t\t},\n\t\tpipe(...operations) {\n\t\t\treturn operations.reduce(pipeReducer, self);\n\t\t}\n\t};\n\treturn self;\n}\nfunction pipeReducer(prev, fn) {\n\treturn fn(prev);\n}\n/** @internal */\nfunction observableToPromise(observable$1) {\n\tconst ac = new AbortController();\n\tconst promise = new Promise((resolve, reject) => {\n\t\tlet isDone = false;\n\t\tfunction onDone() {\n\t\t\tif (isDone) return;\n\t\t\tisDone = true;\n\t\t\tobs$.unsubscribe();\n\t\t}\n\t\tac.signal.addEventListener(\"abort\", () => {\n\t\t\treject(ac.signal.reason);\n\t\t});\n\t\tconst obs$ = observable$1.subscribe({\n\t\t\tnext(data) {\n\t\t\t\tisDone = true;\n\t\t\t\tresolve(data);\n\t\t\t\tonDone();\n\t\t\t},\n\t\t\terror(data) {\n\t\t\t\treject(data);\n\t\t\t},\n\t\t\tcomplete() {\n\t\t\t\tac.abort();\n\t\t\t\tonDone();\n\t\t\t}\n\t\t});\n\t});\n\treturn promise;\n}\n/**\n* @internal\n*/\nfunction observableToReadableStream(observable$1, signal) {\n\tlet unsub = null;\n\tconst onAbort = () => {\n\t\tunsub?.unsubscribe();\n\t\tunsub = null;\n\t\tsignal.removeEventListener(\"abort\", onAbort);\n\t};\n\treturn new ReadableStream({\n\t\tstart(controller) {\n\t\t\tunsub = observable$1.subscribe({\n\t\t\t\tnext(data) {\n\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\tok: true,\n\t\t\t\t\t\tvalue: data\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\terror(error) {\n\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\tok: false,\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t\tcontroller.close();\n\t\t\t\t},\n\t\t\t\tcomplete() {\n\t\t\t\t\tcontroller.close();\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (signal.aborted) onAbort();\n\t\t\telse signal.addEventListener(\"abort\", onAbort, { once: true });\n\t\t},\n\t\tcancel() {\n\t\t\tonAbort();\n\t\t}\n\t});\n}\n/** @internal */\nfunction observableToAsyncIterable(observable$1, signal) {\n\tconst stream = observableToReadableStream(observable$1, signal);\n\tconst reader = stream.getReader();\n\tconst iterator = {\n\t\tasync next() {\n\t\t\tconst value = await reader.read();\n\t\t\tif (value.done) return {\n\t\t\t\tvalue: void 0,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t\tconst { value: result } = value;\n\t\t\tif (!result.ok) throw result.error;\n\t\t\treturn {\n\t\t\t\tvalue: result.value,\n\t\t\t\tdone: false\n\t\t\t};\n\t\t},\n\t\tasync return() {\n\t\t\tawait reader.cancel();\n\t\t\treturn {\n\t\t\t\tvalue: void 0,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\t};\n\treturn { [Symbol.asyncIterator]() {\n\t\treturn iterator;\n\t} };\n}\n\n//#endregion\n\n//# sourceMappingURL=observable-B1orLHHI.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDExLjQuMV90eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9vYnNlcnZhYmxlLUIxb3JMSEhJLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsWUFBWTtBQUNaLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0Esb0RBQW9ELFlBQVk7QUFDaEUsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ29GO0FBQ3BGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDExLjQuMV90eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9vYnNlcnZhYmxlLUIxb3JMSEhJLm1qcz9lYTk3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vI3JlZ2lvbiBzcmMvb2JzZXJ2YWJsZS9vYnNlcnZhYmxlLnRzXG4vKiogQHB1YmxpYyAqL1xuZnVuY3Rpb24gaXNPYnNlcnZhYmxlKHgpIHtcblx0cmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIHggIT09IG51bGwgJiYgXCJzdWJzY3JpYmVcIiBpbiB4O1xufVxuLyoqIEBwdWJsaWMgKi9cbmZ1bmN0aW9uIG9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG5cdGNvbnN0IHNlbGYgPSB7XG5cdFx0c3Vic2NyaWJlKG9ic2VydmVyKSB7XG5cdFx0XHRsZXQgdGVhcmRvd25SZWYgPSBudWxsO1xuXHRcdFx0bGV0IGlzRG9uZSA9IGZhbHNlO1xuXHRcdFx0bGV0IHVuc3Vic2NyaWJlZCA9IGZhbHNlO1xuXHRcdFx0bGV0IHRlYXJkb3duSW1tZWRpYXRlbHkgPSBmYWxzZTtcblx0XHRcdGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuXHRcdFx0XHRpZiAodGVhcmRvd25SZWYgPT09IG51bGwpIHtcblx0XHRcdFx0XHR0ZWFyZG93bkltbWVkaWF0ZWx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHVuc3Vic2NyaWJlZCkgcmV0dXJuO1xuXHRcdFx0XHR1bnN1YnNjcmliZWQgPSB0cnVlO1xuXHRcdFx0XHRpZiAodHlwZW9mIHRlYXJkb3duUmVmID09PSBcImZ1bmN0aW9uXCIpIHRlYXJkb3duUmVmKCk7XG5cdFx0XHRcdGVsc2UgaWYgKHRlYXJkb3duUmVmKSB0ZWFyZG93blJlZi51bnN1YnNjcmliZSgpO1xuXHRcdFx0fVxuXHRcdFx0dGVhcmRvd25SZWYgPSBzdWJzY3JpYmUoe1xuXHRcdFx0XHRuZXh0KHZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKGlzRG9uZSkgcmV0dXJuO1xuXHRcdFx0XHRcdG9ic2VydmVyLm5leHQ/Lih2YWx1ZSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yKGVycikge1xuXHRcdFx0XHRcdGlmIChpc0RvbmUpIHJldHVybjtcblx0XHRcdFx0XHRpc0RvbmUgPSB0cnVlO1xuXHRcdFx0XHRcdG9ic2VydmVyLmVycm9yPy4oZXJyKTtcblx0XHRcdFx0XHR1bnN1YnNjcmliZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRjb21wbGV0ZSgpIHtcblx0XHRcdFx0XHRpZiAoaXNEb25lKSByZXR1cm47XG5cdFx0XHRcdFx0aXNEb25lID0gdHJ1ZTtcblx0XHRcdFx0XHRvYnNlcnZlci5jb21wbGV0ZT8uKCk7XG5cdFx0XHRcdFx0dW5zdWJzY3JpYmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRpZiAodGVhcmRvd25JbW1lZGlhdGVseSkgdW5zdWJzY3JpYmUoKTtcblx0XHRcdHJldHVybiB7IHVuc3Vic2NyaWJlIH07XG5cdFx0fSxcblx0XHRwaXBlKC4uLm9wZXJhdGlvbnMpIHtcblx0XHRcdHJldHVybiBvcGVyYXRpb25zLnJlZHVjZShwaXBlUmVkdWNlciwgc2VsZik7XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gc2VsZjtcbn1cbmZ1bmN0aW9uIHBpcGVSZWR1Y2VyKHByZXYsIGZuKSB7XG5cdHJldHVybiBmbihwcmV2KTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIG9ic2VydmFibGVUb1Byb21pc2Uob2JzZXJ2YWJsZSQxKSB7XG5cdGNvbnN0IGFjID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXHRjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGxldCBpc0RvbmUgPSBmYWxzZTtcblx0XHRmdW5jdGlvbiBvbkRvbmUoKSB7XG5cdFx0XHRpZiAoaXNEb25lKSByZXR1cm47XG5cdFx0XHRpc0RvbmUgPSB0cnVlO1xuXHRcdFx0b2JzJC51bnN1YnNjcmliZSgpO1xuXHRcdH1cblx0XHRhYy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsICgpID0+IHtcblx0XHRcdHJlamVjdChhYy5zaWduYWwucmVhc29uKTtcblx0XHR9KTtcblx0XHRjb25zdCBvYnMkID0gb2JzZXJ2YWJsZSQxLnN1YnNjcmliZSh7XG5cdFx0XHRuZXh0KGRhdGEpIHtcblx0XHRcdFx0aXNEb25lID0gdHJ1ZTtcblx0XHRcdFx0cmVzb2x2ZShkYXRhKTtcblx0XHRcdFx0b25Eb25lKCk7XG5cdFx0XHR9LFxuXHRcdFx0ZXJyb3IoZGF0YSkge1xuXHRcdFx0XHRyZWplY3QoZGF0YSk7XG5cdFx0XHR9LFxuXHRcdFx0Y29tcGxldGUoKSB7XG5cdFx0XHRcdGFjLmFib3J0KCk7XG5cdFx0XHRcdG9uRG9uZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcblx0cmV0dXJuIHByb21pc2U7XG59XG4vKipcbiogQGludGVybmFsXG4qL1xuZnVuY3Rpb24gb2JzZXJ2YWJsZVRvUmVhZGFibGVTdHJlYW0ob2JzZXJ2YWJsZSQxLCBzaWduYWwpIHtcblx0bGV0IHVuc3ViID0gbnVsbDtcblx0Y29uc3Qgb25BYm9ydCA9ICgpID0+IHtcblx0XHR1bnN1Yj8udW5zdWJzY3JpYmUoKTtcblx0XHR1bnN1YiA9IG51bGw7XG5cdFx0c2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcblx0fTtcblx0cmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG5cdFx0c3RhcnQoY29udHJvbGxlcikge1xuXHRcdFx0dW5zdWIgPSBvYnNlcnZhYmxlJDEuc3Vic2NyaWJlKHtcblx0XHRcdFx0bmV4dChkYXRhKSB7XG5cdFx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKHtcblx0XHRcdFx0XHRcdG9rOiB0cnVlLFxuXHRcdFx0XHRcdFx0dmFsdWU6IGRhdGFcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZXJyb3IoZXJyb3IpIHtcblx0XHRcdFx0XHRjb250cm9sbGVyLmVucXVldWUoe1xuXHRcdFx0XHRcdFx0b2s6IGZhbHNlLFxuXHRcdFx0XHRcdFx0ZXJyb3Jcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRjb250cm9sbGVyLmNsb3NlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbXBsZXRlKCkge1xuXHRcdFx0XHRcdGNvbnRyb2xsZXIuY2xvc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRpZiAoc2lnbmFsLmFib3J0ZWQpIG9uQWJvcnQoKTtcblx0XHRcdGVsc2Ugc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0LCB7IG9uY2U6IHRydWUgfSk7XG5cdFx0fSxcblx0XHRjYW5jZWwoKSB7XG5cdFx0XHRvbkFib3J0KCk7XG5cdFx0fVxuXHR9KTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIG9ic2VydmFibGVUb0FzeW5jSXRlcmFibGUob2JzZXJ2YWJsZSQxLCBzaWduYWwpIHtcblx0Y29uc3Qgc3RyZWFtID0gb2JzZXJ2YWJsZVRvUmVhZGFibGVTdHJlYW0ob2JzZXJ2YWJsZSQxLCBzaWduYWwpO1xuXHRjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG5cdGNvbnN0IGl0ZXJhdG9yID0ge1xuXHRcdGFzeW5jIG5leHQoKSB7XG5cdFx0XHRjb25zdCB2YWx1ZSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG5cdFx0XHRpZiAodmFsdWUuZG9uZSkgcmV0dXJuIHtcblx0XHRcdFx0dmFsdWU6IHZvaWQgMCxcblx0XHRcdFx0ZG9uZTogdHJ1ZVxuXHRcdFx0fTtcblx0XHRcdGNvbnN0IHsgdmFsdWU6IHJlc3VsdCB9ID0gdmFsdWU7XG5cdFx0XHRpZiAoIXJlc3VsdC5vaykgdGhyb3cgcmVzdWx0LmVycm9yO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dmFsdWU6IHJlc3VsdC52YWx1ZSxcblx0XHRcdFx0ZG9uZTogZmFsc2Vcblx0XHRcdH07XG5cdFx0fSxcblx0XHRhc3luYyByZXR1cm4oKSB7XG5cdFx0XHRhd2FpdCByZWFkZXIuY2FuY2VsKCk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR2YWx1ZTogdm9pZCAwLFxuXHRcdFx0XHRkb25lOiB0cnVlXG5cdFx0XHR9O1xuXHRcdH1cblx0fTtcblx0cmV0dXJuIHsgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcblx0XHRyZXR1cm4gaXRlcmF0b3I7XG5cdH0gfTtcbn1cblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBpc09ic2VydmFibGUsIG9ic2VydmFibGUsIG9ic2VydmFibGVUb0FzeW5jSXRlcmFibGUsIG9ic2VydmFibGVUb1Byb21pc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUtQjFvckxISEkubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-B1orLHHI.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-CFXA_tyK.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-CFXA_tyK.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   behaviorSubject: () => (/* binding */ behaviorSubject),\n/* harmony export */   distinctUntilChanged: () => (/* binding */ distinctUntilChanged),\n/* harmony export */   distinctUntilDeepChanged: () => (/* binding */ distinctUntilDeepChanged),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   share: () => (/* binding */ share),\n/* harmony export */   tap: () => (/* binding */ tap)\n/* harmony export */ });\n/* harmony import */ var _observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observable-B1orLHHI.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-B1orLHHI.mjs\");\n\n\n//#region src/observable/operators.ts\nfunction map(project) {\n\treturn (source) => {\n\t\treturn (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_0__.observable)((destination) => {\n\t\t\tlet index = 0;\n\t\t\tconst subscription = source.subscribe({\n\t\t\t\tnext(value) {\n\t\t\t\t\tdestination.next(project(value, index++));\n\t\t\t\t},\n\t\t\t\terror(error) {\n\t\t\t\t\tdestination.error(error);\n\t\t\t\t},\n\t\t\t\tcomplete() {\n\t\t\t\t\tdestination.complete();\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn subscription;\n\t\t});\n\t};\n}\nfunction share(_opts) {\n\treturn (source) => {\n\t\tlet refCount = 0;\n\t\tlet subscription = null;\n\t\tconst observers = [];\n\t\tfunction startIfNeeded() {\n\t\t\tif (subscription) return;\n\t\t\tsubscription = source.subscribe({\n\t\t\t\tnext(value) {\n\t\t\t\t\tfor (const observer of observers) observer.next?.(value);\n\t\t\t\t},\n\t\t\t\terror(error) {\n\t\t\t\t\tfor (const observer of observers) observer.error?.(error);\n\t\t\t\t},\n\t\t\t\tcomplete() {\n\t\t\t\t\tfor (const observer of observers) observer.complete?.();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tfunction resetIfNeeded() {\n\t\t\tif (refCount === 0 && subscription) {\n\t\t\t\tconst _sub = subscription;\n\t\t\t\tsubscription = null;\n\t\t\t\t_sub.unsubscribe();\n\t\t\t}\n\t\t}\n\t\treturn (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_0__.observable)((subscriber) => {\n\t\t\trefCount++;\n\t\t\tobservers.push(subscriber);\n\t\t\tstartIfNeeded();\n\t\t\treturn { unsubscribe() {\n\t\t\t\trefCount--;\n\t\t\t\tresetIfNeeded();\n\t\t\t\tconst index = observers.findIndex((v) => v === subscriber);\n\t\t\t\tif (index > -1) observers.splice(index, 1);\n\t\t\t} };\n\t\t});\n\t};\n}\nfunction tap(observer) {\n\treturn (source) => {\n\t\treturn (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_0__.observable)((destination) => {\n\t\t\treturn source.subscribe({\n\t\t\t\tnext(value) {\n\t\t\t\t\tobserver.next?.(value);\n\t\t\t\t\tdestination.next(value);\n\t\t\t\t},\n\t\t\t\terror(error) {\n\t\t\t\t\tobserver.error?.(error);\n\t\t\t\t\tdestination.error(error);\n\t\t\t\t},\n\t\t\t\tcomplete() {\n\t\t\t\t\tobserver.complete?.();\n\t\t\t\t\tdestination.complete();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n}\nconst distinctUnsetMarker = Symbol();\nfunction distinctUntilChanged(compare = (a, b) => a === b) {\n\treturn (source) => {\n\t\treturn (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_0__.observable)((destination) => {\n\t\t\tlet lastValue = distinctUnsetMarker;\n\t\t\treturn source.subscribe({\n\t\t\t\tnext(value) {\n\t\t\t\t\tif (lastValue !== distinctUnsetMarker && compare(lastValue, value)) return;\n\t\t\t\t\tlastValue = value;\n\t\t\t\t\tdestination.next(value);\n\t\t\t\t},\n\t\t\t\terror(error) {\n\t\t\t\t\tdestination.error(error);\n\t\t\t\t},\n\t\t\t\tcomplete() {\n\t\t\t\t\tdestination.complete();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n}\nconst isDeepEqual = (a, b) => {\n\tif (a === b) return true;\n\tconst bothAreObjects = a && b && typeof a === \"object\" && typeof b === \"object\";\n\treturn !!bothAreObjects && Object.keys(a).length === Object.keys(b).length && Object.entries(a).every(([k, v]) => isDeepEqual(v, b[k]));\n};\nfunction distinctUntilDeepChanged() {\n\treturn distinctUntilChanged(isDeepEqual);\n}\n\n//#endregion\n//#region src/observable/behaviorSubject.ts\n/**\n* @internal\n* An observable that maintains and provides a \"current value\" to subscribers\n* @see https://www.learnrxjs.io/learn-rxjs/subjects/behaviorsubject\n*/\nfunction behaviorSubject(initialValue) {\n\tlet value = initialValue;\n\tconst observerList = [];\n\tconst addObserver = (observer) => {\n\t\tif (value !== void 0) observer.next(value);\n\t\tobserverList.push(observer);\n\t};\n\tconst removeObserver = (observer) => {\n\t\tobserverList.splice(observerList.indexOf(observer), 1);\n\t};\n\tconst obs = (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_0__.observable)((observer) => {\n\t\taddObserver(observer);\n\t\treturn () => {\n\t\t\tremoveObserver(observer);\n\t\t};\n\t});\n\tobs.next = (nextValue) => {\n\t\tif (value === nextValue) return;\n\t\tvalue = nextValue;\n\t\tfor (const observer of observerList) observer.next(nextValue);\n\t};\n\tobs.get = () => value;\n\treturn obs;\n}\n\n//#endregion\n\n//# sourceMappingURL=observable-CFXA_tyK.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDExLjQuMV90eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9vYnNlcnZhYmxlLUNGWEFfdHlLLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXVEOztBQUV2RDtBQUNBO0FBQ0E7QUFDQSxTQUFTLG9FQUFVO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxvRUFBVTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsb0VBQVU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxvRUFBVTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG9FQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDNEY7QUFDNUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytzZXJ2ZXJAMTEuNC4xX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L29ic2VydmFibGUtQ0ZYQV90eUsubWpzPzg4ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb2JzZXJ2YWJsZSB9IGZyb20gXCIuL29ic2VydmFibGUtQjFvckxISEkubWpzXCI7XG5cbi8vI3JlZ2lvbiBzcmMvb2JzZXJ2YWJsZS9vcGVyYXRvcnMudHNcbmZ1bmN0aW9uIG1hcChwcm9qZWN0KSB7XG5cdHJldHVybiAoc291cmNlKSA9PiB7XG5cdFx0cmV0dXJuIG9ic2VydmFibGUoKGRlc3RpbmF0aW9uKSA9PiB7XG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZSh7XG5cdFx0XHRcdG5leHQodmFsdWUpIHtcblx0XHRcdFx0XHRkZXN0aW5hdGlvbi5uZXh0KHByb2plY3QodmFsdWUsIGluZGV4KyspKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZXJyb3IoZXJyb3IpIHtcblx0XHRcdFx0XHRkZXN0aW5hdGlvbi5lcnJvcihlcnJvcik7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbXBsZXRlKCkge1xuXHRcdFx0XHRcdGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHN1YnNjcmlwdGlvbjtcblx0XHR9KTtcblx0fTtcbn1cbmZ1bmN0aW9uIHNoYXJlKF9vcHRzKSB7XG5cdHJldHVybiAoc291cmNlKSA9PiB7XG5cdFx0bGV0IHJlZkNvdW50ID0gMDtcblx0XHRsZXQgc3Vic2NyaXB0aW9uID0gbnVsbDtcblx0XHRjb25zdCBvYnNlcnZlcnMgPSBbXTtcblx0XHRmdW5jdGlvbiBzdGFydElmTmVlZGVkKCkge1xuXHRcdFx0aWYgKHN1YnNjcmlwdGlvbikgcmV0dXJuO1xuXHRcdFx0c3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZSh7XG5cdFx0XHRcdG5leHQodmFsdWUpIHtcblx0XHRcdFx0XHRmb3IgKGNvbnN0IG9ic2VydmVyIG9mIG9ic2VydmVycykgb2JzZXJ2ZXIubmV4dD8uKHZhbHVlKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZXJyb3IoZXJyb3IpIHtcblx0XHRcdFx0XHRmb3IgKGNvbnN0IG9ic2VydmVyIG9mIG9ic2VydmVycykgb2JzZXJ2ZXIuZXJyb3I/LihlcnJvcik7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbXBsZXRlKCkge1xuXHRcdFx0XHRcdGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2Ygb2JzZXJ2ZXJzKSBvYnNlcnZlci5jb21wbGV0ZT8uKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRmdW5jdGlvbiByZXNldElmTmVlZGVkKCkge1xuXHRcdFx0aWYgKHJlZkNvdW50ID09PSAwICYmIHN1YnNjcmlwdGlvbikge1xuXHRcdFx0XHRjb25zdCBfc3ViID0gc3Vic2NyaXB0aW9uO1xuXHRcdFx0XHRzdWJzY3JpcHRpb24gPSBudWxsO1xuXHRcdFx0XHRfc3ViLnVuc3Vic2NyaWJlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvYnNlcnZhYmxlKChzdWJzY3JpYmVyKSA9PiB7XG5cdFx0XHRyZWZDb3VudCsrO1xuXHRcdFx0b2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG5cdFx0XHRzdGFydElmTmVlZGVkKCk7XG5cdFx0XHRyZXR1cm4geyB1bnN1YnNjcmliZSgpIHtcblx0XHRcdFx0cmVmQ291bnQtLTtcblx0XHRcdFx0cmVzZXRJZk5lZWRlZCgpO1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IG9ic2VydmVycy5maW5kSW5kZXgoKHYpID0+IHYgPT09IHN1YnNjcmliZXIpO1xuXHRcdFx0XHRpZiAoaW5kZXggPiAtMSkgb2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHR9IH07XG5cdFx0fSk7XG5cdH07XG59XG5mdW5jdGlvbiB0YXAob2JzZXJ2ZXIpIHtcblx0cmV0dXJuIChzb3VyY2UpID0+IHtcblx0XHRyZXR1cm4gb2JzZXJ2YWJsZSgoZGVzdGluYXRpb24pID0+IHtcblx0XHRcdHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHtcblx0XHRcdFx0bmV4dCh2YWx1ZSkge1xuXHRcdFx0XHRcdG9ic2VydmVyLm5leHQ/Lih2YWx1ZSk7XG5cdFx0XHRcdFx0ZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yKGVycm9yKSB7XG5cdFx0XHRcdFx0b2JzZXJ2ZXIuZXJyb3I/LihlcnJvcik7XG5cdFx0XHRcdFx0ZGVzdGluYXRpb24uZXJyb3IoZXJyb3IpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRjb21wbGV0ZSgpIHtcblx0XHRcdFx0XHRvYnNlcnZlci5jb21wbGV0ZT8uKCk7XG5cdFx0XHRcdFx0ZGVzdGluYXRpb24uY29tcGxldGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG59XG5jb25zdCBkaXN0aW5jdFVuc2V0TWFya2VyID0gU3ltYm9sKCk7XG5mdW5jdGlvbiBkaXN0aW5jdFVudGlsQ2hhbmdlZChjb21wYXJlID0gKGEsIGIpID0+IGEgPT09IGIpIHtcblx0cmV0dXJuIChzb3VyY2UpID0+IHtcblx0XHRyZXR1cm4gb2JzZXJ2YWJsZSgoZGVzdGluYXRpb24pID0+IHtcblx0XHRcdGxldCBsYXN0VmFsdWUgPSBkaXN0aW5jdFVuc2V0TWFya2VyO1xuXHRcdFx0cmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUoe1xuXHRcdFx0XHRuZXh0KHZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKGxhc3RWYWx1ZSAhPT0gZGlzdGluY3RVbnNldE1hcmtlciAmJiBjb21wYXJlKGxhc3RWYWx1ZSwgdmFsdWUpKSByZXR1cm47XG5cdFx0XHRcdFx0bGFzdFZhbHVlID0gdmFsdWU7XG5cdFx0XHRcdFx0ZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yKGVycm9yKSB7XG5cdFx0XHRcdFx0ZGVzdGluYXRpb24uZXJyb3IoZXJyb3IpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRjb21wbGV0ZSgpIHtcblx0XHRcdFx0XHRkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fTtcbn1cbmNvbnN0IGlzRGVlcEVxdWFsID0gKGEsIGIpID0+IHtcblx0aWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXHRjb25zdCBib3RoQXJlT2JqZWN0cyA9IGEgJiYgYiAmJiB0eXBlb2YgYSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYiA9PT0gXCJvYmplY3RcIjtcblx0cmV0dXJuICEhYm90aEFyZU9iamVjdHMgJiYgT2JqZWN0LmtleXMoYSkubGVuZ3RoID09PSBPYmplY3Qua2V5cyhiKS5sZW5ndGggJiYgT2JqZWN0LmVudHJpZXMoYSkuZXZlcnkoKFtrLCB2XSkgPT4gaXNEZWVwRXF1YWwodiwgYltrXSkpO1xufTtcbmZ1bmN0aW9uIGRpc3RpbmN0VW50aWxEZWVwQ2hhbmdlZCgpIHtcblx0cmV0dXJuIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGlzRGVlcEVxdWFsKTtcbn1cblxuLy8jZW5kcmVnaW9uXG4vLyNyZWdpb24gc3JjL29ic2VydmFibGUvYmVoYXZpb3JTdWJqZWN0LnRzXG4vKipcbiogQGludGVybmFsXG4qIEFuIG9ic2VydmFibGUgdGhhdCBtYWludGFpbnMgYW5kIHByb3ZpZGVzIGEgXCJjdXJyZW50IHZhbHVlXCIgdG8gc3Vic2NyaWJlcnNcbiogQHNlZSBodHRwczovL3d3dy5sZWFybnJ4anMuaW8vbGVhcm4tcnhqcy9zdWJqZWN0cy9iZWhhdmlvcnN1YmplY3RcbiovXG5mdW5jdGlvbiBiZWhhdmlvclN1YmplY3QoaW5pdGlhbFZhbHVlKSB7XG5cdGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcblx0Y29uc3Qgb2JzZXJ2ZXJMaXN0ID0gW107XG5cdGNvbnN0IGFkZE9ic2VydmVyID0gKG9ic2VydmVyKSA9PiB7XG5cdFx0aWYgKHZhbHVlICE9PSB2b2lkIDApIG9ic2VydmVyLm5leHQodmFsdWUpO1xuXHRcdG9ic2VydmVyTGlzdC5wdXNoKG9ic2VydmVyKTtcblx0fTtcblx0Y29uc3QgcmVtb3ZlT2JzZXJ2ZXIgPSAob2JzZXJ2ZXIpID0+IHtcblx0XHRvYnNlcnZlckxpc3Quc3BsaWNlKG9ic2VydmVyTGlzdC5pbmRleE9mKG9ic2VydmVyKSwgMSk7XG5cdH07XG5cdGNvbnN0IG9icyA9IG9ic2VydmFibGUoKG9ic2VydmVyKSA9PiB7XG5cdFx0YWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRyZW1vdmVPYnNlcnZlcihvYnNlcnZlcik7XG5cdFx0fTtcblx0fSk7XG5cdG9icy5uZXh0ID0gKG5leHRWYWx1ZSkgPT4ge1xuXHRcdGlmICh2YWx1ZSA9PT0gbmV4dFZhbHVlKSByZXR1cm47XG5cdFx0dmFsdWUgPSBuZXh0VmFsdWU7XG5cdFx0Zm9yIChjb25zdCBvYnNlcnZlciBvZiBvYnNlcnZlckxpc3QpIG9ic2VydmVyLm5leHQobmV4dFZhbHVlKTtcblx0fTtcblx0b2JzLmdldCA9ICgpID0+IHZhbHVlO1xuXHRyZXR1cm4gb2JzO1xufVxuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGJlaGF2aW9yU3ViamVjdCwgZGlzdGluY3RVbnRpbENoYW5nZWQsIGRpc3RpbmN0VW50aWxEZWVwQ2hhbmdlZCwgbWFwLCBzaGFyZSwgdGFwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLUNGWEFfdHlLLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-CFXA_tyK.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-DPbYgJDD.mjs":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-DPbYgJDD.mjs ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Unpromise: () => (/* binding */ Unpromise),\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __toESM: () => (/* binding */ __toESM),\n/* harmony export */   createDeferred: () => (/* binding */ createDeferred),\n/* harmony export */   getRequestInfo: () => (/* binding */ getRequestInfo),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   iteratorResource: () => (/* binding */ iteratorResource),\n/* harmony export */   jsonlStreamConsumer: () => (/* binding */ jsonlStreamConsumer),\n/* harmony export */   jsonlStreamProducer: () => (/* binding */ jsonlStreamProducer),\n/* harmony export */   makeAsyncResource: () => (/* binding */ makeAsyncResource),\n/* harmony export */   makeResource: () => (/* binding */ makeResource),\n/* harmony export */   parseConnectionParamsFromString: () => (/* binding */ parseConnectionParamsFromString),\n/* harmony export */   parseConnectionParamsFromUnknown: () => (/* binding */ parseConnectionParamsFromUnknown),\n/* harmony export */   require_usingCtx: () => (/* binding */ require_usingCtx),\n/* harmony export */   resolveResponse: () => (/* binding */ resolveResponse),\n/* harmony export */   sseHeaders: () => (/* binding */ sseHeaders),\n/* harmony export */   sseStreamConsumer: () => (/* binding */ sseStreamConsumer),\n/* harmony export */   sseStreamProducer: () => (/* binding */ sseStreamProducer),\n/* harmony export */   takeWithGrace: () => (/* binding */ takeWithGrace),\n/* harmony export */   throwAbortError: () => (/* binding */ throwAbortError),\n/* harmony export */   withMaxDuration: () => (/* binding */ withMaxDuration)\n/* harmony export */ });\n/* harmony import */ var _getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getErrorShape-DyYil4aT.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-DyYil4aT.mjs\");\n/* harmony import */ var _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracked-GEWPoL0C.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-GEWPoL0C.mjs\");\n/* harmony import */ var _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-BHZJcBRv.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs\");\n/* harmony import */ var _observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./observable-B1orLHHI.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-B1orLHHI.mjs\");\n\n\n\n\n\n//#region rolldown:runtime\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function() {\n\treturn mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n\tif (from && typeof from === \"object\" || typeof from === \"function\") for (var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++) {\n\t\tkey = keys[i];\n\t\tif (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n\t\t\tget: ((k) => from[k]).bind(null, key),\n\t\t\tenumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n\t\t});\n\t}\n\treturn to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n\tvalue: mod,\n\tenumerable: true\n}) : target, mod));\n\n//#endregion\n//#region src/unstable-core-do-not-import/http/parseConnectionParams.ts\nfunction parseConnectionParamsFromUnknown(parsed) {\n\ttry {\n\t\tif (parsed === null) return null;\n\t\tif (!(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(parsed)) throw new Error(\"Expected object\");\n\t\tconst nonStringValues = Object.entries(parsed).filter(([_key, value]) => typeof value !== \"string\");\n\t\tif (nonStringValues.length > 0) throw new Error(`Expected connectionParams to be string values. Got ${nonStringValues.map(([key, value]) => `${key}: ${typeof value}`).join(\", \")}`);\n\t\treturn parsed;\n\t} catch (cause) {\n\t\tthrow new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\tcode: \"PARSE_ERROR\",\n\t\t\tmessage: \"Invalid connection params shape\",\n\t\t\tcause\n\t\t});\n\t}\n}\nfunction parseConnectionParamsFromString(str) {\n\tlet parsed;\n\ttry {\n\t\tparsed = JSON.parse(str);\n\t} catch (cause) {\n\t\tthrow new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\tcode: \"PARSE_ERROR\",\n\t\t\tmessage: \"Not JSON-parsable query params\",\n\t\t\tcause\n\t\t});\n\t}\n\treturn parseConnectionParamsFromUnknown(parsed);\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/http/contentType.ts\n/**\n* Memoize a function that takes no arguments\n* @internal\n*/\nfunction memo(fn) {\n\tlet promise = null;\n\tconst sym = Symbol.for(\"@trpc/server/http/memo\");\n\tlet value = sym;\n\treturn {\n\t\tread: async () => {\n\t\t\tif (value !== sym) return value;\n\t\t\tpromise ??= fn().catch((cause) => {\n\t\t\t\tif (cause instanceof _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError) throw cause;\n\t\t\t\tthrow new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\t\t\tcode: \"BAD_REQUEST\",\n\t\t\t\t\tmessage: cause instanceof Error ? cause.message : \"Invalid input\",\n\t\t\t\t\tcause\n\t\t\t\t});\n\t\t\t});\n\t\t\tvalue = await promise;\n\t\t\tpromise = null;\n\t\t\treturn value;\n\t\t},\n\t\tresult: () => {\n\t\t\treturn value !== sym ? value : void 0;\n\t\t}\n\t};\n}\nconst jsonContentTypeHandler = {\n\tisMatch(req) {\n\t\treturn !!req.headers.get(\"content-type\")?.startsWith(\"application/json\");\n\t},\n\tasync parse(opts) {\n\t\tconst { req } = opts;\n\t\tconst isBatchCall = opts.searchParams.get(\"batch\") === \"1\";\n\t\tconst paths = isBatchCall ? opts.path.split(\",\") : [opts.path];\n\t\tconst getInputs = memo(async () => {\n\t\t\tlet inputs = void 0;\n\t\t\tif (req.method === \"GET\") {\n\t\t\t\tconst queryInput = opts.searchParams.get(\"input\");\n\t\t\t\tif (queryInput) inputs = JSON.parse(queryInput);\n\t\t\t} else inputs = await req.json();\n\t\t\tif (inputs === void 0) return {};\n\t\t\tif (!isBatchCall) return { 0: opts.router._def._config.transformer.input.deserialize(inputs) };\n\t\t\tif (!(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(inputs)) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\t\tcode: \"BAD_REQUEST\",\n\t\t\t\tmessage: \"\\\"input\\\" needs to be an object when doing a batch call\"\n\t\t\t});\n\t\t\tconst acc = {};\n\t\t\tfor (const index of paths.keys()) {\n\t\t\t\tconst input = inputs[index];\n\t\t\t\tif (input !== void 0) acc[index] = opts.router._def._config.transformer.input.deserialize(input);\n\t\t\t}\n\t\t\treturn acc;\n\t\t});\n\t\tconst calls = await Promise.all(paths.map(async (path, index) => {\n\t\t\tconst procedure = await (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, path);\n\t\t\treturn {\n\t\t\t\tpath,\n\t\t\t\tprocedure,\n\t\t\t\tgetRawInput: async () => {\n\t\t\t\t\tconst inputs = await getInputs.read();\n\t\t\t\t\tlet input = inputs[index];\n\t\t\t\t\tif (procedure?._def.type === \"subscription\") {\n\t\t\t\t\t\tconst lastEventId = opts.headers.get(\"last-event-id\") ?? opts.searchParams.get(\"lastEventId\") ?? opts.searchParams.get(\"Last-Event-Id\");\n\t\t\t\t\t\tif (lastEventId) if ((0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(input)) input = {\n\t\t\t\t\t\t\t...input,\n\t\t\t\t\t\t\tlastEventId\n\t\t\t\t\t\t};\n\t\t\t\t\t\telse input ??= { lastEventId };\n\t\t\t\t\t}\n\t\t\t\t\treturn input;\n\t\t\t\t},\n\t\t\t\tresult: () => {\n\t\t\t\t\treturn getInputs.result()?.[index];\n\t\t\t\t}\n\t\t\t};\n\t\t}));\n\t\tconst types = new Set(calls.map((call) => call.procedure?._def.type).filter(Boolean));\n\t\t/* istanbul ignore if -- @preserve */\n\t\tif (types.size > 1) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\tcode: \"BAD_REQUEST\",\n\t\t\tmessage: `Cannot mix procedure types in call: ${Array.from(types).join(\", \")}`\n\t\t});\n\t\tconst type = types.values().next().value ?? \"unknown\";\n\t\tconst connectionParamsStr = opts.searchParams.get(\"connectionParams\");\n\t\tconst info = {\n\t\t\tisBatchCall,\n\t\t\taccept: req.headers.get(\"trpc-accept\"),\n\t\t\tcalls,\n\t\t\ttype,\n\t\t\tconnectionParams: connectionParamsStr === null ? null : parseConnectionParamsFromString(connectionParamsStr),\n\t\t\tsignal: req.signal,\n\t\t\turl: opts.url\n\t\t};\n\t\treturn info;\n\t}\n};\nconst formDataContentTypeHandler = {\n\tisMatch(req) {\n\t\treturn !!req.headers.get(\"content-type\")?.startsWith(\"multipart/form-data\");\n\t},\n\tasync parse(opts) {\n\t\tconst { req } = opts;\n\t\tif (req.method !== \"POST\") throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\tcode: \"METHOD_NOT_SUPPORTED\",\n\t\t\tmessage: \"Only POST requests are supported for multipart/form-data requests\"\n\t\t});\n\t\tconst getInputs = memo(async () => {\n\t\t\tconst fd = await req.formData();\n\t\t\treturn fd;\n\t\t});\n\t\tconst procedure = await (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, opts.path);\n\t\treturn {\n\t\t\taccept: null,\n\t\t\tcalls: [{\n\t\t\t\tpath: opts.path,\n\t\t\t\tgetRawInput: getInputs.read,\n\t\t\t\tresult: getInputs.result,\n\t\t\t\tprocedure\n\t\t\t}],\n\t\t\tisBatchCall: false,\n\t\t\ttype: \"mutation\",\n\t\t\tconnectionParams: null,\n\t\t\tsignal: req.signal,\n\t\t\turl: opts.url\n\t\t};\n\t}\n};\nconst octetStreamContentTypeHandler = {\n\tisMatch(req) {\n\t\treturn !!req.headers.get(\"content-type\")?.startsWith(\"application/octet-stream\");\n\t},\n\tasync parse(opts) {\n\t\tconst { req } = opts;\n\t\tif (req.method !== \"POST\") throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\tcode: \"METHOD_NOT_SUPPORTED\",\n\t\t\tmessage: \"Only POST requests are supported for application/octet-stream requests\"\n\t\t});\n\t\tconst getInputs = memo(async () => {\n\t\t\treturn req.body;\n\t\t});\n\t\treturn {\n\t\t\tcalls: [{\n\t\t\t\tpath: opts.path,\n\t\t\t\tgetRawInput: getInputs.read,\n\t\t\t\tresult: getInputs.result,\n\t\t\t\tprocedure: await (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, opts.path)\n\t\t\t}],\n\t\t\tisBatchCall: false,\n\t\t\taccept: null,\n\t\t\ttype: \"mutation\",\n\t\t\tconnectionParams: null,\n\t\t\tsignal: req.signal,\n\t\t\turl: opts.url\n\t\t};\n\t}\n};\nconst handlers = [\n\tjsonContentTypeHandler,\n\tformDataContentTypeHandler,\n\toctetStreamContentTypeHandler\n];\nfunction getContentTypeHandler(req) {\n\tconst handler = handlers.find((handler$1) => handler$1.isMatch(req));\n\tif (handler) return handler;\n\tif (!handler && req.method === \"GET\") return jsonContentTypeHandler;\n\tthrow new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\tcode: \"UNSUPPORTED_MEDIA_TYPE\",\n\t\tmessage: req.headers.has(\"content-type\") ? `Unsupported content-type \"${req.headers.get(\"content-type\")}` : \"Missing content-type header\"\n\t});\n}\nasync function getRequestInfo(opts) {\n\tconst handler = getContentTypeHandler(opts.req);\n\treturn await handler.parse(opts);\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/http/abortError.ts\nfunction isAbortError(error) {\n\treturn (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(error) && error[\"name\"] === \"AbortError\";\n}\nfunction throwAbortError(message = \"AbortError\") {\n\tthrow new DOMException(message, \"AbortError\");\n}\n\n//#endregion\n//#region src/vendor/unpromise/unpromise.ts\n/** Memory safe (weakmapped) cache of the ProxyPromise for each Promise,\n* which is retained for the lifetime of the original Promise.\n*/\nconst subscribableCache = /* @__PURE__ */ new WeakMap();\n/** A NOOP function allowing a consistent interface for settled\n* SubscribedPromises (settled promises are not subscribed - they resolve\n* immediately). */\nconst NOOP = () => {};\n/**\n* Every `Promise<T>` can be shadowed by a single `ProxyPromise<T>`. It is\n* created once, cached and reused throughout the lifetime of the Promise. Get a\n* Promise's ProxyPromise using `Unpromise.proxy(promise)`.\n*\n* The `ProxyPromise<T>` attaches handlers to the original `Promise<T>`\n* `.then()` and `.catch()` just once. Promises derived from it use a\n* subscription- (and unsubscription-) based mechanism that monitors these\n* handlers.\n*\n* Every time you call `.subscribe()`, `.then()` `.catch()` or `.finally()` on a\n* `ProxyPromise<T>` it returns a `SubscribedPromise<T>` having an additional\n* `unsubscribe()` method. Calling `unsubscribe()` detaches reference chains\n* from the original, potentially long-lived Promise, eliminating memory leaks.\n*\n* This approach can eliminate the memory leaks that otherwise come about from\n* repeated `race()` or `any()` calls invoking `.then()` and `.catch()` multiple\n* times on the same long-lived native Promise (subscriptions which can never be\n* cleaned up).\n*\n* `Unpromise.race(promises)` is a reference implementation of `Promise.race`\n* avoiding memory leaks when using long-lived unsettled Promises.\n*\n* `Unpromise.any(promises)` is a reference implementation of `Promise.any`\n* avoiding memory leaks when using long-lived unsettled Promises.\n*\n* `Unpromise.resolve(promise)` returns an ephemeral `SubscribedPromise<T>` for\n* any given `Promise<T>` facilitating arbitrary async/await patterns. Behind\n* the scenes, `resolve` is implemented simply as\n* `Unpromise.proxy(promise).subscribe()`. Don't forget to call `.unsubscribe()`\n* to tidy up!\n*\n*/\nvar Unpromise = class Unpromise {\n\t/** INSTANCE IMPLEMENTATION */\n\t/** The promise shadowed by this Unpromise<T>  */\n\tpromise;\n\t/** Promises expecting eventual settlement (unless unsubscribed first). This list is deleted\n\t* after the original promise settles - no further notifications will be issued. */\n\tsubscribers = [];\n\t/** The Promise's settlement (recorded when it fulfils or rejects). This is consulted when\n\t* calling .subscribe() .then() .catch() .finally() to see if an immediately-resolving Promise\n\t* can be returned, and therefore subscription can be bypassed. */\n\tsettlement = null;\n\tconstructor(arg) {\n\t\tif (typeof arg === \"function\") this.promise = new Promise(arg);\n\t\telse this.promise = arg;\n\t\tconst thenReturn = this.promise.then((value) => {\n\t\t\tconst { subscribers } = this;\n\t\t\tthis.subscribers = null;\n\t\t\tthis.settlement = {\n\t\t\t\tstatus: \"fulfilled\",\n\t\t\t\tvalue\n\t\t\t};\n\t\t\tsubscribers?.forEach(({ resolve }) => {\n\t\t\t\tresolve(value);\n\t\t\t});\n\t\t});\n\t\tif (\"catch\" in thenReturn) thenReturn.catch((reason) => {\n\t\t\tconst { subscribers } = this;\n\t\t\tthis.subscribers = null;\n\t\t\tthis.settlement = {\n\t\t\t\tstatus: \"rejected\",\n\t\t\t\treason\n\t\t\t};\n\t\t\tsubscribers?.forEach(({ reject }) => {\n\t\t\t\treject(reason);\n\t\t\t});\n\t\t});\n\t}\n\t/** Create a promise that mitigates uncontrolled subscription to a long-lived\n\t* Promise via .then() and .catch() - otherwise a source of memory leaks.\n\t*\n\t* The returned promise has an `unsubscribe()` method which can be called when\n\t* the Promise is no longer being tracked by application logic, and which\n\t* ensures that there is no reference chain from the original promise to the\n\t* new one, and therefore no memory leak.\n\t*\n\t* If original promise has not yet settled, this adds a new unique promise\n\t* that listens to then/catch events, along with an `unsubscribe()` method to\n\t* detach it.\n\t*\n\t* If original promise has settled, then creates a new Promise.resolve() or\n\t* Promise.reject() and provided unsubscribe is a noop.\n\t*\n\t* If you call `unsubscribe()` before the returned Promise has settled, it\n\t* will never settle.\n\t*/\n\tsubscribe() {\n\t\tlet promise;\n\t\tlet unsubscribe;\n\t\tconst { settlement } = this;\n\t\tif (settlement === null) {\n\t\t\tif (this.subscribers === null) throw new Error(\"Unpromise settled but still has subscribers\");\n\t\t\tconst subscriber = withResolvers();\n\t\t\tthis.subscribers = listWithMember(this.subscribers, subscriber);\n\t\t\tpromise = subscriber.promise;\n\t\t\tunsubscribe = () => {\n\t\t\t\tif (this.subscribers !== null) this.subscribers = listWithoutMember(this.subscribers, subscriber);\n\t\t\t};\n\t\t} else {\n\t\t\tconst { status } = settlement;\n\t\t\tif (status === \"fulfilled\") promise = Promise.resolve(settlement.value);\n\t\t\telse promise = Promise.reject(settlement.reason);\n\t\t\tunsubscribe = NOOP;\n\t\t}\n\t\treturn Object.assign(promise, { unsubscribe });\n\t}\n\t/** STANDARD PROMISE METHODS (but returning a SubscribedPromise) */\n\tthen(onfulfilled, onrejected) {\n\t\tconst subscribed = this.subscribe();\n\t\tconst { unsubscribe } = subscribed;\n\t\treturn Object.assign(subscribed.then(onfulfilled, onrejected), { unsubscribe });\n\t}\n\tcatch(onrejected) {\n\t\tconst subscribed = this.subscribe();\n\t\tconst { unsubscribe } = subscribed;\n\t\treturn Object.assign(subscribed.catch(onrejected), { unsubscribe });\n\t}\n\tfinally(onfinally) {\n\t\tconst subscribed = this.subscribe();\n\t\tconst { unsubscribe } = subscribed;\n\t\treturn Object.assign(subscribed.finally(onfinally), { unsubscribe });\n\t}\n\t/** TOSTRING SUPPORT */\n\t[Symbol.toStringTag] = \"Unpromise\";\n\t/** Unpromise STATIC METHODS */\n\t/** Create or Retrieve the proxy Unpromise (a re-used Unpromise for the VM lifetime\n\t* of the provided Promise reference) */\n\tstatic proxy(promise) {\n\t\tconst cached = Unpromise.getSubscribablePromise(promise);\n\t\treturn typeof cached !== \"undefined\" ? cached : Unpromise.createSubscribablePromise(promise);\n\t}\n\t/** Create and store an Unpromise keyed by an original Promise. */\n\tstatic createSubscribablePromise(promise) {\n\t\tconst created = new Unpromise(promise);\n\t\tsubscribableCache.set(promise, created);\n\t\tsubscribableCache.set(created, created);\n\t\treturn created;\n\t}\n\t/** Retrieve a previously-created Unpromise keyed by an original Promise. */\n\tstatic getSubscribablePromise(promise) {\n\t\treturn subscribableCache.get(promise);\n\t}\n\t/** Promise STATIC METHODS */\n\t/** Lookup the Unpromise for this promise, and derive a SubscribedPromise from\n\t* it (that can be later unsubscribed to eliminate Memory leaks) */\n\tstatic resolve(value) {\n\t\tconst promise = typeof value === \"object\" && value !== null && \"then\" in value && typeof value.then === \"function\" ? value : Promise.resolve(value);\n\t\treturn Unpromise.proxy(promise).subscribe();\n\t}\n\tstatic async any(values) {\n\t\tconst valuesArray = Array.isArray(values) ? values : [...values];\n\t\tconst subscribedPromises = valuesArray.map(Unpromise.resolve);\n\t\ttry {\n\t\t\treturn await Promise.any(subscribedPromises);\n\t\t} finally {\n\t\t\tsubscribedPromises.forEach(({ unsubscribe }) => {\n\t\t\t\tunsubscribe();\n\t\t\t});\n\t\t}\n\t}\n\tstatic async race(values) {\n\t\tconst valuesArray = Array.isArray(values) ? values : [...values];\n\t\tconst subscribedPromises = valuesArray.map(Unpromise.resolve);\n\t\ttry {\n\t\t\treturn await Promise.race(subscribedPromises);\n\t\t} finally {\n\t\t\tsubscribedPromises.forEach(({ unsubscribe }) => {\n\t\t\t\tunsubscribe();\n\t\t\t});\n\t\t}\n\t}\n\t/** Create a race of SubscribedPromises that will fulfil to a single winning\n\t* Promise (in a 1-Tuple). Eliminates memory leaks from long-lived promises\n\t* accumulating .then() and .catch() subscribers. Allows simple logic to\n\t* consume the result, like...\n\t* ```ts\n\t* const [ winner ] = await Unpromise.race([ promiseA, promiseB ]);\n\t* if(winner === promiseB){\n\t*   const result = await promiseB;\n\t*   // do the thing\n\t* }\n\t* ```\n\t* */\n\tstatic async raceReferences(promises) {\n\t\tconst selfPromises = promises.map(resolveSelfTuple);\n\t\ttry {\n\t\t\treturn await Promise.race(selfPromises);\n\t\t} finally {\n\t\t\tfor (const promise of selfPromises) promise.unsubscribe();\n\t\t}\n\t}\n};\n/** Promises a 1-tuple containing the original promise when it resolves. Allows\n* awaiting the eventual Promise ***reference*** (easy to destructure and\n* exactly compare with ===). Avoids resolving to the Promise ***value*** (which\n* may be ambiguous and therefore hard to identify as the winner of a race).\n* You can call unsubscribe on the Promise to mitigate memory leaks.\n* */\nfunction resolveSelfTuple(promise) {\n\treturn Unpromise.proxy(promise).then(() => [promise]);\n}\n/** VENDORED (Future) PROMISE UTILITIES */\n/** Reference implementation of https://github.com/tc39/proposal-promise-with-resolvers */\nfunction withResolvers() {\n\tlet resolve;\n\tlet reject;\n\tconst promise = new Promise((_resolve, _reject) => {\n\t\tresolve = _resolve;\n\t\treject = _reject;\n\t});\n\treturn {\n\t\tpromise,\n\t\tresolve,\n\t\treject\n\t};\n}\n/** IMMUTABLE LIST OPERATIONS */\nfunction listWithMember(arr, member) {\n\treturn [...arr, member];\n}\nfunction listWithoutIndex(arr, index) {\n\treturn [...arr.slice(0, index), ...arr.slice(index + 1)];\n}\nfunction listWithoutMember(arr, member) {\n\tconst index = arr.indexOf(member);\n\tif (index !== -1) return listWithoutIndex(arr, index);\n\treturn arr;\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/disposable.ts\nSymbol.dispose ??= Symbol();\nSymbol.asyncDispose ??= Symbol();\n/**\n* Takes a value and a dispose function and returns a new object that implements the Disposable interface.\n* The returned object is the original value augmented with a Symbol.dispose method.\n* @param thing The value to make disposable\n* @param dispose Function to call when disposing the resource\n* @returns The original value with Symbol.dispose method added\n*/\nfunction makeResource(thing, dispose) {\n\tconst it = thing;\n\tconst existing = it[Symbol.dispose];\n\tit[Symbol.dispose] = () => {\n\t\tdispose();\n\t\texisting?.();\n\t};\n\treturn it;\n}\n/**\n* Takes a value and an async dispose function and returns a new object that implements the AsyncDisposable interface.\n* The returned object is the original value augmented with a Symbol.asyncDispose method.\n* @param thing The value to make async disposable\n* @param dispose Async function to call when disposing the resource\n* @returns The original value with Symbol.asyncDispose method added\n*/\nfunction makeAsyncResource(thing, dispose) {\n\tconst it = thing;\n\tconst existing = it[Symbol.asyncDispose];\n\tit[Symbol.asyncDispose] = async () => {\n\t\tawait dispose();\n\t\tawait existing?.();\n\t};\n\treturn it;\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/timerResource.ts\nconst disposablePromiseTimerResult = Symbol();\nfunction timerResource(ms) {\n\tlet timer = null;\n\treturn makeResource({ start() {\n\t\tif (timer) throw new Error(\"Timer already started\");\n\t\tconst promise = new Promise((resolve) => {\n\t\t\ttimer = setTimeout(() => resolve(disposablePromiseTimerResult), ms);\n\t\t});\n\t\treturn promise;\n\t} }, () => {\n\t\tif (timer) clearTimeout(timer);\n\t});\n}\n\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js\nvar require_usingCtx = __commonJS({ \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js\"(exports, module) {\n\tfunction _usingCtx() {\n\t\tvar r = \"function\" == typeof SuppressedError ? SuppressedError : function(r$1, e$1) {\n\t\t\tvar n$1 = Error();\n\t\t\treturn n$1.name = \"SuppressedError\", n$1.error = r$1, n$1.suppressed = e$1, n$1;\n\t\t}, e = {}, n = [];\n\t\tfunction using(r$1, e$1) {\n\t\t\tif (null != e$1) {\n\t\t\t\tif (Object(e$1) !== e$1) throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");\n\t\t\t\tif (r$1) var o = e$1[Symbol.asyncDispose || Symbol[\"for\"](\"Symbol.asyncDispose\")];\n\t\t\t\tif (void 0 === o && (o = e$1[Symbol.dispose || Symbol[\"for\"](\"Symbol.dispose\")], r$1)) var t = o;\n\t\t\t\tif (\"function\" != typeof o) throw new TypeError(\"Object is not disposable.\");\n\t\t\t\tt && (o = function o$1() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tt.call(e$1);\n\t\t\t\t\t} catch (r$2) {\n\t\t\t\t\t\treturn Promise.reject(r$2);\n\t\t\t\t\t}\n\t\t\t\t}), n.push({\n\t\t\t\t\tv: e$1,\n\t\t\t\t\td: o,\n\t\t\t\t\ta: r$1\n\t\t\t\t});\n\t\t\t} else r$1 && n.push({\n\t\t\t\td: e$1,\n\t\t\t\ta: r$1\n\t\t\t});\n\t\t\treturn e$1;\n\t\t}\n\t\treturn {\n\t\t\te,\n\t\t\tu: using.bind(null, !1),\n\t\t\ta: using.bind(null, !0),\n\t\t\td: function d() {\n\t\t\t\tvar o, t = this.e, s = 0;\n\t\t\t\tfunction next() {\n\t\t\t\t\tfor (; o = n.pop();) try {\n\t\t\t\t\t\tif (!o.a && 1 === s) return s = 0, n.push(o), Promise.resolve().then(next);\n\t\t\t\t\t\tif (o.d) {\n\t\t\t\t\t\t\tvar r$1 = o.d.call(o.v);\n\t\t\t\t\t\t\tif (o.a) return s |= 2, Promise.resolve(r$1).then(next, err);\n\t\t\t\t\t\t} else s |= 1;\n\t\t\t\t\t} catch (r$2) {\n\t\t\t\t\t\treturn err(r$2);\n\t\t\t\t\t}\n\t\t\t\t\tif (1 === s) return t !== e ? Promise.reject(t) : Promise.resolve();\n\t\t\t\t\tif (t !== e) throw t;\n\t\t\t\t}\n\t\t\t\tfunction err(n$1) {\n\t\t\t\t\treturn t = t !== e ? new r(n$1, t) : n$1, next();\n\t\t\t\t}\n\t\t\t\treturn next();\n\t\t\t}\n\t\t};\n\t}\n\tmodule.exports = _usingCtx, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n} });\n\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/asyncIterable.ts\nvar import_usingCtx$4 = __toESM(require_usingCtx(), 1);\nfunction iteratorResource(iterable) {\n\tconst iterator = iterable[Symbol.asyncIterator]();\n\tif (iterator[Symbol.asyncDispose]) return iterator;\n\treturn makeAsyncResource(iterator, async () => {\n\t\tawait iterator.return?.();\n\t});\n}\n/**\n* Derives a new {@link AsyncGenerator} based on {@link iterable}, that automatically aborts after the specified duration.\n*/\nasync function* withMaxDuration(iterable, opts) {\n\ttry {\n\t\tvar _usingCtx$1 = (0, import_usingCtx$4.default)();\n\t\tconst iterator = _usingCtx$1.a(iteratorResource(iterable));\n\t\tconst timer = _usingCtx$1.u(timerResource(opts.maxDurationMs));\n\t\tconst timerPromise = timer.start();\n\t\tlet result;\n\t\twhile (true) {\n\t\t\tresult = await Unpromise.race([iterator.next(), timerPromise]);\n\t\t\tif (result === disposablePromiseTimerResult) throwAbortError();\n\t\t\tif (result.done) return result;\n\t\t\tyield result.value;\n\t\t\tresult = null;\n\t\t}\n\t} catch (_) {\n\t\t_usingCtx$1.e = _;\n\t} finally {\n\t\tawait _usingCtx$1.d();\n\t}\n}\n/**\n* Derives a new {@link AsyncGenerator} based of {@link iterable}, that yields its first\n* {@link count} values. Then, a grace period of {@link gracePeriodMs} is started in which further\n* values may still come through. After this period, the generator aborts.\n*/\nasync function* takeWithGrace(iterable, opts) {\n\ttry {\n\t\tvar _usingCtx3 = (0, import_usingCtx$4.default)();\n\t\tconst iterator = _usingCtx3.a(iteratorResource(iterable));\n\t\tlet result;\n\t\tconst timer = _usingCtx3.u(timerResource(opts.gracePeriodMs));\n\t\tlet count = opts.count;\n\t\tlet timerPromise = new Promise(() => {});\n\t\twhile (true) {\n\t\t\tresult = await Unpromise.race([iterator.next(), timerPromise]);\n\t\t\tif (result === disposablePromiseTimerResult) throwAbortError();\n\t\t\tif (result.done) return result.value;\n\t\t\tyield result.value;\n\t\t\tif (--count === 0) timerPromise = timer.start();\n\t\t\tresult = null;\n\t\t}\n\t} catch (_) {\n\t\t_usingCtx3.e = _;\n\t} finally {\n\t\tawait _usingCtx3.d();\n\t}\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/createDeferred.ts\nfunction createDeferred() {\n\tlet resolve;\n\tlet reject;\n\tconst promise = new Promise((res, rej) => {\n\t\tresolve = res;\n\t\treject = rej;\n\t});\n\treturn {\n\t\tpromise,\n\t\tresolve,\n\t\treject\n\t};\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/mergeAsyncIterables.ts\nvar import_usingCtx$3 = __toESM(require_usingCtx(), 1);\nfunction createManagedIterator(iterable, onResult) {\n\tconst iterator = iterable[Symbol.asyncIterator]();\n\tlet state = \"idle\";\n\tfunction cleanup() {\n\t\tstate = \"done\";\n\t\tonResult = () => {};\n\t}\n\tfunction pull() {\n\t\tif (state !== \"idle\") return;\n\t\tstate = \"pending\";\n\t\tconst next = iterator.next();\n\t\tnext.then((result) => {\n\t\t\tif (result.done) {\n\t\t\t\tstate = \"done\";\n\t\t\t\tonResult({\n\t\t\t\t\tstatus: \"return\",\n\t\t\t\t\tvalue: result.value\n\t\t\t\t});\n\t\t\t\tcleanup();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstate = \"idle\";\n\t\t\tonResult({\n\t\t\t\tstatus: \"yield\",\n\t\t\t\tvalue: result.value\n\t\t\t});\n\t\t}).catch((cause) => {\n\t\t\tonResult({\n\t\t\t\tstatus: \"error\",\n\t\t\t\terror: cause\n\t\t\t});\n\t\t\tcleanup();\n\t\t});\n\t}\n\treturn {\n\t\tpull,\n\t\tdestroy: async () => {\n\t\t\tcleanup();\n\t\t\tawait iterator.return?.();\n\t\t}\n\t};\n}\n/**\n* Creates a new async iterable that merges multiple async iterables into a single stream.\n* Values from the input iterables are yielded in the order they resolve, similar to Promise.race().\n*\n* New iterables can be added dynamically using the returned {@link MergedAsyncIterables.add} method, even after iteration has started.\n*\n* If any of the input iterables throws an error, that error will be propagated through the merged stream.\n* Other iterables will not continue to be processed.\n*\n* @template TYield The type of values yielded by the input iterables\n*/\nfunction mergeAsyncIterables() {\n\tlet state = \"idle\";\n\tlet flushSignal = createDeferred();\n\t/**\n\t* used while {@link state} is `idle`\n\t*/\n\tconst iterables = [];\n\t/**\n\t* used while {@link state} is `pending`\n\t*/\n\tconst iterators = /* @__PURE__ */ new Set();\n\tconst buffer = [];\n\tfunction initIterable(iterable) {\n\t\tif (state !== \"pending\") return;\n\t\tconst iterator = createManagedIterator(iterable, (result) => {\n\t\t\tif (state !== \"pending\") return;\n\t\t\tswitch (result.status) {\n\t\t\t\tcase \"yield\":\n\t\t\t\t\tbuffer.push([iterator, result]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"return\":\n\t\t\t\t\titerators.delete(iterator);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"error\":\n\t\t\t\t\tbuffer.push([iterator, result]);\n\t\t\t\t\titerators.delete(iterator);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tflushSignal.resolve();\n\t\t});\n\t\titerators.add(iterator);\n\t\titerator.pull();\n\t}\n\treturn {\n\t\tadd(iterable) {\n\t\t\tswitch (state) {\n\t\t\t\tcase \"idle\":\n\t\t\t\t\titerables.push(iterable);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"pending\":\n\t\t\t\t\tinitIterable(iterable);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"done\": break;\n\t\t\t}\n\t\t},\n\t\tasync *[Symbol.asyncIterator]() {\n\t\t\ttry {\n\t\t\t\tvar _usingCtx$1 = (0, import_usingCtx$3.default)();\n\t\t\t\tif (state !== \"idle\") throw new Error(\"Cannot iterate twice\");\n\t\t\t\tstate = \"pending\";\n\t\t\t\tconst _finally = _usingCtx$1.a(makeAsyncResource({}, async () => {\n\t\t\t\t\tstate = \"done\";\n\t\t\t\t\tconst errors = [];\n\t\t\t\t\tawait Promise.all(Array.from(iterators.values()).map(async (it) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait it.destroy();\n\t\t\t\t\t\t} catch (cause) {\n\t\t\t\t\t\t\terrors.push(cause);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t\tbuffer.length = 0;\n\t\t\t\t\titerators.clear();\n\t\t\t\t\tflushSignal.resolve();\n\t\t\t\t\tif (errors.length > 0) throw new AggregateError(errors);\n\t\t\t\t}));\n\t\t\t\twhile (iterables.length > 0) initIterable(iterables.shift());\n\t\t\t\twhile (iterators.size > 0) {\n\t\t\t\t\tawait flushSignal.promise;\n\t\t\t\t\twhile (buffer.length > 0) {\n\t\t\t\t\t\tconst [iterator, result] = buffer.shift();\n\t\t\t\t\t\tswitch (result.status) {\n\t\t\t\t\t\t\tcase \"yield\":\n\t\t\t\t\t\t\t\tyield result.value;\n\t\t\t\t\t\t\t\titerator.pull();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"error\": throw result.error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tflushSignal = createDeferred();\n\t\t\t\t}\n\t\t\t} catch (_) {\n\t\t\t\t_usingCtx$1.e = _;\n\t\t\t} finally {\n\t\t\t\tawait _usingCtx$1.d();\n\t\t\t}\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/readableStreamFrom.ts\n/**\n* Creates a ReadableStream from an AsyncIterable.\n*\n* @param iterable - The source AsyncIterable to stream from\n* @returns A ReadableStream that yields values from the AsyncIterable\n*/\nfunction readableStreamFrom(iterable) {\n\tconst iterator = iterable[Symbol.asyncIterator]();\n\treturn new ReadableStream({\n\t\tasync cancel() {\n\t\t\tawait iterator.return?.();\n\t\t},\n\t\tasync pull(controller) {\n\t\t\tconst result = await iterator.next();\n\t\t\tif (result.done) {\n\t\t\t\tcontroller.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcontroller.enqueue(result.value);\n\t\t}\n\t});\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/withPing.ts\nvar import_usingCtx$2 = __toESM(require_usingCtx(), 1);\nconst PING_SYM = Symbol(\"ping\");\n/**\n* Derives a new {@link AsyncGenerator} based of {@link iterable}, that yields {@link PING_SYM}\n* whenever no value has been yielded for {@link pingIntervalMs}.\n*/\nasync function* withPing(iterable, pingIntervalMs) {\n\ttry {\n\t\tvar _usingCtx$1 = (0, import_usingCtx$2.default)();\n\t\tconst iterator = _usingCtx$1.a(iteratorResource(iterable));\n\t\tlet result;\n\t\tlet nextPromise = iterator.next();\n\t\twhile (true) try {\n\t\t\tvar _usingCtx3 = (0, import_usingCtx$2.default)();\n\t\t\tconst pingPromise = _usingCtx3.u(timerResource(pingIntervalMs));\n\t\t\tresult = await Unpromise.race([nextPromise, pingPromise.start()]);\n\t\t\tif (result === disposablePromiseTimerResult) {\n\t\t\t\tyield PING_SYM;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (result.done) return result.value;\n\t\t\tnextPromise = iterator.next();\n\t\t\tyield result.value;\n\t\t\tresult = null;\n\t\t} catch (_) {\n\t\t\t_usingCtx3.e = _;\n\t\t} finally {\n\t\t\t_usingCtx3.d();\n\t\t}\n\t} catch (_) {\n\t\t_usingCtx$1.e = _;\n\t} finally {\n\t\tawait _usingCtx$1.d();\n\t}\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/stream/jsonl.ts\nvar import_usingCtx$1 = __toESM(require_usingCtx(), 1);\nfunction isPlainObject(value) {\n\treturn Object.prototype.toString.call(value) === \"[object Object]\";\n}\nconst CHUNK_VALUE_TYPE_PROMISE = 0;\nconst CHUNK_VALUE_TYPE_ASYNC_ITERABLE = 1;\nconst PROMISE_STATUS_FULFILLED = 0;\nconst PROMISE_STATUS_REJECTED = 1;\nconst ASYNC_ITERABLE_STATUS_RETURN = 0;\nconst ASYNC_ITERABLE_STATUS_YIELD = 1;\nconst ASYNC_ITERABLE_STATUS_ERROR = 2;\nfunction isPromise(value) {\n\treturn ((0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) || (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value)) && typeof value?.[\"then\"] === \"function\" && typeof value?.[\"catch\"] === \"function\";\n}\nvar MaxDepthError = class extends Error {\n\tconstructor(path) {\n\t\tsuper(\"Max depth reached at path: \" + path.join(\".\"));\n\t\tthis.path = path;\n\t}\n};\nasync function* createBatchStreamProducer(opts) {\n\tconst { data } = opts;\n\tlet counter = 0;\n\tconst placeholder = 0;\n\tconst mergedIterables = mergeAsyncIterables();\n\tfunction registerAsync(callback) {\n\t\tconst idx = counter++;\n\t\tconst iterable$1 = callback(idx);\n\t\tmergedIterables.add(iterable$1);\n\t\treturn idx;\n\t}\n\tfunction encodePromise(promise, path) {\n\t\treturn registerAsync(async function* (idx) {\n\t\t\tconst error = checkMaxDepth(path);\n\t\t\tif (error) {\n\t\t\t\tpromise.catch((cause) => {\n\t\t\t\t\topts.onError?.({\n\t\t\t\t\t\terror: cause,\n\t\t\t\t\t\tpath\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tpromise = Promise.reject(error);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst next = await promise;\n\t\t\t\tyield [\n\t\t\t\t\tidx,\n\t\t\t\t\tPROMISE_STATUS_FULFILLED,\n\t\t\t\t\tencode(next, path)\n\t\t\t\t];\n\t\t\t} catch (cause) {\n\t\t\t\topts.onError?.({\n\t\t\t\t\terror: cause,\n\t\t\t\t\tpath\n\t\t\t\t});\n\t\t\t\tyield [\n\t\t\t\t\tidx,\n\t\t\t\t\tPROMISE_STATUS_REJECTED,\n\t\t\t\t\topts.formatError?.({\n\t\t\t\t\t\terror: cause,\n\t\t\t\t\t\tpath\n\t\t\t\t\t})\n\t\t\t\t];\n\t\t\t}\n\t\t});\n\t}\n\tfunction encodeAsyncIterable(iterable$1, path) {\n\t\treturn registerAsync(async function* (idx) {\n\t\t\ttry {\n\t\t\t\tvar _usingCtx$1 = (0, import_usingCtx$1.default)();\n\t\t\t\tconst error = checkMaxDepth(path);\n\t\t\t\tif (error) throw error;\n\t\t\t\tconst iterator = _usingCtx$1.a(iteratorResource(iterable$1));\n\t\t\t\ttry {\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tconst next = await iterator.next();\n\t\t\t\t\t\tif (next.done) {\n\t\t\t\t\t\t\tyield [\n\t\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\tASYNC_ITERABLE_STATUS_RETURN,\n\t\t\t\t\t\t\t\tencode(next.value, path)\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tyield [\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\tASYNC_ITERABLE_STATUS_YIELD,\n\t\t\t\t\t\t\tencode(next.value, path)\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t} catch (cause) {\n\t\t\t\t\topts.onError?.({\n\t\t\t\t\t\terror: cause,\n\t\t\t\t\t\tpath\n\t\t\t\t\t});\n\t\t\t\t\tyield [\n\t\t\t\t\t\tidx,\n\t\t\t\t\t\tASYNC_ITERABLE_STATUS_ERROR,\n\t\t\t\t\t\topts.formatError?.({\n\t\t\t\t\t\t\terror: cause,\n\t\t\t\t\t\t\tpath\n\t\t\t\t\t\t})\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t} catch (_) {\n\t\t\t\t_usingCtx$1.e = _;\n\t\t\t} finally {\n\t\t\t\tawait _usingCtx$1.d();\n\t\t\t}\n\t\t});\n\t}\n\tfunction checkMaxDepth(path) {\n\t\tif (opts.maxDepth && path.length > opts.maxDepth) return new MaxDepthError(path);\n\t\treturn null;\n\t}\n\tfunction encodeAsync(value, path) {\n\t\tif (isPromise(value)) return [CHUNK_VALUE_TYPE_PROMISE, encodePromise(value, path)];\n\t\tif ((0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(value)) {\n\t\t\tif (opts.maxDepth && path.length >= opts.maxDepth) throw new Error(\"Max depth reached\");\n\t\t\treturn [CHUNK_VALUE_TYPE_ASYNC_ITERABLE, encodeAsyncIterable(value, path)];\n\t\t}\n\t\treturn null;\n\t}\n\tfunction encode(value, path) {\n\t\tif (value === void 0) return [[]];\n\t\tconst reg = encodeAsync(value, path);\n\t\tif (reg) return [[placeholder], [null, ...reg]];\n\t\tif (!isPlainObject(value)) return [[value]];\n\t\tconst newObj = {};\n\t\tconst asyncValues = [];\n\t\tfor (const [key, item] of Object.entries(value)) {\n\t\t\tconst transformed = encodeAsync(item, [...path, key]);\n\t\t\tif (!transformed) {\n\t\t\t\tnewObj[key] = item;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnewObj[key] = placeholder;\n\t\t\tasyncValues.push([key, ...transformed]);\n\t\t}\n\t\treturn [[newObj], ...asyncValues];\n\t}\n\tconst newHead = {};\n\tfor (const [key, item] of Object.entries(data)) newHead[key] = encode(item, [key]);\n\tyield newHead;\n\tlet iterable = mergedIterables;\n\tif (opts.pingMs) iterable = withPing(mergedIterables, opts.pingMs);\n\tfor await (const value of iterable) yield value;\n}\n/**\n* JSON Lines stream producer\n* @see https://jsonlines.org/\n*/\nfunction jsonlStreamProducer(opts) {\n\tlet stream = readableStreamFrom(createBatchStreamProducer(opts));\n\tconst { serialize } = opts;\n\tif (serialize) stream = stream.pipeThrough(new TransformStream({ transform(chunk, controller) {\n\t\tif (chunk === PING_SYM) controller.enqueue(PING_SYM);\n\t\telse controller.enqueue(serialize(chunk));\n\t} }));\n\treturn stream.pipeThrough(new TransformStream({ transform(chunk, controller) {\n\t\tif (chunk === PING_SYM) controller.enqueue(\" \");\n\t\telse controller.enqueue(JSON.stringify(chunk) + \"\\n\");\n\t} })).pipeThrough(new TextEncoderStream());\n}\nvar AsyncError = class extends Error {\n\tconstructor(data) {\n\t\tsuper(\"Received error from server\");\n\t\tthis.data = data;\n\t}\n};\nconst nodeJsStreamToReaderEsque = (source) => {\n\treturn { getReader() {\n\t\tconst stream = new ReadableStream({ start(controller) {\n\t\t\tsource.on(\"data\", (chunk) => {\n\t\t\t\tcontroller.enqueue(chunk);\n\t\t\t});\n\t\t\tsource.on(\"end\", () => {\n\t\t\t\tcontroller.close();\n\t\t\t});\n\t\t\tsource.on(\"error\", (error) => {\n\t\t\t\tcontroller.error(error);\n\t\t\t});\n\t\t} });\n\t\treturn stream.getReader();\n\t} };\n};\nfunction createLineAccumulator(from) {\n\tconst reader = \"getReader\" in from ? from.getReader() : nodeJsStreamToReaderEsque(from).getReader();\n\tlet lineAggregate = \"\";\n\treturn new ReadableStream({\n\t\tasync pull(controller) {\n\t\t\tconst { done, value } = await reader.read();\n\t\t\tif (done) controller.close();\n\t\t\telse controller.enqueue(value);\n\t\t},\n\t\tcancel() {\n\t\t\treturn reader.cancel();\n\t\t}\n\t}).pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({ transform(chunk, controller) {\n\t\tlineAggregate += chunk;\n\t\tconst parts = lineAggregate.split(\"\\n\");\n\t\tlineAggregate = parts.pop() ?? \"\";\n\t\tfor (const part of parts) controller.enqueue(part);\n\t} }));\n}\nfunction createConsumerStream(from) {\n\tconst stream = createLineAccumulator(from);\n\tlet sentHead = false;\n\treturn stream.pipeThrough(new TransformStream({ transform(line, controller) {\n\t\tif (!sentHead) {\n\t\t\tconst head = JSON.parse(line);\n\t\t\tcontroller.enqueue(head);\n\t\t\tsentHead = true;\n\t\t} else {\n\t\t\tconst chunk = JSON.parse(line);\n\t\t\tcontroller.enqueue(chunk);\n\t\t}\n\t} }));\n}\n/**\n* Creates a handler for managing stream controllers and their lifecycle\n*/\nfunction createStreamsManager(abortController) {\n\tconst controllerMap = /* @__PURE__ */ new Map();\n\t/**\n\t* Checks if there are no pending controllers or deferred promises\n\t*/\n\tfunction isEmpty() {\n\t\treturn Array.from(controllerMap.values()).every((c) => c.closed);\n\t}\n\t/**\n\t* Creates a stream controller\n\t*/\n\tfunction createStreamController() {\n\t\tlet originalController;\n\t\tconst stream = new ReadableStream({ start(controller) {\n\t\t\toriginalController = controller;\n\t\t} });\n\t\tconst streamController = {\n\t\t\tenqueue: (v) => originalController.enqueue(v),\n\t\t\tclose: () => {\n\t\t\t\toriginalController.close();\n\t\t\t\tclear();\n\t\t\t\tif (isEmpty()) abortController.abort();\n\t\t\t},\n\t\t\tclosed: false,\n\t\t\tgetReaderResource: () => {\n\t\t\t\tconst reader = stream.getReader();\n\t\t\t\treturn makeResource(reader, () => {\n\t\t\t\t\treader.releaseLock();\n\t\t\t\t\tstreamController.close();\n\t\t\t\t});\n\t\t\t},\n\t\t\terror: (reason) => {\n\t\t\t\toriginalController.error(reason);\n\t\t\t\tclear();\n\t\t\t}\n\t\t};\n\t\tfunction clear() {\n\t\t\tObject.assign(streamController, {\n\t\t\t\tclosed: true,\n\t\t\t\tclose: () => {},\n\t\t\t\tenqueue: () => {},\n\t\t\t\tgetReaderResource: null,\n\t\t\t\terror: () => {}\n\t\t\t});\n\t\t}\n\t\treturn streamController;\n\t}\n\t/**\n\t* Gets or creates a stream controller\n\t*/\n\tfunction getOrCreate(chunkId) {\n\t\tlet c = controllerMap.get(chunkId);\n\t\tif (!c) {\n\t\t\tc = createStreamController();\n\t\t\tcontrollerMap.set(chunkId, c);\n\t\t}\n\t\treturn c;\n\t}\n\t/**\n\t* Cancels all pending controllers and rejects deferred promises\n\t*/\n\tfunction cancelAll(reason) {\n\t\tfor (const controller of controllerMap.values()) controller.error(reason);\n\t}\n\treturn {\n\t\tgetOrCreate,\n\t\tisEmpty,\n\t\tcancelAll\n\t};\n}\n/**\n* JSON Lines stream consumer\n* @see https://jsonlines.org/\n*/\nasync function jsonlStreamConsumer(opts) {\n\tconst { deserialize = (v) => v } = opts;\n\tlet source = createConsumerStream(opts.from);\n\tif (deserialize) source = source.pipeThrough(new TransformStream({ transform(chunk, controller) {\n\t\tcontroller.enqueue(deserialize(chunk));\n\t} }));\n\tlet headDeferred = createDeferred();\n\tconst streamManager = createStreamsManager(opts.abortController);\n\tfunction decodeChunkDefinition(value) {\n\t\tconst [_path, type, chunkId] = value;\n\t\tconst controller = streamManager.getOrCreate(chunkId);\n\t\tswitch (type) {\n\t\t\tcase CHUNK_VALUE_TYPE_PROMISE: return (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tvar _usingCtx3 = (0, import_usingCtx$1.default)();\n\t\t\t\t\tconst reader = _usingCtx3.u(controller.getReaderResource());\n\t\t\t\t\tconst { value: value$1 } = await reader.read();\n\t\t\t\t\tconst [_chunkId, status, data] = value$1;\n\t\t\t\t\tswitch (status) {\n\t\t\t\t\t\tcase PROMISE_STATUS_FULFILLED: return decode(data);\n\t\t\t\t\t\tcase PROMISE_STATUS_REJECTED: throw opts.formatError?.({ error: data }) ?? new AsyncError(data);\n\t\t\t\t\t}\n\t\t\t\t} catch (_) {\n\t\t\t\t\t_usingCtx3.e = _;\n\t\t\t\t} finally {\n\t\t\t\t\t_usingCtx3.d();\n\t\t\t\t}\n\t\t\t});\n\t\t\tcase CHUNK_VALUE_TYPE_ASYNC_ITERABLE: return (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async function* () {\n\t\t\t\ttry {\n\t\t\t\t\tvar _usingCtx4 = (0, import_usingCtx$1.default)();\n\t\t\t\t\tconst reader = _usingCtx4.u(controller.getReaderResource());\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tconst { value: value$1 } = await reader.read();\n\t\t\t\t\t\tconst [_chunkId, status, data] = value$1;\n\t\t\t\t\t\tswitch (status) {\n\t\t\t\t\t\t\tcase ASYNC_ITERABLE_STATUS_YIELD:\n\t\t\t\t\t\t\t\tyield decode(data);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase ASYNC_ITERABLE_STATUS_RETURN: return decode(data);\n\t\t\t\t\t\t\tcase ASYNC_ITERABLE_STATUS_ERROR: throw opts.formatError?.({ error: data }) ?? new AsyncError(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (_) {\n\t\t\t\t\t_usingCtx4.e = _;\n\t\t\t\t} finally {\n\t\t\t\t\t_usingCtx4.d();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tfunction decode(value) {\n\t\tconst [[data], ...asyncProps] = value;\n\t\tfor (const value$1 of asyncProps) {\n\t\t\tconst [key] = value$1;\n\t\t\tconst decoded = decodeChunkDefinition(value$1);\n\t\t\tif (key === null) return decoded;\n\t\t\tdata[key] = decoded;\n\t\t}\n\t\treturn data;\n\t}\n\tconst closeOrAbort = (reason) => {\n\t\theadDeferred?.reject(reason);\n\t\tstreamManager.cancelAll(reason);\n\t};\n\tsource.pipeTo(new WritableStream({\n\t\twrite(chunkOrHead) {\n\t\t\tif (headDeferred) {\n\t\t\t\tconst head = chunkOrHead;\n\t\t\t\tfor (const [key, value] of Object.entries(chunkOrHead)) {\n\t\t\t\t\tconst parsed = decode(value);\n\t\t\t\t\thead[key] = parsed;\n\t\t\t\t}\n\t\t\t\theadDeferred.resolve(head);\n\t\t\t\theadDeferred = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst chunk = chunkOrHead;\n\t\t\tconst [idx] = chunk;\n\t\t\tconst controller = streamManager.getOrCreate(idx);\n\t\t\tcontroller.enqueue(chunk);\n\t\t},\n\t\tclose: () => closeOrAbort(new Error(\"Stream closed\")),\n\t\tabort: closeOrAbort\n\t}), { signal: opts.abortController.signal }).catch((error) => {\n\t\topts.onError?.({ error });\n\t\tcloseOrAbort(error);\n\t});\n\treturn [await headDeferred.promise, streamManager];\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/stream/sse.ts\nvar import_usingCtx = __toESM(require_usingCtx(), 1);\nconst PING_EVENT = \"ping\";\nconst SERIALIZED_ERROR_EVENT = \"serialized-error\";\nconst CONNECTED_EVENT = \"connected\";\nconst RETURN_EVENT = \"return\";\n/**\n*\n* @see https://html.spec.whatwg.org/multipage/server-sent-events.html\n*/\nfunction sseStreamProducer(opts) {\n\tconst { serialize = _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.identity } = opts;\n\tconst ping = {\n\t\tenabled: opts.ping?.enabled ?? false,\n\t\tintervalMs: opts.ping?.intervalMs ?? 1e3\n\t};\n\tconst client = opts.client ?? {};\n\tif (ping.enabled && client.reconnectAfterInactivityMs && ping.intervalMs > client.reconnectAfterInactivityMs) throw new Error(`Ping interval must be less than client reconnect interval to prevent unnecessary reconnection - ping.intervalMs: ${ping.intervalMs} client.reconnectAfterInactivityMs: ${client.reconnectAfterInactivityMs}`);\n\tasync function* generator() {\n\t\tyield {\n\t\t\tevent: CONNECTED_EVENT,\n\t\t\tdata: JSON.stringify(client)\n\t\t};\n\t\tlet iterable = opts.data;\n\t\tif (opts.emitAndEndImmediately) iterable = takeWithGrace(iterable, {\n\t\t\tcount: 1,\n\t\t\tgracePeriodMs: 1\n\t\t});\n\t\tif (opts.maxDurationMs && opts.maxDurationMs > 0 && opts.maxDurationMs !== Infinity) iterable = withMaxDuration(iterable, { maxDurationMs: opts.maxDurationMs });\n\t\tif (ping.enabled && ping.intervalMs !== Infinity && ping.intervalMs > 0) iterable = withPing(iterable, ping.intervalMs);\n\t\tlet value;\n\t\tlet chunk;\n\t\tfor await (value of iterable) {\n\t\t\tif (value === PING_SYM) {\n\t\t\t\tyield {\n\t\t\t\t\tevent: PING_EVENT,\n\t\t\t\t\tdata: \"\"\n\t\t\t\t};\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tchunk = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.isTrackedEnvelope)(value) ? {\n\t\t\t\tid: value[0],\n\t\t\t\tdata: value[1]\n\t\t\t} : { data: value };\n\t\t\tchunk.data = JSON.stringify(serialize(chunk.data));\n\t\t\tyield chunk;\n\t\t\tvalue = null;\n\t\t\tchunk = null;\n\t\t}\n\t}\n\tasync function* generatorWithErrorHandling() {\n\t\ttry {\n\t\t\tyield* generator();\n\t\t\tyield {\n\t\t\t\tevent: RETURN_EVENT,\n\t\t\t\tdata: \"\"\n\t\t\t};\n\t\t} catch (cause) {\n\t\t\tif (isAbortError(cause)) return;\n\t\t\tconst error = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n\t\t\tconst data = opts.formatError?.({ error }) ?? null;\n\t\t\tyield {\n\t\t\t\tevent: SERIALIZED_ERROR_EVENT,\n\t\t\t\tdata: JSON.stringify(serialize(data))\n\t\t\t};\n\t\t}\n\t}\n\tconst stream = readableStreamFrom(generatorWithErrorHandling());\n\treturn stream.pipeThrough(new TransformStream({ transform(chunk, controller) {\n\t\tif (\"event\" in chunk) controller.enqueue(`event: ${chunk.event}\\n`);\n\t\tif (\"data\" in chunk) controller.enqueue(`data: ${chunk.data}\\n`);\n\t\tif (\"id\" in chunk) controller.enqueue(`id: ${chunk.id}\\n`);\n\t\tif (\"comment\" in chunk) controller.enqueue(`: ${chunk.comment}\\n`);\n\t\tcontroller.enqueue(\"\\n\\n\");\n\t} })).pipeThrough(new TextEncoderStream());\n}\nasync function withTimeout(opts) {\n\ttry {\n\t\tvar _usingCtx$1 = (0, import_usingCtx.default)();\n\t\tconst timeoutPromise = _usingCtx$1.u(timerResource(opts.timeoutMs));\n\t\tconst res = await Unpromise.race([opts.promise, timeoutPromise.start()]);\n\t\tif (res === disposablePromiseTimerResult) return await opts.onTimeout();\n\t\treturn res;\n\t} catch (_) {\n\t\t_usingCtx$1.e = _;\n\t} finally {\n\t\t_usingCtx$1.d();\n\t}\n}\n/**\n* @see https://html.spec.whatwg.org/multipage/server-sent-events.html\n*/\nfunction sseStreamConsumer(opts) {\n\tconst { deserialize = (v) => v } = opts;\n\tlet clientOptions = {};\n\tconst signal = opts.signal;\n\tlet _es = null;\n\tconst createStream = () => new ReadableStream({\n\t\tasync start(controller) {\n\t\t\tconst [url, init] = await Promise.all([opts.url(), opts.init()]);\n\t\t\tconst eventSource = _es = new opts.EventSource(url, init);\n\t\t\tcontroller.enqueue({\n\t\t\t\ttype: \"connecting\",\n\t\t\t\teventSource: _es,\n\t\t\t\tevent: null\n\t\t\t});\n\t\t\teventSource.addEventListener(CONNECTED_EVENT, (_msg) => {\n\t\t\t\tconst msg = _msg;\n\t\t\t\tconst options = JSON.parse(msg.data);\n\t\t\t\tclientOptions = options;\n\t\t\t\tcontroller.enqueue({\n\t\t\t\t\ttype: \"connected\",\n\t\t\t\t\toptions,\n\t\t\t\t\teventSource\n\t\t\t\t});\n\t\t\t});\n\t\t\teventSource.addEventListener(SERIALIZED_ERROR_EVENT, (_msg) => {\n\t\t\t\tconst msg = _msg;\n\t\t\t\tcontroller.enqueue({\n\t\t\t\t\ttype: \"serialized-error\",\n\t\t\t\t\terror: deserialize(JSON.parse(msg.data)),\n\t\t\t\t\teventSource\n\t\t\t\t});\n\t\t\t});\n\t\t\teventSource.addEventListener(PING_EVENT, () => {\n\t\t\t\tcontroller.enqueue({\n\t\t\t\t\ttype: \"ping\",\n\t\t\t\t\teventSource\n\t\t\t\t});\n\t\t\t});\n\t\t\teventSource.addEventListener(RETURN_EVENT, () => {\n\t\t\t\teventSource.close();\n\t\t\t\tcontroller.close();\n\t\t\t\t_es = null;\n\t\t\t});\n\t\t\teventSource.addEventListener(\"error\", (event) => {\n\t\t\t\tif (eventSource.readyState === eventSource.CLOSED) controller.error(event);\n\t\t\t\telse controller.enqueue({\n\t\t\t\t\ttype: \"connecting\",\n\t\t\t\t\teventSource,\n\t\t\t\t\tevent\n\t\t\t\t});\n\t\t\t});\n\t\t\teventSource.addEventListener(\"message\", (_msg) => {\n\t\t\t\tconst msg = _msg;\n\t\t\t\tconst chunk = deserialize(JSON.parse(msg.data));\n\t\t\t\tconst def = { data: chunk };\n\t\t\t\tif (msg.lastEventId) def.id = msg.lastEventId;\n\t\t\t\tcontroller.enqueue({\n\t\t\t\t\ttype: \"data\",\n\t\t\t\t\tdata: def,\n\t\t\t\t\teventSource\n\t\t\t\t});\n\t\t\t});\n\t\t\tconst onAbort = () => {\n\t\t\t\ttry {\n\t\t\t\t\teventSource.close();\n\t\t\t\t\tcontroller.close();\n\t\t\t\t} catch {}\n\t\t\t};\n\t\t\tif (signal.aborted) onAbort();\n\t\t\telse signal.addEventListener(\"abort\", onAbort);\n\t\t},\n\t\tcancel() {\n\t\t\t_es?.close();\n\t\t}\n\t});\n\tconst getStreamResource = () => {\n\t\tlet stream = createStream();\n\t\tlet reader = stream.getReader();\n\t\tasync function dispose() {\n\t\t\tawait reader.cancel();\n\t\t\t_es = null;\n\t\t}\n\t\treturn makeAsyncResource({\n\t\t\tread() {\n\t\t\t\treturn reader.read();\n\t\t\t},\n\t\t\tasync recreate() {\n\t\t\t\tawait dispose();\n\t\t\t\tstream = createStream();\n\t\t\t\treader = stream.getReader();\n\t\t\t}\n\t\t}, dispose);\n\t};\n\treturn (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async function* () {\n\t\ttry {\n\t\t\tvar _usingCtx3 = (0, import_usingCtx.default)();\n\t\t\tconst stream = _usingCtx3.a(getStreamResource());\n\t\t\twhile (true) {\n\t\t\t\tlet promise = stream.read();\n\t\t\t\tconst timeoutMs = clientOptions.reconnectAfterInactivityMs;\n\t\t\t\tif (timeoutMs) promise = withTimeout({\n\t\t\t\t\tpromise,\n\t\t\t\t\ttimeoutMs,\n\t\t\t\t\tonTimeout: async () => {\n\t\t\t\t\t\tconst res = {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"timeout\",\n\t\t\t\t\t\t\t\tms: timeoutMs,\n\t\t\t\t\t\t\t\teventSource: _es\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdone: false\n\t\t\t\t\t\t};\n\t\t\t\t\t\tawait stream.recreate();\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconst result = await promise;\n\t\t\t\tif (result.done) return result.value;\n\t\t\t\tyield result.value;\n\t\t\t}\n\t\t} catch (_) {\n\t\t\t_usingCtx3.e = _;\n\t\t} finally {\n\t\t\tawait _usingCtx3.d();\n\t\t}\n\t});\n}\nconst sseHeaders = {\n\t\"Content-Type\": \"text/event-stream\",\n\t\"Cache-Control\": \"no-cache, no-transform\",\n\t\"X-Accel-Buffering\": \"no\",\n\tConnection: \"keep-alive\"\n};\n\n//#endregion\n//#region src/unstable-core-do-not-import/http/resolveResponse.ts\nfunction errorToAsyncIterable(err) {\n\treturn (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async function* () {\n\t\tthrow err;\n\t});\n}\nconst TYPE_ACCEPTED_METHOD_MAP = {\n\tmutation: [\"POST\"],\n\tquery: [\"GET\"],\n\tsubscription: [\"GET\"]\n};\nconst TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE = {\n\tmutation: [\"POST\"],\n\tquery: [\"GET\", \"POST\"],\n\tsubscription: [\"GET\", \"POST\"]\n};\nfunction initResponse(initOpts) {\n\tconst { ctx, info, responseMeta, untransformedJSON, errors = [], headers } = initOpts;\n\tlet status = untransformedJSON ? (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getHTTPStatusCode)(untransformedJSON) : 200;\n\tconst eagerGeneration = !untransformedJSON;\n\tconst data = eagerGeneration ? [] : Array.isArray(untransformedJSON) ? untransformedJSON : [untransformedJSON];\n\tconst meta = responseMeta?.({\n\t\tctx,\n\t\tinfo,\n\t\tpaths: info?.calls.map((call) => call.path),\n\t\tdata,\n\t\terrors,\n\t\teagerGeneration,\n\t\ttype: info?.calls.find((call) => call.procedure?._def.type)?.procedure?._def.type ?? \"unknown\"\n\t}) ?? {};\n\tif (meta.headers) {\n\t\tif (meta.headers instanceof Headers) for (const [key, value] of meta.headers.entries()) headers.append(key, value);\n\t\telse\n /**\n\t\t* @deprecated, delete in v12\n\t\t*/\n\t\tfor (const [key, value] of Object.entries(meta.headers)) if (Array.isArray(value)) for (const v of value) headers.append(key, v);\n\t\telse if (typeof value === \"string\") headers.set(key, value);\n\t}\n\tif (meta.status) status = meta.status;\n\treturn { status };\n}\nfunction caughtErrorToData(cause, errorOpts) {\n\tconst { router, req, onError } = errorOpts.opts;\n\tconst error = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n\tonError?.({\n\t\terror,\n\t\tpath: errorOpts.path,\n\t\tinput: errorOpts.input,\n\t\tctx: errorOpts.ctx,\n\t\ttype: errorOpts.type,\n\t\treq\n\t});\n\tconst untransformedJSON = { error: (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n\t\tconfig: router._def._config,\n\t\terror,\n\t\ttype: errorOpts.type,\n\t\tpath: errorOpts.path,\n\t\tinput: errorOpts.input,\n\t\tctx: errorOpts.ctx\n\t}) };\n\tconst transformedJSON = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(router._def._config, untransformedJSON);\n\tconst body = JSON.stringify(transformedJSON);\n\treturn {\n\t\terror,\n\t\tuntransformedJSON,\n\t\tbody\n\t};\n}\n/**\n* Check if a value is a stream-like object\n* - if it's an async iterable\n* - if it's an object with async iterables or promises\n*/\nfunction isDataStream(v) {\n\tif (!(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(v)) return false;\n\tif ((0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(v)) return true;\n\treturn Object.values(v).some(isPromise) || Object.values(v).some(_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable);\n}\nasync function resolveResponse(opts) {\n\tconst { router, req } = opts;\n\tconst headers = new Headers([[\"vary\", \"trpc-accept\"]]);\n\tconst config = router._def._config;\n\tconst url = new URL(req.url);\n\tif (req.method === \"HEAD\") return new Response(null, { status: 204 });\n\tconst allowBatching = opts.allowBatching ?? opts.batching?.enabled ?? true;\n\tconst allowMethodOverride = (opts.allowMethodOverride ?? false) && req.method === \"POST\";\n\tconst infoTuple = await (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async () => {\n\t\ttry {\n\t\t\treturn [void 0, await getRequestInfo({\n\t\t\t\treq,\n\t\t\t\tpath: decodeURIComponent(opts.path),\n\t\t\t\trouter,\n\t\t\t\tsearchParams: url.searchParams,\n\t\t\t\theaders: opts.req.headers,\n\t\t\t\turl\n\t\t\t})];\n\t\t} catch (cause) {\n\t\t\treturn [(0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause), void 0];\n\t\t}\n\t});\n\tconst ctxManager = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(() => {\n\t\tlet result = void 0;\n\t\treturn {\n\t\t\tvalueOrUndefined: () => {\n\t\t\t\tif (!result) return void 0;\n\t\t\t\treturn result[1];\n\t\t\t},\n\t\t\tvalue: () => {\n\t\t\t\tconst [err, ctx] = result;\n\t\t\t\tif (err) throw err;\n\t\t\t\treturn ctx;\n\t\t\t},\n\t\t\tcreate: async (info) => {\n\t\t\t\tif (result) throw new Error(\"This should only be called once - report a bug in tRPC\");\n\t\t\t\ttry {\n\t\t\t\t\tconst ctx = await opts.createContext({ info });\n\t\t\t\t\tresult = [void 0, ctx];\n\t\t\t\t} catch (cause) {\n\t\t\t\t\tresult = [(0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause), void 0];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t});\n\tconst methodMapper = allowMethodOverride ? TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE : TYPE_ACCEPTED_METHOD_MAP;\n\t/**\n\t* @deprecated\n\t*/\n\tconst isStreamCall = req.headers.get(\"trpc-accept\") === \"application/jsonl\";\n\tconst experimentalSSE = config.sse?.enabled ?? true;\n\ttry {\n\t\tconst [infoError, info] = infoTuple;\n\t\tif (infoError) throw infoError;\n\t\tif (info.isBatchCall && !allowBatching) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\tcode: \"BAD_REQUEST\",\n\t\t\tmessage: `Batching is not enabled on the server`\n\t\t});\n\t\t/* istanbul ignore if -- @preserve */\n\t\tif (isStreamCall && !info.isBatchCall) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\tmessage: `Streaming requests must be batched (you can do a batch of 1)`,\n\t\t\tcode: \"BAD_REQUEST\"\n\t\t});\n\t\tawait ctxManager.create(info);\n\t\tconst rpcCalls = info.calls.map(async (call) => {\n\t\t\tconst proc = call.procedure;\n\t\t\ttry {\n\t\t\t\tif (opts.error) throw opts.error;\n\t\t\t\tif (!proc) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\t\t\tcode: \"NOT_FOUND\",\n\t\t\t\t\tmessage: `No procedure found on path \"${call.path}\"`\n\t\t\t\t});\n\t\t\t\tif (!methodMapper[proc._def.type].includes(req.method)) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\t\t\tcode: \"METHOD_NOT_SUPPORTED\",\n\t\t\t\t\tmessage: `Unsupported ${req.method}-request to ${proc._def.type} procedure at path \"${call.path}\"`\n\t\t\t\t});\n\t\t\t\tif (proc._def.type === \"subscription\") {\n\t\t\t\t\t/* istanbul ignore if -- @preserve */\n\t\t\t\t\tif (info.isBatchCall) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\t\t\t\tcode: \"BAD_REQUEST\",\n\t\t\t\t\t\tmessage: `Cannot batch subscription calls`\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconst data = await proc({\n\t\t\t\t\tpath: call.path,\n\t\t\t\t\tgetRawInput: call.getRawInput,\n\t\t\t\t\tctx: ctxManager.value(),\n\t\t\t\t\ttype: proc._def.type,\n\t\t\t\t\tsignal: opts.req.signal\n\t\t\t\t});\n\t\t\t\treturn [void 0, { data }];\n\t\t\t} catch (cause) {\n\t\t\t\tconst error = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n\t\t\t\tconst input = call.result();\n\t\t\t\topts.onError?.({\n\t\t\t\t\terror,\n\t\t\t\t\tpath: call.path,\n\t\t\t\t\tinput,\n\t\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\t\ttype: call.procedure?._def.type ?? \"unknown\",\n\t\t\t\t\treq: opts.req\n\t\t\t\t});\n\t\t\t\treturn [error, void 0];\n\t\t\t}\n\t\t});\n\t\tif (!info.isBatchCall) {\n\t\t\tconst [call] = info.calls;\n\t\t\tconst [error, result] = await rpcCalls[0];\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"unknown\":\n\t\t\t\tcase \"mutation\":\n\t\t\t\tcase \"query\": {\n\t\t\t\t\theaders.set(\"content-type\", \"application/json\");\n\t\t\t\t\tif (isDataStream(result?.data)) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\t\t\t\tcode: \"UNSUPPORTED_MEDIA_TYPE\",\n\t\t\t\t\t\tmessage: \"Cannot use stream-like response in non-streaming request - use httpBatchStreamLink\"\n\t\t\t\t\t});\n\t\t\t\t\tconst res = error ? { error: (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tinput: call.result(),\n\t\t\t\t\t\tpath: call.path,\n\t\t\t\t\t\ttype: info.type\n\t\t\t\t\t}) } : { result: { data: result.data } };\n\t\t\t\t\tconst headResponse$1 = initResponse({\n\t\t\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\tresponseMeta: opts.responseMeta,\n\t\t\t\t\t\terrors: error ? [error] : [],\n\t\t\t\t\t\theaders,\n\t\t\t\t\t\tuntransformedJSON: [res]\n\t\t\t\t\t});\n\t\t\t\t\treturn new Response(JSON.stringify((0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(config, res)), {\n\t\t\t\t\t\tstatus: headResponse$1.status,\n\t\t\t\t\t\theaders\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcase \"subscription\": {\n\t\t\t\t\tconst iterable = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(() => {\n\t\t\t\t\t\tif (error) return errorToAsyncIterable(error);\n\t\t\t\t\t\tif (!experimentalSSE) return errorToAsyncIterable(new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\t\t\t\t\tcode: \"METHOD_NOT_SUPPORTED\",\n\t\t\t\t\t\t\tmessage: \"Missing experimental flag \\\"sseSubscriptions\\\"\"\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tif (!(0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) && !(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(result.data)) return errorToAsyncIterable(new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\t\t\t\t\tmessage: `Subscription ${call.path} did not return an observable or a AsyncGenerator`,\n\t\t\t\t\t\t\tcode: \"INTERNAL_SERVER_ERROR\"\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tconst dataAsIterable = (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) ? (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__.observableToAsyncIterable)(result.data, opts.req.signal) : result.data;\n\t\t\t\t\t\treturn dataAsIterable;\n\t\t\t\t\t});\n\t\t\t\t\tconst stream = sseStreamProducer({\n\t\t\t\t\t\t...config.sse,\n\t\t\t\t\t\tdata: iterable,\n\t\t\t\t\t\tserialize: (v) => config.transformer.output.serialize(v),\n\t\t\t\t\t\tformatError(errorOpts) {\n\t\t\t\t\t\t\tconst error$1 = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(errorOpts.error);\n\t\t\t\t\t\t\tconst input = call?.result();\n\t\t\t\t\t\t\tconst path = call?.path;\n\t\t\t\t\t\t\tconst type = call?.procedure?._def.type ?? \"unknown\";\n\t\t\t\t\t\t\topts.onError?.({\n\t\t\t\t\t\t\t\terror: error$1,\n\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\tinput,\n\t\t\t\t\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\t\t\t\t\treq: opts.req,\n\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconst shape = (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\t\t\t\t\terror: error$1,\n\t\t\t\t\t\t\t\tinput,\n\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn shape;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tfor (const [key, value] of Object.entries(sseHeaders)) headers.set(key, value);\n\t\t\t\t\tconst headResponse$1 = initResponse({\n\t\t\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\tresponseMeta: opts.responseMeta,\n\t\t\t\t\t\terrors: [],\n\t\t\t\t\t\theaders,\n\t\t\t\t\t\tuntransformedJSON: null\n\t\t\t\t\t});\n\t\t\t\t\treturn new Response(stream, {\n\t\t\t\t\t\theaders,\n\t\t\t\t\t\tstatus: headResponse$1.status\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (info.accept === \"application/jsonl\") {\n\t\t\theaders.set(\"content-type\", \"application/json\");\n\t\t\theaders.set(\"transfer-encoding\", \"chunked\");\n\t\t\tconst headResponse$1 = initResponse({\n\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\tinfo,\n\t\t\t\tresponseMeta: opts.responseMeta,\n\t\t\t\terrors: [],\n\t\t\t\theaders,\n\t\t\t\tuntransformedJSON: null\n\t\t\t});\n\t\t\tconst stream = jsonlStreamProducer({\n\t\t\t\t...config.jsonl,\n\t\t\t\tmaxDepth: Infinity,\n\t\t\t\tdata: rpcCalls.map(async (res) => {\n\t\t\t\t\tconst [error, result] = await res;\n\t\t\t\t\tconst call = info.calls[0];\n\t\t\t\t\tif (error) return { error: (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tinput: call.result(),\n\t\t\t\t\t\tpath: call.path,\n\t\t\t\t\t\ttype: call.procedure?._def.type ?? \"unknown\"\n\t\t\t\t\t}) };\n\t\t\t\t\t/**\n\t\t\t\t\t* Not very pretty, but we need to wrap nested data in promises\n\t\t\t\t\t* Our stream producer will only resolve top-level async values or async values that are directly nested in another async value\n\t\t\t\t\t*/\n\t\t\t\t\tconst iterable = (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) ? (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__.observableToAsyncIterable)(result.data, opts.req.signal) : Promise.resolve(result.data);\n\t\t\t\t\treturn { result: Promise.resolve({ data: iterable }) };\n\t\t\t\t}),\n\t\t\t\tserialize: config.transformer.output.serialize,\n\t\t\t\tonError: (cause) => {\n\t\t\t\t\topts.onError?.({\n\t\t\t\t\t\terror: (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n\t\t\t\t\t\tpath: void 0,\n\t\t\t\t\t\tinput: void 0,\n\t\t\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\t\t\treq: opts.req,\n\t\t\t\t\t\ttype: info?.type ?? \"unknown\"\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tformatError(errorOpts) {\n\t\t\t\t\tconst call = info?.calls[errorOpts.path[0]];\n\t\t\t\t\tconst error = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(errorOpts.error);\n\t\t\t\t\tconst input = call?.result();\n\t\t\t\t\tconst path = call?.path;\n\t\t\t\t\tconst type = call?.procedure?._def.type ?? \"unknown\";\n\t\t\t\t\tconst shape = (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\ttype\n\t\t\t\t\t});\n\t\t\t\t\treturn shape;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn new Response(stream, {\n\t\t\t\theaders,\n\t\t\t\tstatus: headResponse$1.status\n\t\t\t});\n\t\t}\n\t\t/**\n\t\t* Non-streaming response:\n\t\t* - await all responses in parallel, blocking on the slowest one\n\t\t* - create headers with known response body\n\t\t* - return a complete HTTPResponse\n\t\t*/\n\t\theaders.set(\"content-type\", \"application/json\");\n\t\tconst results = (await Promise.all(rpcCalls)).map((res) => {\n\t\t\tconst [error, result] = res;\n\t\t\tif (error) return res;\n\t\t\tif (isDataStream(result.data)) return [new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n\t\t\t\tcode: \"UNSUPPORTED_MEDIA_TYPE\",\n\t\t\t\tmessage: \"Cannot use stream-like response in non-streaming request - use httpBatchStreamLink\"\n\t\t\t}), void 0];\n\t\t\treturn res;\n\t\t});\n\t\tconst resultAsRPCResponse = results.map(([error, result], index) => {\n\t\t\tconst call = info.calls[index];\n\t\t\tif (error) return { error: (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n\t\t\t\tconfig,\n\t\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\t\terror,\n\t\t\t\tinput: call.result(),\n\t\t\t\tpath: call.path,\n\t\t\t\ttype: call.procedure?._def.type ?? \"unknown\"\n\t\t\t}) };\n\t\t\treturn { result: { data: result.data } };\n\t\t});\n\t\tconst errors = results.map(([error]) => error).filter(Boolean);\n\t\tconst headResponse = initResponse({\n\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\tinfo,\n\t\t\tresponseMeta: opts.responseMeta,\n\t\t\tuntransformedJSON: resultAsRPCResponse,\n\t\t\terrors,\n\t\t\theaders\n\t\t});\n\t\treturn new Response(JSON.stringify((0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(config, resultAsRPCResponse)), {\n\t\t\tstatus: headResponse.status,\n\t\t\theaders\n\t\t});\n\t} catch (cause) {\n\t\tconst [_infoError, info] = infoTuple;\n\t\tconst ctx = ctxManager.valueOrUndefined();\n\t\tconst { error, untransformedJSON, body } = caughtErrorToData(cause, {\n\t\t\topts,\n\t\t\tctx: ctxManager.valueOrUndefined(),\n\t\t\ttype: info?.type ?? \"unknown\"\n\t\t});\n\t\tconst headResponse = initResponse({\n\t\t\tctx,\n\t\t\tinfo,\n\t\t\tresponseMeta: opts.responseMeta,\n\t\t\tuntransformedJSON,\n\t\t\terrors: [error],\n\t\t\theaders\n\t\t});\n\t\treturn new Response(body, {\n\t\t\tstatus: headResponse.status,\n\t\t\theaders\n\t\t});\n\t}\n}\n\n//#endregion\n\n//# sourceMappingURL=resolveResponse-DPbYgJDD.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-DPbYgJDD.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-GEWPoL0C.mjs":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-GEWPoL0C.mjs ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCError: () => (/* binding */ TRPCError),\n/* harmony export */   callProcedure: () => (/* binding */ callProcedure),\n/* harmony export */   createCallerFactory: () => (/* binding */ createCallerFactory),\n/* harmony export */   createRouterFactory: () => (/* binding */ createRouterFactory),\n/* harmony export */   defaultFormatter: () => (/* binding */ defaultFormatter),\n/* harmony export */   defaultTransformer: () => (/* binding */ defaultTransformer),\n/* harmony export */   getCauseFromUnknown: () => (/* binding */ getCauseFromUnknown),\n/* harmony export */   getDataTransformer: () => (/* binding */ getDataTransformer),\n/* harmony export */   getProcedureAtPath: () => (/* binding */ getProcedureAtPath),\n/* harmony export */   getTRPCErrorFromUnknown: () => (/* binding */ getTRPCErrorFromUnknown),\n/* harmony export */   isTrackedEnvelope: () => (/* binding */ isTrackedEnvelope),\n/* harmony export */   lazy: () => (/* binding */ lazy),\n/* harmony export */   mergeRouters: () => (/* binding */ mergeRouters),\n/* harmony export */   sse: () => (/* binding */ sse),\n/* harmony export */   tracked: () => (/* binding */ tracked),\n/* harmony export */   transformResult: () => (/* binding */ transformResult),\n/* harmony export */   transformTRPCResponse: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getErrorShape-DyYil4aT.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-DyYil4aT.mjs\");\n/* harmony import */ var _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-BHZJcBRv.mjs */ \"(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs\");\n\n\n\n//#region src/unstable-core-do-not-import/error/formatter.ts\nconst defaultFormatter = ({ shape }) => {\n\treturn shape;\n};\n\n//#endregion\n//#region src/unstable-core-do-not-import/error/TRPCError.ts\nvar UnknownCauseError = class extends Error {};\nfunction getCauseFromUnknown(cause) {\n\tif (cause instanceof Error) return cause;\n\tconst type = typeof cause;\n\tif (type === \"undefined\" || type === \"function\" || cause === null) return void 0;\n\tif (type !== \"object\") return new Error(String(cause));\n\tif ((0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(cause)) return Object.assign(new UnknownCauseError(), cause);\n\treturn void 0;\n}\nfunction getTRPCErrorFromUnknown(cause) {\n\tif (cause instanceof TRPCError) return cause;\n\tif (cause instanceof Error && cause.name === \"TRPCError\") return cause;\n\tconst trpcError = new TRPCError({\n\t\tcode: \"INTERNAL_SERVER_ERROR\",\n\t\tcause\n\t});\n\tif (cause instanceof Error && cause.stack) trpcError.stack = cause.stack;\n\treturn trpcError;\n}\nvar TRPCError = class extends Error {\n\tcause;\n\tcode;\n\tconstructor(opts) {\n\t\tconst cause = getCauseFromUnknown(opts.cause);\n\t\tconst message = opts.message ?? cause?.message ?? opts.code;\n\t\tsuper(message, { cause });\n\t\tthis.code = opts.code;\n\t\tthis.name = \"TRPCError\";\n\t\tthis.cause ??= cause;\n\t}\n};\n\n//#endregion\n//#region src/unstable-core-do-not-import/transformer.ts\n/**\n* @internal\n*/\nfunction getDataTransformer(transformer) {\n\tif (\"input\" in transformer) return transformer;\n\treturn {\n\t\tinput: transformer,\n\t\toutput: transformer\n\t};\n}\n/**\n* @internal\n*/\nconst defaultTransformer = {\n\tinput: {\n\t\tserialize: (obj) => obj,\n\t\tdeserialize: (obj) => obj\n\t},\n\toutput: {\n\t\tserialize: (obj) => obj,\n\t\tdeserialize: (obj) => obj\n\t}\n};\nfunction transformTRPCResponseItem(config, item) {\n\tif (\"error\" in item) return {\n\t\t...item,\n\t\terror: config.transformer.output.serialize(item.error)\n\t};\n\tif (\"data\" in item.result) return {\n\t\t...item,\n\t\tresult: {\n\t\t\t...item.result,\n\t\t\tdata: config.transformer.output.serialize(item.result.data)\n\t\t}\n\t};\n\treturn item;\n}\n/**\n* Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n**/\nfunction transformTRPCResponse(config, itemOrItems) {\n\treturn Array.isArray(itemOrItems) ? itemOrItems.map((item) => transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n/** @internal */\nfunction transformResultInner(response, transformer) {\n\tif (\"error\" in response) {\n\t\tconst error = transformer.deserialize(response.error);\n\t\treturn {\n\t\t\tok: false,\n\t\t\terror: {\n\t\t\t\t...response,\n\t\t\t\terror\n\t\t\t}\n\t\t};\n\t}\n\tconst result = {\n\t\t...response.result,\n\t\t...(!response.result.type || response.result.type === \"data\") && {\n\t\t\ttype: \"data\",\n\t\t\tdata: transformer.deserialize(response.result.data)\n\t\t}\n\t};\n\treturn {\n\t\tok: true,\n\t\tresult\n\t};\n}\nvar TransformResultError = class extends Error {\n\tconstructor() {\n\t\tsuper(\"Unable to transform response from server\");\n\t}\n};\n/**\n* Transforms and validates that the result is a valid TRPCResponse\n* @internal\n*/\nfunction transformResult(response, transformer) {\n\tlet result;\n\ttry {\n\t\tresult = transformResultInner(response, transformer);\n\t} catch {\n\t\tthrow new TransformResultError();\n\t}\n\tif (!result.ok && (!(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(result.error.error) || typeof result.error.error[\"code\"] !== \"number\")) throw new TransformResultError();\n\tif (result.ok && !(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(result.result)) throw new TransformResultError();\n\treturn result;\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/router.ts\nconst lazySymbol = Symbol(\"lazy\");\nfunction once(fn) {\n\tconst uncalled = Symbol();\n\tlet result = uncalled;\n\treturn () => {\n\t\tif (result === uncalled) result = fn();\n\t\treturn result;\n\t};\n}\n/**\n* Lazy load a router\n* @see https://trpc.io/docs/server/merging-routers#lazy-load\n*/\nfunction lazy(importRouter) {\n\tasync function resolve() {\n\t\tconst mod = await importRouter();\n\t\tif (isRouter(mod)) return mod;\n\t\tconst routers = Object.values(mod);\n\t\tif (routers.length !== 1 || !isRouter(routers[0])) throw new Error(\"Invalid router module - either define exactly 1 export or return the router directly.\\nExample: `lazy(() => import('./slow.js').then((m) => m.slowRouter))`\");\n\t\treturn routers[0];\n\t}\n\tresolve[lazySymbol] = true;\n\treturn resolve;\n}\nfunction isLazy(input) {\n\treturn typeof input === \"function\" && lazySymbol in input;\n}\nfunction isRouter(value) {\n\treturn (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(value[\"_def\"]) && \"router\" in value[\"_def\"];\n}\nconst emptyRouter = {\n\t_ctx: null,\n\t_errorShape: null,\n\t_meta: null,\n\tqueries: {},\n\tmutations: {},\n\tsubscriptions: {},\n\terrorFormatter: defaultFormatter,\n\ttransformer: defaultTransformer\n};\n/**\n* Reserved words that can't be used as router or procedure names\n*/\nconst reservedWords = [\n\t\"then\",\n\t\"call\",\n\t\"apply\"\n];\n/**\n* @internal\n*/\nfunction createRouterFactory(config) {\n\tfunction createRouterInner(input) {\n\t\tconst reservedWordsUsed = new Set(Object.keys(input).filter((v) => reservedWords.includes(v)));\n\t\tif (reservedWordsUsed.size > 0) throw new Error(\"Reserved words used in `router({})` call: \" + Array.from(reservedWordsUsed).join(\", \"));\n\t\tconst procedures = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.omitPrototype)({});\n\t\tconst lazy$1 = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.omitPrototype)({});\n\t\tfunction createLazyLoader(opts) {\n\t\t\treturn {\n\t\t\t\tref: opts.ref,\n\t\t\t\tload: once(async () => {\n\t\t\t\t\tconst router$1 = await opts.ref();\n\t\t\t\t\tconst lazyPath = [...opts.path, opts.key];\n\t\t\t\t\tconst lazyKey = lazyPath.join(\".\");\n\t\t\t\t\topts.aggregate[opts.key] = step(router$1._def.record, lazyPath);\n\t\t\t\t\tdelete lazy$1[lazyKey];\n\t\t\t\t\tfor (const [nestedKey, nestedItem] of Object.entries(router$1._def.lazy)) {\n\t\t\t\t\t\tconst nestedRouterKey = [...lazyPath, nestedKey].join(\".\");\n\t\t\t\t\t\tlazy$1[nestedRouterKey] = createLazyLoader({\n\t\t\t\t\t\t\tref: nestedItem.ref,\n\t\t\t\t\t\t\tpath: lazyPath,\n\t\t\t\t\t\t\tkey: nestedKey,\n\t\t\t\t\t\t\taggregate: opts.aggregate[opts.key]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t};\n\t\t}\n\t\tfunction step(from, path = []) {\n\t\t\tconst aggregate = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.omitPrototype)({});\n\t\t\tfor (const [key, item] of Object.entries(from ?? {})) {\n\t\t\t\tif (isLazy(item)) {\n\t\t\t\t\tlazy$1[[...path, key].join(\".\")] = createLazyLoader({\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tref: item,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\taggregate\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (isRouter(item)) {\n\t\t\t\t\taggregate[key] = step(item._def.record, [...path, key]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!isProcedure(item)) {\n\t\t\t\t\taggregate[key] = step(item, [...path, key]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst newPath = [...path, key].join(\".\");\n\t\t\t\tif (procedures[newPath]) throw new Error(`Duplicate key: ${newPath}`);\n\t\t\t\tprocedures[newPath] = item;\n\t\t\t\taggregate[key] = item;\n\t\t\t}\n\t\t\treturn aggregate;\n\t\t}\n\t\tconst record = step(input);\n\t\tconst _def = {\n\t\t\t_config: config,\n\t\t\trouter: true,\n\t\t\tprocedures,\n\t\t\tlazy: lazy$1,\n\t\t\t...emptyRouter,\n\t\t\trecord\n\t\t};\n\t\tconst router = {\n\t\t\t...record,\n\t\t\t_def,\n\t\t\tcreateCaller: createCallerFactory()({ _def })\n\t\t};\n\t\treturn router;\n\t}\n\treturn createRouterInner;\n}\nfunction isProcedure(procedureOrRouter) {\n\treturn typeof procedureOrRouter === \"function\";\n}\n/**\n* @internal\n*/\nasync function getProcedureAtPath(router, path) {\n\tconst { _def } = router;\n\tlet procedure = _def.procedures[path];\n\twhile (!procedure) {\n\t\tconst key = Object.keys(_def.lazy).find((key$1) => path.startsWith(key$1));\n\t\tif (!key) return null;\n\t\tconst lazyRouter = _def.lazy[key];\n\t\tawait lazyRouter.load();\n\t\tprocedure = _def.procedures[path];\n\t}\n\treturn procedure;\n}\n/**\n* @internal\n*/\nasync function callProcedure(opts) {\n\tconst { type, path } = opts;\n\tconst proc = await getProcedureAtPath(opts.router, path);\n\tif (!proc || !isProcedure(proc) || proc._def.type !== type && !opts.allowMethodOverride) throw new TRPCError({\n\t\tcode: \"NOT_FOUND\",\n\t\tmessage: `No \"${type}\"-procedure on path \"${path}\"`\n\t});\n\t/* istanbul ignore if -- @preserve */\n\tif (proc._def.type !== type && opts.allowMethodOverride && proc._def.type === \"subscription\") throw new TRPCError({\n\t\tcode: \"METHOD_NOT_SUPPORTED\",\n\t\tmessage: `Method override is not supported for subscriptions`\n\t});\n\treturn proc(opts);\n}\nfunction createCallerFactory() {\n\treturn function createCallerInner(router) {\n\t\tconst { _def } = router;\n\t\treturn function createCaller(ctxOrCallback, opts) {\n\t\t\treturn (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_1__.createRecursiveProxy)(async ({ path, args }) => {\n\t\t\t\tconst fullPath = path.join(\".\");\n\t\t\t\tif (path.length === 1 && path[0] === \"_def\") return _def;\n\t\t\t\tconst procedure = await getProcedureAtPath(router, fullPath);\n\t\t\t\tlet ctx = void 0;\n\t\t\t\ttry {\n\t\t\t\t\tif (!procedure) throw new TRPCError({\n\t\t\t\t\t\tcode: \"NOT_FOUND\",\n\t\t\t\t\t\tmessage: `No procedure found on path \"${path}\"`\n\t\t\t\t\t});\n\t\t\t\t\tctx = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(ctxOrCallback) ? await Promise.resolve(ctxOrCallback()) : ctxOrCallback;\n\t\t\t\t\treturn await procedure({\n\t\t\t\t\t\tpath: fullPath,\n\t\t\t\t\t\tgetRawInput: async () => args[0],\n\t\t\t\t\t\tctx,\n\t\t\t\t\t\ttype: procedure._def.type,\n\t\t\t\t\t\tsignal: opts?.signal\n\t\t\t\t\t});\n\t\t\t\t} catch (cause) {\n\t\t\t\t\topts?.onError?.({\n\t\t\t\t\t\tctx,\n\t\t\t\t\t\terror: getTRPCErrorFromUnknown(cause),\n\t\t\t\t\t\tinput: args[0],\n\t\t\t\t\t\tpath: fullPath,\n\t\t\t\t\t\ttype: procedure?._def.type ?? \"unknown\"\n\t\t\t\t\t});\n\t\t\t\t\tthrow cause;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t};\n}\nfunction mergeRouters(...routerList) {\n\tconst record = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.mergeWithoutOverrides)({}, ...routerList.map((r) => r._def.record));\n\tconst errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter) => {\n\t\tif (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== defaultFormatter) {\n\t\t\tif (currentErrorFormatter !== defaultFormatter && currentErrorFormatter !== nextRouter._def._config.errorFormatter) throw new Error(\"You seem to have several error formatters\");\n\t\t\treturn nextRouter._def._config.errorFormatter;\n\t\t}\n\t\treturn currentErrorFormatter;\n\t}, defaultFormatter);\n\tconst transformer = routerList.reduce((prev, current) => {\n\t\tif (current._def._config.transformer && current._def._config.transformer !== defaultTransformer) {\n\t\t\tif (prev !== defaultTransformer && prev !== current._def._config.transformer) throw new Error(\"You seem to have several transformers\");\n\t\t\treturn current._def._config.transformer;\n\t\t}\n\t\treturn prev;\n\t}, defaultTransformer);\n\tconst router = createRouterFactory({\n\t\terrorFormatter,\n\t\ttransformer,\n\t\tisDev: routerList.every((r) => r._def._config.isDev),\n\t\tallowOutsideOfServer: routerList.every((r) => r._def._config.allowOutsideOfServer),\n\t\tisServer: routerList.every((r) => r._def._config.isServer),\n\t\t$types: routerList[0]?._def._config.$types\n\t})(record);\n\treturn router;\n}\n\n//#endregion\n//#region src/unstable-core-do-not-import/stream/tracked.ts\nconst trackedSymbol = Symbol();\n/**\n* Produce a typed server-sent event message\n* @deprecated use `tracked(id, data)` instead\n*/\nfunction sse(event) {\n\treturn tracked(event.id, event.data);\n}\nfunction isTrackedEnvelope(value) {\n\treturn Array.isArray(value) && value[2] === trackedSymbol;\n}\n/**\n* Automatically track an event so that it can be resumed from a given id if the connection is lost\n*/\nfunction tracked(id, data) {\n\tif (id === \"\") throw new Error(\"`id` must not be an empty string as empty string is the same as not setting the id at all\");\n\treturn [\n\t\tid,\n\t\tdata,\n\t\ttrackedSymbol\n\t];\n}\n\n//#endregion\n\n//# sourceMappingURL=tracked-GEWPoL0C.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-GEWPoL0C.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPC_ERROR_CODES_BY_KEY: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   TRPC_ERROR_CODES_BY_NUMBER: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   abortSignalsAnyPonyfill: () => (/* binding */ abortSignalsAnyPonyfill),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   mergeWithoutOverrides: () => (/* binding */ mergeWithoutOverrides),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   omitPrototype: () => (/* binding */ omitPrototype),\n/* harmony export */   retryableRpcCodes: () => (/* binding */ retryableRpcCodes),\n/* harmony export */   run: () => (/* binding */ run),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n//#region src/unstable-core-do-not-import/rpc/codes.ts\n/**\n* JSON-RPC 2.0 Error codes\n*\n* `-32000` to `-32099` are reserved for implementation-defined server-errors.\n* For tRPC we're copying the last digits of HTTP 4XX errors.\n*/\nconst TRPC_ERROR_CODES_BY_KEY = {\n\tPARSE_ERROR: -32700,\n\tBAD_REQUEST: -32600,\n\tINTERNAL_SERVER_ERROR: -32603,\n\tNOT_IMPLEMENTED: -32603,\n\tBAD_GATEWAY: -32603,\n\tSERVICE_UNAVAILABLE: -32603,\n\tGATEWAY_TIMEOUT: -32603,\n\tUNAUTHORIZED: -32001,\n\tPAYMENT_REQUIRED: -32002,\n\tFORBIDDEN: -32003,\n\tNOT_FOUND: -32004,\n\tMETHOD_NOT_SUPPORTED: -32005,\n\tTIMEOUT: -32008,\n\tCONFLICT: -32009,\n\tPRECONDITION_FAILED: -32012,\n\tPAYLOAD_TOO_LARGE: -32013,\n\tUNSUPPORTED_MEDIA_TYPE: -32015,\n\tUNPROCESSABLE_CONTENT: -32022,\n\tTOO_MANY_REQUESTS: -32029,\n\tCLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = {\n\t[-32700]: \"PARSE_ERROR\",\n\t[-32600]: \"BAD_REQUEST\",\n\t[-32603]: \"INTERNAL_SERVER_ERROR\",\n\t[-32001]: \"UNAUTHORIZED\",\n\t[-32002]: \"PAYMENT_REQUIRED\",\n\t[-32003]: \"FORBIDDEN\",\n\t[-32004]: \"NOT_FOUND\",\n\t[-32005]: \"METHOD_NOT_SUPPORTED\",\n\t[-32008]: \"TIMEOUT\",\n\t[-32009]: \"CONFLICT\",\n\t[-32012]: \"PRECONDITION_FAILED\",\n\t[-32013]: \"PAYLOAD_TOO_LARGE\",\n\t[-32015]: \"UNSUPPORTED_MEDIA_TYPE\",\n\t[-32022]: \"UNPROCESSABLE_CONTENT\",\n\t[-32029]: \"TOO_MANY_REQUESTS\",\n\t[-32099]: \"CLIENT_CLOSED_REQUEST\"\n};\n/**\n* tRPC error codes that are considered retryable\n* With out of the box SSE, the client will reconnect when these errors are encountered\n*/\nconst retryableRpcCodes = [\n\tTRPC_ERROR_CODES_BY_KEY.BAD_GATEWAY,\n\tTRPC_ERROR_CODES_BY_KEY.SERVICE_UNAVAILABLE,\n\tTRPC_ERROR_CODES_BY_KEY.GATEWAY_TIMEOUT,\n\tTRPC_ERROR_CODES_BY_KEY.INTERNAL_SERVER_ERROR\n];\n\n//#endregion\n//#region src/unstable-core-do-not-import/utils.ts\n/**\n* Ensures there are no duplicate keys when building a procedure.\n* @internal\n*/\nfunction mergeWithoutOverrides(obj1, ...objs) {\n\tconst newObj = Object.assign(Object.create(null), obj1);\n\tfor (const overrides of objs) for (const key in overrides) {\n\t\tif (key in newObj && newObj[key] !== overrides[key]) throw new Error(`Duplicate key ${key}`);\n\t\tnewObj[key] = overrides[key];\n\t}\n\treturn newObj;\n}\n/**\n* Check that value is object\n* @internal\n*/\nfunction isObject(value) {\n\treturn !!value && !Array.isArray(value) && typeof value === \"object\";\n}\nfunction isFunction(fn) {\n\treturn typeof fn === \"function\";\n}\n/**\n* Create an object without inheriting anything from `Object.prototype`\n* @internal\n*/\nfunction omitPrototype(obj) {\n\treturn Object.assign(Object.create(null), obj);\n}\nconst asyncIteratorsSupported = typeof Symbol === \"function\" && !!Symbol.asyncIterator;\nfunction isAsyncIterable(value) {\n\treturn asyncIteratorsSupported && isObject(value) && Symbol.asyncIterator in value;\n}\n/**\n* Run an IIFE\n*/\nconst run = (fn) => fn();\nfunction noop() {}\nfunction identity(it) {\n\treturn it;\n}\n/**\n* Generic runtime assertion function. Throws, if the condition is not `true`.\n*\n* Can be used as a slightly less dangerous variant of type assertions. Code\n* mistakes would be revealed at runtime then (hopefully during testing).\n*/\nfunction assert(condition, msg = \"no additional info\") {\n\tif (!condition) throw new Error(`AssertionError: ${msg}`);\n}\nfunction sleep(ms = 0) {\n\treturn new Promise((res) => setTimeout(res, ms));\n}\n/**\n* Ponyfill for\n* [`AbortSignal.any`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static).\n*/\nfunction abortSignalsAnyPonyfill(signals) {\n\tif (typeof AbortSignal.any === \"function\") return AbortSignal.any(signals);\n\tconst ac = new AbortController();\n\tfor (const signal of signals) {\n\t\tif (signal.aborted) {\n\t\t\ttrigger();\n\t\t\tbreak;\n\t\t}\n\t\tsignal.addEventListener(\"abort\", trigger, { once: true });\n\t}\n\treturn ac.signal;\n\tfunction trigger() {\n\t\tac.abort();\n\t\tfor (const signal of signals) signal.removeEventListener(\"abort\", trigger);\n\t}\n}\n\n//#endregion\n\n//# sourceMappingURL=utils-BHZJcBRv.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDExLjQuMV90eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC91dGlscy1CSFpKY0JSdi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0ZBQXdGLElBQUk7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsSUFBSTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxZQUFZO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQzROO0FBQzVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDExLjQuMV90eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC91dGlscy1CSFpKY0JSdi5tanM/YmQ3NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyNyZWdpb24gc3JjL3Vuc3RhYmxlLWNvcmUtZG8tbm90LWltcG9ydC9ycGMvY29kZXMudHNcbi8qKlxuKiBKU09OLVJQQyAyLjAgRXJyb3IgY29kZXNcbipcbiogYC0zMjAwMGAgdG8gYC0zMjA5OWAgYXJlIHJlc2VydmVkIGZvciBpbXBsZW1lbnRhdGlvbi1kZWZpbmVkIHNlcnZlci1lcnJvcnMuXG4qIEZvciB0UlBDIHdlJ3JlIGNvcHlpbmcgdGhlIGxhc3QgZGlnaXRzIG9mIEhUVFAgNFhYIGVycm9ycy5cbiovXG5jb25zdCBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSA9IHtcblx0UEFSU0VfRVJST1I6IC0zMjcwMCxcblx0QkFEX1JFUVVFU1Q6IC0zMjYwMCxcblx0SU5URVJOQUxfU0VSVkVSX0VSUk9SOiAtMzI2MDMsXG5cdE5PVF9JTVBMRU1FTlRFRDogLTMyNjAzLFxuXHRCQURfR0FURVdBWTogLTMyNjAzLFxuXHRTRVJWSUNFX1VOQVZBSUxBQkxFOiAtMzI2MDMsXG5cdEdBVEVXQVlfVElNRU9VVDogLTMyNjAzLFxuXHRVTkFVVEhPUklaRUQ6IC0zMjAwMSxcblx0UEFZTUVOVF9SRVFVSVJFRDogLTMyMDAyLFxuXHRGT1JCSURERU46IC0zMjAwMyxcblx0Tk9UX0ZPVU5EOiAtMzIwMDQsXG5cdE1FVEhPRF9OT1RfU1VQUE9SVEVEOiAtMzIwMDUsXG5cdFRJTUVPVVQ6IC0zMjAwOCxcblx0Q09ORkxJQ1Q6IC0zMjAwOSxcblx0UFJFQ09ORElUSU9OX0ZBSUxFRDogLTMyMDEyLFxuXHRQQVlMT0FEX1RPT19MQVJHRTogLTMyMDEzLFxuXHRVTlNVUFBPUlRFRF9NRURJQV9UWVBFOiAtMzIwMTUsXG5cdFVOUFJPQ0VTU0FCTEVfQ09OVEVOVDogLTMyMDIyLFxuXHRUT09fTUFOWV9SRVFVRVNUUzogLTMyMDI5LFxuXHRDTElFTlRfQ0xPU0VEX1JFUVVFU1Q6IC0zMjA5OVxufTtcbmNvbnN0IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSID0ge1xuXHRbLTMyNzAwXTogXCJQQVJTRV9FUlJPUlwiLFxuXHRbLTMyNjAwXTogXCJCQURfUkVRVUVTVFwiLFxuXHRbLTMyNjAzXTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcblx0Wy0zMjAwMV06IFwiVU5BVVRIT1JJWkVEXCIsXG5cdFstMzIwMDJdOiBcIlBBWU1FTlRfUkVRVUlSRURcIixcblx0Wy0zMjAwM106IFwiRk9SQklEREVOXCIsXG5cdFstMzIwMDRdOiBcIk5PVF9GT1VORFwiLFxuXHRbLTMyMDA1XTogXCJNRVRIT0RfTk9UX1NVUFBPUlRFRFwiLFxuXHRbLTMyMDA4XTogXCJUSU1FT1VUXCIsXG5cdFstMzIwMDldOiBcIkNPTkZMSUNUXCIsXG5cdFstMzIwMTJdOiBcIlBSRUNPTkRJVElPTl9GQUlMRURcIixcblx0Wy0zMjAxM106IFwiUEFZTE9BRF9UT09fTEFSR0VcIixcblx0Wy0zMjAxNV06IFwiVU5TVVBQT1JURURfTUVESUFfVFlQRVwiLFxuXHRbLTMyMDIyXTogXCJVTlBST0NFU1NBQkxFX0NPTlRFTlRcIixcblx0Wy0zMjAyOV06IFwiVE9PX01BTllfUkVRVUVTVFNcIixcblx0Wy0zMjA5OV06IFwiQ0xJRU5UX0NMT1NFRF9SRVFVRVNUXCJcbn07XG4vKipcbiogdFJQQyBlcnJvciBjb2RlcyB0aGF0IGFyZSBjb25zaWRlcmVkIHJldHJ5YWJsZVxuKiBXaXRoIG91dCBvZiB0aGUgYm94IFNTRSwgdGhlIGNsaWVudCB3aWxsIHJlY29ubmVjdCB3aGVuIHRoZXNlIGVycm9ycyBhcmUgZW5jb3VudGVyZWRcbiovXG5jb25zdCByZXRyeWFibGVScGNDb2RlcyA9IFtcblx0VFJQQ19FUlJPUl9DT0RFU19CWV9LRVkuQkFEX0dBVEVXQVksXG5cdFRSUENfRVJST1JfQ09ERVNfQllfS0VZLlNFUlZJQ0VfVU5BVkFJTEFCTEUsXG5cdFRSUENfRVJST1JfQ09ERVNfQllfS0VZLkdBVEVXQVlfVElNRU9VVCxcblx0VFJQQ19FUlJPUl9DT0RFU19CWV9LRVkuSU5URVJOQUxfU0VSVkVSX0VSUk9SXG5dO1xuXG4vLyNlbmRyZWdpb25cbi8vI3JlZ2lvbiBzcmMvdW5zdGFibGUtY29yZS1kby1ub3QtaW1wb3J0L3V0aWxzLnRzXG4vKipcbiogRW5zdXJlcyB0aGVyZSBhcmUgbm8gZHVwbGljYXRlIGtleXMgd2hlbiBidWlsZGluZyBhIHByb2NlZHVyZS5cbiogQGludGVybmFsXG4qL1xuZnVuY3Rpb24gbWVyZ2VXaXRob3V0T3ZlcnJpZGVzKG9iajEsIC4uLm9ianMpIHtcblx0Y29uc3QgbmV3T2JqID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBvYmoxKTtcblx0Zm9yIChjb25zdCBvdmVycmlkZXMgb2Ygb2JqcykgZm9yIChjb25zdCBrZXkgaW4gb3ZlcnJpZGVzKSB7XG5cdFx0aWYgKGtleSBpbiBuZXdPYmogJiYgbmV3T2JqW2tleV0gIT09IG92ZXJyaWRlc1trZXldKSB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZSBrZXkgJHtrZXl9YCk7XG5cdFx0bmV3T2JqW2tleV0gPSBvdmVycmlkZXNba2V5XTtcblx0fVxuXHRyZXR1cm4gbmV3T2JqO1xufVxuLyoqXG4qIENoZWNrIHRoYXQgdmFsdWUgaXMgb2JqZWN0XG4qIEBpbnRlcm5hbFxuKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIjtcbn1cbi8qKlxuKiBDcmVhdGUgYW4gb2JqZWN0IHdpdGhvdXQgaW5oZXJpdGluZyBhbnl0aGluZyBmcm9tIGBPYmplY3QucHJvdG90eXBlYFxuKiBAaW50ZXJuYWxcbiovXG5mdW5jdGlvbiBvbWl0UHJvdG90eXBlKG9iaikge1xuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBvYmopO1xufVxuY29uc3QgYXN5bmNJdGVyYXRvcnNTdXBwb3J0ZWQgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgISFTeW1ib2wuYXN5bmNJdGVyYXRvcjtcbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZSh2YWx1ZSkge1xuXHRyZXR1cm4gYXN5bmNJdGVyYXRvcnNTdXBwb3J0ZWQgJiYgaXNPYmplY3QodmFsdWUpICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yIGluIHZhbHVlO1xufVxuLyoqXG4qIFJ1biBhbiBJSUZFXG4qL1xuY29uc3QgcnVuID0gKGZuKSA9PiBmbigpO1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBpZGVudGl0eShpdCkge1xuXHRyZXR1cm4gaXQ7XG59XG4vKipcbiogR2VuZXJpYyBydW50aW1lIGFzc2VydGlvbiBmdW5jdGlvbi4gVGhyb3dzLCBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBgdHJ1ZWAuXG4qXG4qIENhbiBiZSB1c2VkIGFzIGEgc2xpZ2h0bHkgbGVzcyBkYW5nZXJvdXMgdmFyaWFudCBvZiB0eXBlIGFzc2VydGlvbnMuIENvZGVcbiogbWlzdGFrZXMgd291bGQgYmUgcmV2ZWFsZWQgYXQgcnVudGltZSB0aGVuIChob3BlZnVsbHkgZHVyaW5nIHRlc3RpbmcpLlxuKi9cbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1zZyA9IFwibm8gYWRkaXRpb25hbCBpbmZvXCIpIHtcblx0aWYgKCFjb25kaXRpb24pIHRocm93IG5ldyBFcnJvcihgQXNzZXJ0aW9uRXJyb3I6ICR7bXNnfWApO1xufVxuZnVuY3Rpb24gc2xlZXAobXMgPSAwKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzKSA9PiBzZXRUaW1lb3V0KHJlcywgbXMpKTtcbn1cbi8qKlxuKiBQb255ZmlsbCBmb3JcbiogW2BBYm9ydFNpZ25hbC5hbnlgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQWJvcnRTaWduYWwvYW55X3N0YXRpYykuXG4qL1xuZnVuY3Rpb24gYWJvcnRTaWduYWxzQW55UG9ueWZpbGwoc2lnbmFscykge1xuXHRpZiAodHlwZW9mIEFib3J0U2lnbmFsLmFueSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gQWJvcnRTaWduYWwuYW55KHNpZ25hbHMpO1xuXHRjb25zdCBhYyA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblx0Zm9yIChjb25zdCBzaWduYWwgb2Ygc2lnbmFscykge1xuXHRcdGlmIChzaWduYWwuYWJvcnRlZCkge1xuXHRcdFx0dHJpZ2dlcigpO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgdHJpZ2dlciwgeyBvbmNlOiB0cnVlIH0pO1xuXHR9XG5cdHJldHVybiBhYy5zaWduYWw7XG5cdGZ1bmN0aW9uIHRyaWdnZXIoKSB7XG5cdFx0YWMuYWJvcnQoKTtcblx0XHRmb3IgKGNvbnN0IHNpZ25hbCBvZiBzaWduYWxzKSBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIHRyaWdnZXIpO1xuXHR9XG59XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVksIFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSLCBhYm9ydFNpZ25hbHNBbnlQb255ZmlsbCwgYXNzZXJ0LCBpZGVudGl0eSwgaXNBc3luY0l0ZXJhYmxlLCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgbWVyZ2VXaXRob3V0T3ZlcnJpZGVzLCBub29wLCBvbWl0UHJvdG90eXBlLCByZXRyeWFibGVScGNDb2RlcywgcnVuLCBzbGVlcCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMtQkhaSmNCUnYubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/adapters/fetch/index.mjs":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/adapters/fetch/index.mjs ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchRequestHandler: () => (/* binding */ fetchRequestHandler)\n/* harmony export */ });\n/* harmony import */ var _resolveResponse_DPbYgJDD_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resolveResponse-DPbYgJDD.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-DPbYgJDD.mjs\");\n\n\n\n\n\n//#region src/adapters/fetch/fetchRequestHandler.ts\nconst trimSlashes = (path)=>{\n    path = path.startsWith(\"/\") ? path.slice(1) : path;\n    path = path.endsWith(\"/\") ? path.slice(0, -1) : path;\n    return path;\n};\nasync function fetchRequestHandler(opts) {\n    const resHeaders = new Headers();\n    const createContext = async (innerOpts)=>{\n        return opts.createContext?.({\n            req: opts.req,\n            resHeaders,\n            ...innerOpts\n        });\n    };\n    const url = new URL(opts.req.url);\n    const pathname = trimSlashes(url.pathname);\n    const endpoint = trimSlashes(opts.endpoint);\n    const path = trimSlashes(pathname.slice(endpoint.length));\n    return await (0,_resolveResponse_DPbYgJDD_mjs__WEBPACK_IMPORTED_MODULE_0__.resolveResponse)({\n        ...opts,\n        req: opts.req,\n        createContext,\n        path,\n        error: null,\n        onError (o) {\n            opts?.onError?.({\n                ...o,\n                req: opts.req\n            });\n        },\n        responseMeta (data) {\n            const meta = opts.responseMeta?.(data);\n            if (meta?.headers) {\n                if (meta.headers instanceof Headers) for (const [key, value] of meta.headers.entries())resHeaders.append(key, value);\n                else /**\n\t\t\t\t* @deprecated, delete in v12\n\t\t\t\t*/ for (const [key, value] of Object.entries(meta.headers))if (Array.isArray(value)) for (const v of value)resHeaders.append(key, v);\n                else if (typeof value === \"string\") resHeaders.set(key, value);\n            }\n            return {\n                headers: resHeaders,\n                status: meta?.status\n            };\n        }\n    });\n}\n//#endregion\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDExLjQuMV90eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9hZGFwdGVycy9mZXRjaC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUU7QUFDM0I7QUFDTjtBQUNGO0FBQ0s7QUFFdkMsbURBQW1EO0FBQ25ELE1BQU1DLGNBQWMsQ0FBQ0M7SUFDcEJBLE9BQU9BLEtBQUtDLFVBQVUsQ0FBQyxPQUFPRCxLQUFLRSxLQUFLLENBQUMsS0FBS0Y7SUFDOUNBLE9BQU9BLEtBQUtHLFFBQVEsQ0FBQyxPQUFPSCxLQUFLRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUtGO0lBQ2hELE9BQU9BO0FBQ1I7QUFDQSxlQUFlSSxvQkFBb0JDLElBQUk7SUFDdEMsTUFBTUMsYUFBYSxJQUFJQztJQUN2QixNQUFNQyxnQkFBZ0IsT0FBT0M7UUFDNUIsT0FBT0osS0FBS0csYUFBYSxHQUFHO1lBQzNCRSxLQUFLTCxLQUFLSyxHQUFHO1lBQ2JKO1lBQ0EsR0FBR0csU0FBUztRQUNiO0lBQ0Q7SUFDQSxNQUFNRSxNQUFNLElBQUlDLElBQUlQLEtBQUtLLEdBQUcsQ0FBQ0MsR0FBRztJQUNoQyxNQUFNRSxXQUFXZCxZQUFZWSxJQUFJRSxRQUFRO0lBQ3pDLE1BQU1DLFdBQVdmLFlBQVlNLEtBQUtTLFFBQVE7SUFDMUMsTUFBTWQsT0FBT0QsWUFBWWMsU0FBU1gsS0FBSyxDQUFDWSxTQUFTQyxNQUFNO0lBQ3ZELE9BQU8sTUFBTWpCLDhFQUFlQSxDQUFDO1FBQzVCLEdBQUdPLElBQUk7UUFDUEssS0FBS0wsS0FBS0ssR0FBRztRQUNiRjtRQUNBUjtRQUNBZ0IsT0FBTztRQUNQQyxTQUFRQyxDQUFDO1lBQ1JiLE1BQU1ZLFVBQVU7Z0JBQ2YsR0FBR0MsQ0FBQztnQkFDSlIsS0FBS0wsS0FBS0ssR0FBRztZQUNkO1FBQ0Q7UUFDQVMsY0FBYUMsSUFBSTtZQUNoQixNQUFNQyxPQUFPaEIsS0FBS2MsWUFBWSxHQUFHQztZQUNqQyxJQUFJQyxNQUFNQyxTQUFTO2dCQUNsQixJQUFJRCxLQUFLQyxPQUFPLFlBQVlmLFNBQVMsS0FBSyxNQUFNLENBQUNnQixLQUFLQyxNQUFNLElBQUlILEtBQUtDLE9BQU8sQ0FBQ0csT0FBTyxHQUFJbkIsV0FBV29CLE1BQU0sQ0FBQ0gsS0FBS0M7cUJBRWxIOztJQUVHLEdBQ0EsS0FBSyxNQUFNLENBQUNELEtBQUtDLE1BQU0sSUFBSUcsT0FBT0YsT0FBTyxDQUFDSixLQUFLQyxPQUFPLEVBQUcsSUFBSU0sTUFBTUMsT0FBTyxDQUFDTCxRQUFRLEtBQUssTUFBTU0sS0FBS04sTUFBT2xCLFdBQVdvQixNQUFNLENBQUNILEtBQUtPO3FCQUM1SCxJQUFJLE9BQU9OLFVBQVUsVUFBVWxCLFdBQVd5QixHQUFHLENBQUNSLEtBQUtDO1lBQ3pEO1lBQ0EsT0FBTztnQkFDTkYsU0FBU2hCO2dCQUNUMEIsUUFBUVgsTUFBTVc7WUFDZjtRQUNEO0lBQ0Q7QUFDRDtBQUVBLFlBQVk7QUFDbUIsQ0FDL0Isa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDExLjQuMV90eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9hZGFwdGVycy9mZXRjaC9pbmRleC5tanM/MGI4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlUmVzcG9uc2UgfSBmcm9tIFwiLi4vLi4vcmVzb2x2ZVJlc3BvbnNlLURQYllnSkRELm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vZ2V0RXJyb3JTaGFwZS1EeVlpbDRhVC5tanNcIjtcbmltcG9ydCBcIi4uLy4uL3RyYWNrZWQtR0VXUG9MMEMubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi91dGlscy1CSFpKY0JSdi5tanNcIjtcbmltcG9ydCBcIi4uLy4uL29ic2VydmFibGUtQjFvckxISEkubWpzXCI7XG5cbi8vI3JlZ2lvbiBzcmMvYWRhcHRlcnMvZmV0Y2gvZmV0Y2hSZXF1ZXN0SGFuZGxlci50c1xuY29uc3QgdHJpbVNsYXNoZXMgPSAocGF0aCkgPT4ge1xuXHRwYXRoID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IHBhdGguc2xpY2UoMSkgOiBwYXRoO1xuXHRwYXRoID0gcGF0aC5lbmRzV2l0aChcIi9cIikgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG5cdHJldHVybiBwYXRoO1xufTtcbmFzeW5jIGZ1bmN0aW9uIGZldGNoUmVxdWVzdEhhbmRsZXIob3B0cykge1xuXHRjb25zdCByZXNIZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcblx0Y29uc3QgY3JlYXRlQ29udGV4dCA9IGFzeW5jIChpbm5lck9wdHMpID0+IHtcblx0XHRyZXR1cm4gb3B0cy5jcmVhdGVDb250ZXh0Py4oe1xuXHRcdFx0cmVxOiBvcHRzLnJlcSxcblx0XHRcdHJlc0hlYWRlcnMsXG5cdFx0XHQuLi5pbm5lck9wdHNcblx0XHR9KTtcblx0fTtcblx0Y29uc3QgdXJsID0gbmV3IFVSTChvcHRzLnJlcS51cmwpO1xuXHRjb25zdCBwYXRobmFtZSA9IHRyaW1TbGFzaGVzKHVybC5wYXRobmFtZSk7XG5cdGNvbnN0IGVuZHBvaW50ID0gdHJpbVNsYXNoZXMob3B0cy5lbmRwb2ludCk7XG5cdGNvbnN0IHBhdGggPSB0cmltU2xhc2hlcyhwYXRobmFtZS5zbGljZShlbmRwb2ludC5sZW5ndGgpKTtcblx0cmV0dXJuIGF3YWl0IHJlc29sdmVSZXNwb25zZSh7XG5cdFx0Li4ub3B0cyxcblx0XHRyZXE6IG9wdHMucmVxLFxuXHRcdGNyZWF0ZUNvbnRleHQsXG5cdFx0cGF0aCxcblx0XHRlcnJvcjogbnVsbCxcblx0XHRvbkVycm9yKG8pIHtcblx0XHRcdG9wdHM/Lm9uRXJyb3I/Lih7XG5cdFx0XHRcdC4uLm8sXG5cdFx0XHRcdHJlcTogb3B0cy5yZXFcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0cmVzcG9uc2VNZXRhKGRhdGEpIHtcblx0XHRcdGNvbnN0IG1ldGEgPSBvcHRzLnJlc3BvbnNlTWV0YT8uKGRhdGEpO1xuXHRcdFx0aWYgKG1ldGE/LmhlYWRlcnMpIHtcblx0XHRcdFx0aWYgKG1ldGEuaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1ldGEuaGVhZGVycy5lbnRyaWVzKCkpIHJlc0hlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpO1xuXHRcdFx0XHRlbHNlXG4gLyoqXG5cdFx0XHRcdCogQGRlcHJlY2F0ZWQsIGRlbGV0ZSBpbiB2MTJcblx0XHRcdFx0Ki9cblx0XHRcdFx0Zm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMobWV0YS5oZWFkZXJzKSkgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBmb3IgKGNvbnN0IHYgb2YgdmFsdWUpIHJlc0hlYWRlcnMuYXBwZW5kKGtleSwgdik7XG5cdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikgcmVzSGVhZGVycy5zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRoZWFkZXJzOiByZXNIZWFkZXJzLFxuXHRcdFx0XHRzdGF0dXM6IG1ldGE/LnN0YXR1c1xuXHRcdFx0fTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGZldGNoUmVxdWVzdEhhbmRsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOlsicmVzb2x2ZVJlc3BvbnNlIiwidHJpbVNsYXNoZXMiLCJwYXRoIiwic3RhcnRzV2l0aCIsInNsaWNlIiwiZW5kc1dpdGgiLCJmZXRjaFJlcXVlc3RIYW5kbGVyIiwib3B0cyIsInJlc0hlYWRlcnMiLCJIZWFkZXJzIiwiY3JlYXRlQ29udGV4dCIsImlubmVyT3B0cyIsInJlcSIsInVybCIsIlVSTCIsInBhdGhuYW1lIiwiZW5kcG9pbnQiLCJsZW5ndGgiLCJlcnJvciIsIm9uRXJyb3IiLCJvIiwicmVzcG9uc2VNZXRhIiwiZGF0YSIsIm1ldGEiLCJoZWFkZXJzIiwia2V5IiwidmFsdWUiLCJlbnRyaWVzIiwiYXBwZW5kIiwiT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwidiIsInNldCIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/adapters/fetch/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-DyYil4aT.mjs":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-DyYil4aT.mjs ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTTP_CODE_TO_JSONRPC2: () => (/* binding */ HTTP_CODE_TO_JSONRPC2),\n/* harmony export */   JSONRPC2_TO_HTTP_CODE: () => (/* binding */ JSONRPC2_TO_HTTP_CODE),\n/* harmony export */   createFlatProxy: () => (/* binding */ createFlatProxy),\n/* harmony export */   createRecursiveProxy: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   getErrorShape: () => (/* binding */ getErrorShape),\n/* harmony export */   getHTTPStatusCode: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   getHTTPStatusCodeFromError: () => (/* binding */ getHTTPStatusCodeFromError),\n/* harmony export */   getStatusCodeFromKey: () => (/* binding */ getStatusCodeFromKey),\n/* harmony export */   getStatusKeyFromCode: () => (/* binding */ getStatusKeyFromCode)\n/* harmony export */ });\n/* harmony import */ var _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-BHZJcBRv.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs\");\n\n//#region src/unstable-core-do-not-import/createProxy.ts\nconst noop = ()=>{};\nconst freezeIfAvailable = (obj)=>{\n    if (Object.freeze) Object.freeze(obj);\n};\nfunction createInnerProxy(callback, path, memo) {\n    const cacheKey = path.join(\".\");\n    memo[cacheKey] ??= new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== \"string\" || key === \"then\") return void 0;\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ], memo);\n        },\n        apply (_1, _2, args) {\n            const lastOfPath = path[path.length - 1];\n            let opts = {\n                args,\n                path\n            };\n            if (lastOfPath === \"call\") opts = {\n                args: args.length >= 2 ? [\n                    args[1]\n                ] : [],\n                path: path.slice(0, -1)\n            };\n            else if (lastOfPath === \"apply\") opts = {\n                args: args.length >= 2 ? args[1] : [],\n                path: path.slice(0, -1)\n            };\n            freezeIfAvailable(opts.args);\n            freezeIfAvailable(opts.path);\n            return callback(opts);\n        }\n    });\n    return memo[cacheKey];\n}\n/**\n* Creates a proxy that calls the callback with the path and arguments\n*\n* @internal\n*/ const createRecursiveProxy = (callback)=>createInnerProxy(callback, [], Object.create(null));\n/**\n* Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n*\n* @internal\n*/ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (name === \"then\") return void 0;\n            return callback(name);\n        }\n    });\n};\n//#endregion\n//#region src/unstable-core-do-not-import/http/getHTTPStatusCode.ts\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    PAYMENT_REQUIRED: 402,\n    FORBIDDEN: 403,\n    NOT_FOUND: 404,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNSUPPORTED_MEDIA_TYPE: 415,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501,\n    BAD_GATEWAY: 502,\n    SERVICE_UNAVAILABLE: 503,\n    GATEWAY_TIMEOUT: 504\n};\nconst HTTP_CODE_TO_JSONRPC2 = {\n    400: \"BAD_REQUEST\",\n    401: \"UNAUTHORIZED\",\n    402: \"PAYMENT_REQUIRED\",\n    403: \"FORBIDDEN\",\n    404: \"NOT_FOUND\",\n    405: \"METHOD_NOT_SUPPORTED\",\n    408: \"TIMEOUT\",\n    409: \"CONFLICT\",\n    412: \"PRECONDITION_FAILED\",\n    413: \"PAYLOAD_TOO_LARGE\",\n    415: \"UNSUPPORTED_MEDIA_TYPE\",\n    422: \"UNPROCESSABLE_CONTENT\",\n    429: \"TOO_MANY_REQUESTS\",\n    499: \"CLIENT_CLOSED_REQUEST\",\n    500: \"INTERNAL_SERVER_ERROR\",\n    501: \"NOT_IMPLEMENTED\",\n    502: \"BAD_GATEWAY\",\n    503: \"SERVICE_UNAVAILABLE\",\n    504: \"GATEWAY_TIMEOUT\"\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getStatusKeyFromCode(code) {\n    return HTTP_CODE_TO_JSONRPC2[code] ?? \"INTERNAL_SERVER_ERROR\";\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if (\"error\" in res && (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(res.error.data)) {\n            if (typeof res.error.data?.[\"httpStatus\"] === \"number\") return res.error.data[\"httpStatus\"];\n            const code = _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) return 207;\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\n//#endregion\n//#region src/unstable-core-do-not-import/error/getErrorShape.ts\n/**\n* @internal\n*/ function getErrorShape(opts) {\n    const { path, error, config } = opts;\n    const { code } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPC_ERROR_CODES_BY_KEY[code],\n        data: {\n            code,\n            httpStatus: getHTTPStatusCodeFromError(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === \"string\") shape.data.stack = opts.error.stack;\n    if (typeof path === \"string\") shape.data.path = path;\n    return config.errorFormatter({\n        ...opts,\n        shape\n    });\n}\n//#endregion\n //# sourceMappingURL=getErrorShape-DyYil4aT.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-DyYil4aT.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/initTRPC-COaJMShh.mjs":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/initTRPC-COaJMShh.mjs ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StandardSchemaV1Error: () => (/* binding */ StandardSchemaV1Error),\n/* harmony export */   createBuilder: () => (/* binding */ createBuilder),\n/* harmony export */   createInputMiddleware: () => (/* binding */ createInputMiddleware),\n/* harmony export */   createMiddlewareFactory: () => (/* binding */ createMiddlewareFactory),\n/* harmony export */   createOutputMiddleware: () => (/* binding */ createOutputMiddleware),\n/* harmony export */   experimental_standaloneMiddleware: () => (/* binding */ experimental_standaloneMiddleware),\n/* harmony export */   getParseFn: () => (/* binding */ getParseFn),\n/* harmony export */   initTRPC: () => (/* binding */ initTRPC),\n/* harmony export */   isServerDefault: () => (/* binding */ isServerDefault),\n/* harmony export */   middlewareMarker: () => (/* binding */ middlewareMarker)\n/* harmony export */ });\n/* harmony import */ var _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracked-GEWPoL0C.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-GEWPoL0C.mjs\");\n/* harmony import */ var _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-BHZJcBRv.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs\");\n\n\n//#region src/unstable-core-do-not-import/middleware.ts\n/** @internal */ const middlewareMarker = \"middlewareMarker\";\n/**\n* @internal\n*/ function createMiddlewareFactory() {\n    function createMiddlewareInner(middlewares) {\n        return {\n            _middlewares: middlewares,\n            unstable_pipe (middlewareBuilderOrFn) {\n                const pipedMiddleware = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                    middlewareBuilderOrFn\n                ];\n                return createMiddlewareInner([\n                    ...middlewares,\n                    ...pipedMiddleware\n                ]);\n            }\n        };\n    }\n    function createMiddleware(fn) {\n        return createMiddlewareInner([\n            fn\n        ]);\n    }\n    return createMiddleware;\n}\n/**\n* Create a standalone middleware\n* @see https://trpc.io/docs/v11/server/middlewares#experimental-standalone-middlewares\n* @deprecated use `.concat()` instead\n*/ const experimental_standaloneMiddleware = ()=>({\n        create: createMiddlewareFactory()\n    });\n/**\n* @internal\n* Please note, `trpc-openapi` uses this function.\n*/ function createInputMiddleware(parse) {\n    const inputMiddleware = async function inputValidatorMiddleware(opts) {\n        let parsedInput;\n        const rawInput = await opts.getRawInput();\n        try {\n            parsedInput = await parse(rawInput);\n        } catch (cause) {\n            throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                code: \"BAD_REQUEST\",\n                cause\n            });\n        }\n        const combinedInput = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(opts.input) && (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(parsedInput) ? {\n            ...opts.input,\n            ...parsedInput\n        } : parsedInput;\n        return opts.next({\n            input: combinedInput\n        });\n    };\n    inputMiddleware._type = \"input\";\n    return inputMiddleware;\n}\n/**\n* @internal\n*/ function createOutputMiddleware(parse) {\n    const outputMiddleware = async function outputValidatorMiddleware({ next }) {\n        const result = await next();\n        if (!result.ok) return result;\n        try {\n            const data = await parse(result.data);\n            return {\n                ...result,\n                data\n            };\n        } catch (cause) {\n            throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                message: \"Output validation failed\",\n                code: \"INTERNAL_SERVER_ERROR\",\n                cause\n            });\n        }\n    };\n    outputMiddleware._type = \"output\";\n    return outputMiddleware;\n}\n//#endregion\n//#region src/vendor/standard-schema-v1/error.ts\n/** A schema error with useful information. */ var StandardSchemaV1Error = class extends Error {\n    /**\n\t* Creates a schema error with useful information.\n\t*\n\t* @param issues The schema issues.\n\t*/ constructor(issues){\n        super(issues[0]?.message);\n        this.name = \"SchemaError\";\n        this.issues = issues;\n    }\n};\n//#endregion\n//#region src/unstable-core-do-not-import/parser.ts\nfunction getParseFn(procedureParser) {\n    const parser = procedureParser;\n    const isStandardSchema = \"~standard\" in parser;\n    if (typeof parser === \"function\" && typeof parser.assert === \"function\") return parser.assert.bind(parser);\n    if (typeof parser === \"function\" && !isStandardSchema) return parser;\n    if (typeof parser.parseAsync === \"function\") return parser.parseAsync.bind(parser);\n    if (typeof parser.parse === \"function\") return parser.parse.bind(parser);\n    if (typeof parser.validateSync === \"function\") return parser.validateSync.bind(parser);\n    if (typeof parser.create === \"function\") return parser.create.bind(parser);\n    if (typeof parser.assert === \"function\") return (value)=>{\n        parser.assert(value);\n        return value;\n    };\n    if (isStandardSchema) return async (value)=>{\n        const result = await parser[\"~standard\"].validate(value);\n        if (result.issues) throw new StandardSchemaV1Error(result.issues);\n        return result.value;\n    };\n    throw new Error(\"Could not find a validator fn\");\n}\n//#endregion\n//#region src/unstable-core-do-not-import/procedureBuilder.ts\nfunction createNewBuilder(def1, def2) {\n    const { middlewares = [], inputs, meta, ...rest } = def2;\n    return createBuilder({\n        ...(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_1__.mergeWithoutOverrides)(def1, rest),\n        inputs: [\n            ...def1.inputs,\n            ...inputs ?? []\n        ],\n        middlewares: [\n            ...def1.middlewares,\n            ...middlewares\n        ],\n        meta: def1.meta && meta ? {\n            ...def1.meta,\n            ...meta\n        } : meta ?? def1.meta\n    });\n}\nfunction createBuilder(initDef = {}) {\n    const _def = {\n        procedure: true,\n        inputs: [],\n        middlewares: [],\n        ...initDef\n    };\n    const builder = {\n        _def,\n        input (input) {\n            const parser = getParseFn(input);\n            return createNewBuilder(_def, {\n                inputs: [\n                    input\n                ],\n                middlewares: [\n                    createInputMiddleware(parser)\n                ]\n            });\n        },\n        output (output) {\n            const parser = getParseFn(output);\n            return createNewBuilder(_def, {\n                output,\n                middlewares: [\n                    createOutputMiddleware(parser)\n                ]\n            });\n        },\n        meta (meta) {\n            return createNewBuilder(_def, {\n                meta\n            });\n        },\n        use (middlewareBuilderOrFn) {\n            const middlewares = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                middlewareBuilderOrFn\n            ];\n            return createNewBuilder(_def, {\n                middlewares\n            });\n        },\n        unstable_concat (builder$1) {\n            return createNewBuilder(_def, builder$1._def);\n        },\n        concat (builder$1) {\n            return createNewBuilder(_def, builder$1._def);\n        },\n        query (resolver) {\n            return createResolver({\n                ..._def,\n                type: \"query\"\n            }, resolver);\n        },\n        mutation (resolver) {\n            return createResolver({\n                ..._def,\n                type: \"mutation\"\n            }, resolver);\n        },\n        subscription (resolver) {\n            return createResolver({\n                ..._def,\n                type: \"subscription\"\n            }, resolver);\n        },\n        experimental_caller (caller) {\n            return createNewBuilder(_def, {\n                caller\n            });\n        }\n    };\n    return builder;\n}\nfunction createResolver(_defIn, resolver) {\n    const finalBuilder = createNewBuilder(_defIn, {\n        resolver,\n        middlewares: [\n            async function resolveMiddleware(opts) {\n                const data = await resolver(opts);\n                return {\n                    marker: middlewareMarker,\n                    ok: true,\n                    data,\n                    ctx: opts.ctx\n                };\n            }\n        ]\n    });\n    const _def = {\n        ...finalBuilder._def,\n        type: _defIn.type,\n        experimental_caller: Boolean(finalBuilder._def.caller),\n        meta: finalBuilder._def.meta,\n        $types: null\n    };\n    const invoke = createProcedureCaller(finalBuilder._def);\n    const callerOverride = finalBuilder._def.caller;\n    if (!callerOverride) return invoke;\n    const callerWrapper = async (...args)=>{\n        return await callerOverride({\n            args,\n            invoke,\n            _def\n        });\n    };\n    callerWrapper._def = _def;\n    return callerWrapper;\n}\nconst codeblock = `\nThis is a client-only function.\nIf you want to call this function on the server, see https://trpc.io/docs/v11/server/server-side-calls\n`.trim();\nasync function callRecursive(index, _def, opts) {\n    try {\n        const middleware = _def.middlewares[index];\n        const result = await middleware({\n            ...opts,\n            meta: _def.meta,\n            input: opts.input,\n            next (_nextOpts) {\n                const nextOpts = _nextOpts;\n                return callRecursive(index + 1, _def, {\n                    ...opts,\n                    ctx: nextOpts?.ctx ? {\n                        ...opts.ctx,\n                        ...nextOpts.ctx\n                    } : opts.ctx,\n                    input: nextOpts && \"input\" in nextOpts ? nextOpts.input : opts.input,\n                    getRawInput: nextOpts?.getRawInput ?? opts.getRawInput\n                });\n            }\n        });\n        return result;\n    } catch (cause) {\n        return {\n            ok: false,\n            error: (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__.getTRPCErrorFromUnknown)(cause),\n            marker: middlewareMarker\n        };\n    }\n}\nfunction createProcedureCaller(_def) {\n    async function procedure(opts) {\n        if (!opts || !(\"getRawInput\" in opts)) throw new Error(codeblock);\n        const result = await callRecursive(0, _def, opts);\n        if (!result) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"No result from middlewares - did you forget to `return next()`?\"\n        });\n        if (!result.ok) throw result.error;\n        return result.data;\n    }\n    procedure._def = _def;\n    procedure.procedure = true;\n    procedure.meta = _def.meta;\n    return procedure;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/rootConfig.ts\n/**\n* The default check to see if we're in a server\n*/ const isServerDefault =  true || 0;\n//#endregion\n//#region src/unstable-core-do-not-import/initTRPC.ts\nvar TRPCBuilder = class TRPCBuilder {\n    /**\n\t* Add a context shape as a generic to the root object\n\t* @see https://trpc.io/docs/v11/server/context\n\t*/ context() {\n        return new TRPCBuilder();\n    }\n    /**\n\t* Add a meta shape as a generic to the root object\n\t* @see https://trpc.io/docs/v11/quickstart\n\t*/ meta() {\n        return new TRPCBuilder();\n    }\n    /**\n\t* Create the root object\n\t* @see https://trpc.io/docs/v11/server/routers#initialize-trpc\n\t*/ create(opts) {\n        const config = {\n            ...opts,\n            transformer: (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__.getDataTransformer)(opts?.transformer ?? _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__.defaultTransformer),\n            isDev: opts?.isDev ?? globalThis.process?.env[\"NODE_ENV\"] !== \"production\",\n            allowOutsideOfServer: opts?.allowOutsideOfServer ?? false,\n            errorFormatter: opts?.errorFormatter ?? _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__.defaultFormatter,\n            isServer: opts?.isServer ?? isServerDefault,\n            $types: null\n        };\n        {\n            const isServer = opts?.isServer ?? isServerDefault;\n            if (!isServer && opts?.allowOutsideOfServer !== true) throw new Error(`You're trying to use @trpc/server in a non-server environment. This is not supported by default.`);\n        }\n        return {\n            _config: config,\n            procedure: createBuilder({\n                meta: opts?.defaultMeta\n            }),\n            middleware: createMiddlewareFactory(),\n            router: (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__.createRouterFactory)(config),\n            mergeRouters: _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__.mergeRouters,\n            createCallerFactory: (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_0__.createCallerFactory)()\n        };\n    }\n};\n/**\n* Builder to initialize the tRPC root object - use this exactly once per backend\n* @see https://trpc.io/docs/v11/quickstart\n*/ const initTRPC = new TRPCBuilder();\n//#endregion\n //# sourceMappingURL=initTRPC-COaJMShh.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRycGMrc2VydmVyQDExLjQuMV90eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9pbml0VFJQQy1DT2FKTVNoaC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQThMO0FBQ3ZIO0FBRXZFLHVEQUF1RDtBQUN2RCxjQUFjLEdBQ2QsTUFBTVUsbUJBQW1CO0FBQ3pCOztBQUVBLEdBQ0EsU0FBU0M7SUFDUixTQUFTQyxzQkFBc0JDLFdBQVc7UUFDekMsT0FBTztZQUNOQyxjQUFjRDtZQUNkRSxlQUFjQyxxQkFBcUI7Z0JBQ2xDLE1BQU1DLGtCQUFrQixrQkFBa0JELHdCQUF3QkEsc0JBQXNCRixZQUFZLEdBQUc7b0JBQUNFO2lCQUFzQjtnQkFDOUgsT0FBT0osc0JBQXNCO3VCQUFJQzt1QkFBZ0JJO2lCQUFnQjtZQUNsRTtRQUNEO0lBQ0Q7SUFDQSxTQUFTQyxpQkFBaUJDLEVBQUU7UUFDM0IsT0FBT1Asc0JBQXNCO1lBQUNPO1NBQUc7SUFDbEM7SUFDQSxPQUFPRDtBQUNSO0FBQ0E7Ozs7QUFJQSxHQUNBLE1BQU1FLG9DQUFvQyxJQUFPO1FBQUVDLFFBQVFWO0lBQTBCO0FBQ3JGOzs7QUFHQSxHQUNBLFNBQVNXLHNCQUFzQkMsS0FBSztJQUNuQyxNQUFNQyxrQkFBa0IsZUFBZUMseUJBQXlCQyxJQUFJO1FBQ25FLElBQUlDO1FBQ0osTUFBTUMsV0FBVyxNQUFNRixLQUFLRyxXQUFXO1FBQ3ZDLElBQUk7WUFDSEYsY0FBYyxNQUFNSixNQUFNSztRQUMzQixFQUFFLE9BQU9FLE9BQU87WUFDZixNQUFNLElBQUk5Qiw0REFBU0EsQ0FBQztnQkFDbkIrQixNQUFNO2dCQUNORDtZQUNEO1FBQ0Q7UUFDQSxNQUFNRSxnQkFBZ0J4Qiw2REFBUUEsQ0FBQ2tCLEtBQUtPLEtBQUssS0FBS3pCLDZEQUFRQSxDQUFDbUIsZUFBZTtZQUNyRSxHQUFHRCxLQUFLTyxLQUFLO1lBQ2IsR0FBR04sV0FBVztRQUNmLElBQUlBO1FBQ0osT0FBT0QsS0FBS1EsSUFBSSxDQUFDO1lBQUVELE9BQU9EO1FBQWM7SUFDekM7SUFDQVIsZ0JBQWdCVyxLQUFLLEdBQUc7SUFDeEIsT0FBT1g7QUFDUjtBQUNBOztBQUVBLEdBQ0EsU0FBU1ksdUJBQXVCYixLQUFLO0lBQ3BDLE1BQU1jLG1CQUFtQixlQUFlQywwQkFBMEIsRUFBRUosSUFBSSxFQUFFO1FBQ3pFLE1BQU1LLFNBQVMsTUFBTUw7UUFDckIsSUFBSSxDQUFDSyxPQUFPQyxFQUFFLEVBQUUsT0FBT0Q7UUFDdkIsSUFBSTtZQUNILE1BQU1FLE9BQU8sTUFBTWxCLE1BQU1nQixPQUFPRSxJQUFJO1lBQ3BDLE9BQU87Z0JBQ04sR0FBR0YsTUFBTTtnQkFDVEU7WUFDRDtRQUNELEVBQUUsT0FBT1gsT0FBTztZQUNmLE1BQU0sSUFBSTlCLDREQUFTQSxDQUFDO2dCQUNuQjBDLFNBQVM7Z0JBQ1RYLE1BQU07Z0JBQ05EO1lBQ0Q7UUFDRDtJQUNEO0lBQ0FPLGlCQUFpQkYsS0FBSyxHQUFHO0lBQ3pCLE9BQU9FO0FBQ1I7QUFFQSxZQUFZO0FBQ1osZ0RBQWdEO0FBQ2hELDRDQUE0QyxHQUM1QyxJQUFJTSx3QkFBd0IsY0FBY0M7SUFHekM7Ozs7Q0FJQSxHQUNBQyxZQUFZQyxNQUFNLENBQUU7UUFDbkIsS0FBSyxDQUFDQSxNQUFNLENBQUMsRUFBRSxFQUFFSjtRQUNqQixJQUFJLENBQUNLLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0QsTUFBTSxHQUFHQTtJQUNmO0FBQ0Q7QUFFQSxZQUFZO0FBQ1osbURBQW1EO0FBQ25ELFNBQVNFLFdBQVdDLGVBQWU7SUFDbEMsTUFBTUMsU0FBU0Q7SUFDZixNQUFNRSxtQkFBbUIsZUFBZUQ7SUFDeEMsSUFBSSxPQUFPQSxXQUFXLGNBQWMsT0FBT0EsT0FBT0UsTUFBTSxLQUFLLFlBQVksT0FBT0YsT0FBT0UsTUFBTSxDQUFDQyxJQUFJLENBQUNIO0lBQ25HLElBQUksT0FBT0EsV0FBVyxjQUFjLENBQUNDLGtCQUFrQixPQUFPRDtJQUM5RCxJQUFJLE9BQU9BLE9BQU9JLFVBQVUsS0FBSyxZQUFZLE9BQU9KLE9BQU9JLFVBQVUsQ0FBQ0QsSUFBSSxDQUFDSDtJQUMzRSxJQUFJLE9BQU9BLE9BQU8zQixLQUFLLEtBQUssWUFBWSxPQUFPMkIsT0FBTzNCLEtBQUssQ0FBQzhCLElBQUksQ0FBQ0g7SUFDakUsSUFBSSxPQUFPQSxPQUFPSyxZQUFZLEtBQUssWUFBWSxPQUFPTCxPQUFPSyxZQUFZLENBQUNGLElBQUksQ0FBQ0g7SUFDL0UsSUFBSSxPQUFPQSxPQUFPN0IsTUFBTSxLQUFLLFlBQVksT0FBTzZCLE9BQU83QixNQUFNLENBQUNnQyxJQUFJLENBQUNIO0lBQ25FLElBQUksT0FBT0EsT0FBT0UsTUFBTSxLQUFLLFlBQVksT0FBTyxDQUFDSTtRQUNoRE4sT0FBT0UsTUFBTSxDQUFDSTtRQUNkLE9BQU9BO0lBQ1I7SUFDQSxJQUFJTCxrQkFBa0IsT0FBTyxPQUFPSztRQUNuQyxNQUFNakIsU0FBUyxNQUFNVyxNQUFNLENBQUMsWUFBWSxDQUFDTyxRQUFRLENBQUNEO1FBQ2xELElBQUlqQixPQUFPTyxNQUFNLEVBQUUsTUFBTSxJQUFJSCxzQkFBc0JKLE9BQU9PLE1BQU07UUFDaEUsT0FBT1AsT0FBT2lCLEtBQUs7SUFDcEI7SUFDQSxNQUFNLElBQUlaLE1BQU07QUFDakI7QUFFQSxZQUFZO0FBQ1osNkRBQTZEO0FBQzdELFNBQVNjLGlCQUFpQkMsSUFBSSxFQUFFQyxJQUFJO0lBQ25DLE1BQU0sRUFBRS9DLGNBQWMsRUFBRSxFQUFFZ0QsTUFBTSxFQUFFQyxJQUFJLEVBQUMsR0FBR0MsTUFBTSxHQUFHSDtJQUNuRCxPQUFPSSxjQUFjO1FBQ3BCLEdBQUd2RCwwRUFBcUJBLENBQUNrRCxNQUFNSSxLQUFLO1FBQ3BDRixRQUFRO2VBQUlGLEtBQUtFLE1BQU07ZUFBS0EsVUFBVSxFQUFFO1NBQUM7UUFDekNoRCxhQUFhO2VBQUk4QyxLQUFLOUMsV0FBVztlQUFLQTtTQUFZO1FBQ2xEaUQsTUFBTUgsS0FBS0csSUFBSSxJQUFJQSxPQUFPO1lBQ3pCLEdBQUdILEtBQUtHLElBQUk7WUFDWixHQUFHQSxJQUFJO1FBQ1IsSUFBSUEsUUFBUUgsS0FBS0csSUFBSTtJQUN0QjtBQUNEO0FBQ0EsU0FBU0UsY0FBY0MsVUFBVSxDQUFDLENBQUM7SUFDbEMsTUFBTUMsT0FBTztRQUNaQyxXQUFXO1FBQ1hOLFFBQVEsRUFBRTtRQUNWaEQsYUFBYSxFQUFFO1FBQ2YsR0FBR29ELE9BQU87SUFDWDtJQUNBLE1BQU1HLFVBQVU7UUFDZkY7UUFDQWpDLE9BQU1BLEtBQUs7WUFDVixNQUFNaUIsU0FBU0YsV0FBV2Y7WUFDMUIsT0FBT3lCLGlCQUFpQlEsTUFBTTtnQkFDN0JMLFFBQVE7b0JBQUM1QjtpQkFBTTtnQkFDZnBCLGFBQWE7b0JBQUNTLHNCQUFzQjRCO2lCQUFRO1lBQzdDO1FBQ0Q7UUFDQW1CLFFBQU9BLE1BQU07WUFDWixNQUFNbkIsU0FBU0YsV0FBV3FCO1lBQzFCLE9BQU9YLGlCQUFpQlEsTUFBTTtnQkFDN0JHO2dCQUNBeEQsYUFBYTtvQkFBQ3VCLHVCQUF1QmM7aUJBQVE7WUFDOUM7UUFDRDtRQUNBWSxNQUFLQSxJQUFJO1lBQ1IsT0FBT0osaUJBQWlCUSxNQUFNO2dCQUFFSjtZQUFLO1FBQ3RDO1FBQ0FRLEtBQUl0RCxxQkFBcUI7WUFDeEIsTUFBTUgsY0FBYyxrQkFBa0JHLHdCQUF3QkEsc0JBQXNCRixZQUFZLEdBQUc7Z0JBQUNFO2FBQXNCO1lBQzFILE9BQU8wQyxpQkFBaUJRLE1BQU07Z0JBQUVyRDtZQUFZO1FBQzdDO1FBQ0EwRCxpQkFBZ0JDLFNBQVM7WUFDeEIsT0FBT2QsaUJBQWlCUSxNQUFNTSxVQUFVTixJQUFJO1FBQzdDO1FBQ0FPLFFBQU9ELFNBQVM7WUFDZixPQUFPZCxpQkFBaUJRLE1BQU1NLFVBQVVOLElBQUk7UUFDN0M7UUFDQVEsT0FBTUMsUUFBUTtZQUNiLE9BQU9DLGVBQWU7Z0JBQ3JCLEdBQUdWLElBQUk7Z0JBQ1BXLE1BQU07WUFDUCxHQUFHRjtRQUNKO1FBQ0FHLFVBQVNILFFBQVE7WUFDaEIsT0FBT0MsZUFBZTtnQkFDckIsR0FBR1YsSUFBSTtnQkFDUFcsTUFBTTtZQUNQLEdBQUdGO1FBQ0o7UUFDQUksY0FBYUosUUFBUTtZQUNwQixPQUFPQyxlQUFlO2dCQUNyQixHQUFHVixJQUFJO2dCQUNQVyxNQUFNO1lBQ1AsR0FBR0Y7UUFDSjtRQUNBSyxxQkFBb0JDLE1BQU07WUFDekIsT0FBT3ZCLGlCQUFpQlEsTUFBTTtnQkFBRWU7WUFBTztRQUN4QztJQUNEO0lBQ0EsT0FBT2I7QUFDUjtBQUNBLFNBQVNRLGVBQWVNLE1BQU0sRUFBRVAsUUFBUTtJQUN2QyxNQUFNUSxlQUFlekIsaUJBQWlCd0IsUUFBUTtRQUM3Q1A7UUFDQTlELGFBQWE7WUFBQyxlQUFldUUsa0JBQWtCMUQsSUFBSTtnQkFDbEQsTUFBTWUsT0FBTyxNQUFNa0MsU0FBU2pEO2dCQUM1QixPQUFPO29CQUNOMkQsUUFBUTNFO29CQUNSOEIsSUFBSTtvQkFDSkM7b0JBQ0E2QyxLQUFLNUQsS0FBSzRELEdBQUc7Z0JBQ2Q7WUFDRDtTQUFFO0lBQ0g7SUFDQSxNQUFNcEIsT0FBTztRQUNaLEdBQUdpQixhQUFhakIsSUFBSTtRQUNwQlcsTUFBTUssT0FBT0wsSUFBSTtRQUNqQkcscUJBQXFCTyxRQUFRSixhQUFhakIsSUFBSSxDQUFDZSxNQUFNO1FBQ3JEbkIsTUFBTXFCLGFBQWFqQixJQUFJLENBQUNKLElBQUk7UUFDNUIwQixRQUFRO0lBQ1Q7SUFDQSxNQUFNQyxTQUFTQyxzQkFBc0JQLGFBQWFqQixJQUFJO0lBQ3RELE1BQU15QixpQkFBaUJSLGFBQWFqQixJQUFJLENBQUNlLE1BQU07SUFDL0MsSUFBSSxDQUFDVSxnQkFBZ0IsT0FBT0Y7SUFDNUIsTUFBTUcsZ0JBQWdCLE9BQU8sR0FBR0M7UUFDL0IsT0FBTyxNQUFNRixlQUFlO1lBQzNCRTtZQUNBSjtZQUNBdkI7UUFDRDtJQUNEO0lBQ0EwQixjQUFjMUIsSUFBSSxHQUFHQTtJQUNyQixPQUFPMEI7QUFDUjtBQUNBLE1BQU1FLFlBQVksQ0FBQzs7O0FBR25CLENBQUMsQ0FBQ0MsSUFBSTtBQUNOLGVBQWVDLGNBQWNDLEtBQUssRUFBRS9CLElBQUksRUFBRXhDLElBQUk7SUFDN0MsSUFBSTtRQUNILE1BQU13RSxhQUFhaEMsS0FBS3JELFdBQVcsQ0FBQ29GLE1BQU07UUFDMUMsTUFBTTFELFNBQVMsTUFBTTJELFdBQVc7WUFDL0IsR0FBR3hFLElBQUk7WUFDUG9DLE1BQU1JLEtBQUtKLElBQUk7WUFDZjdCLE9BQU9QLEtBQUtPLEtBQUs7WUFDakJDLE1BQUtpRSxTQUFTO2dCQUNiLE1BQU1DLFdBQVdEO2dCQUNqQixPQUFPSCxjQUFjQyxRQUFRLEdBQUcvQixNQUFNO29CQUNyQyxHQUFHeEMsSUFBSTtvQkFDUDRELEtBQUtjLFVBQVVkLE1BQU07d0JBQ3BCLEdBQUc1RCxLQUFLNEQsR0FBRzt3QkFDWCxHQUFHYyxTQUFTZCxHQUFHO29CQUNoQixJQUFJNUQsS0FBSzRELEdBQUc7b0JBQ1pyRCxPQUFPbUUsWUFBWSxXQUFXQSxXQUFXQSxTQUFTbkUsS0FBSyxHQUFHUCxLQUFLTyxLQUFLO29CQUNwRUosYUFBYXVFLFVBQVV2RSxlQUFlSCxLQUFLRyxXQUFXO2dCQUN2RDtZQUNEO1FBQ0Q7UUFDQSxPQUFPVTtJQUNSLEVBQUUsT0FBT1QsT0FBTztRQUNmLE9BQU87WUFDTlUsSUFBSTtZQUNKNkQsT0FBTy9GLDhFQUF1QkEsQ0FBQ3dCO1lBQy9CdUQsUUFBUTNFO1FBQ1Q7SUFDRDtBQUNEO0FBQ0EsU0FBU2dGLHNCQUFzQnhCLElBQUk7SUFDbEMsZUFBZUMsVUFBVXpDLElBQUk7UUFDNUIsSUFBSSxDQUFDQSxRQUFRLENBQUUsa0JBQWlCQSxJQUFHLEdBQUksTUFBTSxJQUFJa0IsTUFBTWtEO1FBQ3ZELE1BQU12RCxTQUFTLE1BQU15RCxjQUFjLEdBQUc5QixNQUFNeEM7UUFDNUMsSUFBSSxDQUFDYSxRQUFRLE1BQU0sSUFBSXZDLDREQUFTQSxDQUFDO1lBQ2hDK0IsTUFBTTtZQUNOVyxTQUFTO1FBQ1Y7UUFDQSxJQUFJLENBQUNILE9BQU9DLEVBQUUsRUFBRSxNQUFNRCxPQUFPOEQsS0FBSztRQUNsQyxPQUFPOUQsT0FBT0UsSUFBSTtJQUNuQjtJQUNBMEIsVUFBVUQsSUFBSSxHQUFHQTtJQUNqQkMsVUFBVUEsU0FBUyxHQUFHO0lBQ3RCQSxVQUFVTCxJQUFJLEdBQUdJLEtBQUtKLElBQUk7SUFDMUIsT0FBT0s7QUFDUjtBQUVBLFlBQVk7QUFDWix1REFBdUQ7QUFDdkQ7O0FBRUEsR0FDQSxNQUFNbUMsa0JBQWtCLEtBQXNKLElBQUksQ0FBK0M7QUFFak8sWUFBWTtBQUNaLHFEQUFxRDtBQUNyRCxJQUFJSyxjQUFjLE1BQU1BO0lBQ3ZCOzs7Q0FHQSxHQUNBQyxVQUFVO1FBQ1QsT0FBTyxJQUFJRDtJQUNaO0lBQ0E7OztDQUdBLEdBQ0E3QyxPQUFPO1FBQ04sT0FBTyxJQUFJNkM7SUFDWjtJQUNBOzs7Q0FHQSxHQUNBdEYsT0FBT0ssSUFBSSxFQUFFO1FBQ1osTUFBTW1GLFNBQVM7WUFDZCxHQUFHbkYsSUFBSTtZQUNQb0YsYUFBYXpHLHlFQUFrQkEsQ0FBQ3FCLE1BQU1vRixlQUFlMUcscUVBQWtCQTtZQUN2RTJHLE9BQU9yRixNQUFNcUYsU0FBU1AsV0FBV0MsT0FBTyxFQUFFQyxHQUFHLENBQUMsV0FBVyxLQUFLO1lBQzlETSxzQkFBc0J0RixNQUFNc0Ysd0JBQXdCO1lBQ3BEQyxnQkFBZ0J2RixNQUFNdUYsa0JBQWtCOUcsbUVBQWdCQTtZQUN4RCtHLFVBQVV4RixNQUFNd0YsWUFBWVo7WUFDNUJkLFFBQVE7UUFDVDtRQUNBO1lBQ0MsTUFBTTBCLFdBQVd4RixNQUFNd0YsWUFBWVo7WUFDbkMsSUFBSSxDQUFDWSxZQUFZeEYsTUFBTXNGLHlCQUF5QixNQUFNLE1BQU0sSUFBSXBFLE1BQU0sQ0FBQyxnR0FBZ0csQ0FBQztRQUN6SztRQUNBLE9BQU87WUFDTnVFLFNBQVNOO1lBQ1QxQyxXQUFXSCxjQUFjO2dCQUFFRixNQUFNcEMsTUFBTTBGO1lBQVk7WUFDbkRsQixZQUFZdkY7WUFDWjBHLFFBQVFuSCwwRUFBbUJBLENBQUMyRztZQUM1QnRHLFlBQVlBLGlFQUFBQTtZQUNaTixxQkFBcUJBLDBFQUFtQkE7UUFDekM7SUFDRDtBQUNEO0FBQ0E7OztBQUdBLEdBQ0EsTUFBTXFILFdBQVcsSUFBSVg7QUFFckIsWUFBWTtBQUN3TSxDQUNwTiw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHJwYytzZXJ2ZXJAMTEuNC4xX3R5cGVzY3JpcHRANS44LjMvbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2luaXRUUlBDLUNPYUpNU2hoLm1qcz9hZDM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRSUENFcnJvciwgY3JlYXRlQ2FsbGVyRmFjdG9yeSwgY3JlYXRlUm91dGVyRmFjdG9yeSwgZGVmYXVsdEZvcm1hdHRlciwgZGVmYXVsdFRyYW5zZm9ybWVyLCBnZXREYXRhVHJhbnNmb3JtZXIsIGdldFRSUENFcnJvckZyb21Vbmtub3duLCBtZXJnZVJvdXRlcnMgfSBmcm9tIFwiLi90cmFja2VkLUdFV1BvTDBDLm1qc1wiO1xuaW1wb3J0IHsgaXNPYmplY3QsIG1lcmdlV2l0aG91dE92ZXJyaWRlcyB9IGZyb20gXCIuL3V0aWxzLUJIWkpjQlJ2Lm1qc1wiO1xuXG4vLyNyZWdpb24gc3JjL3Vuc3RhYmxlLWNvcmUtZG8tbm90LWltcG9ydC9taWRkbGV3YXJlLnRzXG4vKiogQGludGVybmFsICovXG5jb25zdCBtaWRkbGV3YXJlTWFya2VyID0gXCJtaWRkbGV3YXJlTWFya2VyXCI7XG4vKipcbiogQGludGVybmFsXG4qL1xuZnVuY3Rpb24gY3JlYXRlTWlkZGxld2FyZUZhY3RvcnkoKSB7XG5cdGZ1bmN0aW9uIGNyZWF0ZU1pZGRsZXdhcmVJbm5lcihtaWRkbGV3YXJlcykge1xuXHRcdHJldHVybiB7XG5cdFx0XHRfbWlkZGxld2FyZXM6IG1pZGRsZXdhcmVzLFxuXHRcdFx0dW5zdGFibGVfcGlwZShtaWRkbGV3YXJlQnVpbGRlck9yRm4pIHtcblx0XHRcdFx0Y29uc3QgcGlwZWRNaWRkbGV3YXJlID0gXCJfbWlkZGxld2FyZXNcIiBpbiBtaWRkbGV3YXJlQnVpbGRlck9yRm4gPyBtaWRkbGV3YXJlQnVpbGRlck9yRm4uX21pZGRsZXdhcmVzIDogW21pZGRsZXdhcmVCdWlsZGVyT3JGbl07XG5cdFx0XHRcdHJldHVybiBjcmVhdGVNaWRkbGV3YXJlSW5uZXIoWy4uLm1pZGRsZXdhcmVzLCAuLi5waXBlZE1pZGRsZXdhcmVdKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cdGZ1bmN0aW9uIGNyZWF0ZU1pZGRsZXdhcmUoZm4pIHtcblx0XHRyZXR1cm4gY3JlYXRlTWlkZGxld2FyZUlubmVyKFtmbl0pO1xuXHR9XG5cdHJldHVybiBjcmVhdGVNaWRkbGV3YXJlO1xufVxuLyoqXG4qIENyZWF0ZSBhIHN0YW5kYWxvbmUgbWlkZGxld2FyZVxuKiBAc2VlIGh0dHBzOi8vdHJwYy5pby9kb2NzL3YxMS9zZXJ2ZXIvbWlkZGxld2FyZXMjZXhwZXJpbWVudGFsLXN0YW5kYWxvbmUtbWlkZGxld2FyZXNcbiogQGRlcHJlY2F0ZWQgdXNlIGAuY29uY2F0KClgIGluc3RlYWRcbiovXG5jb25zdCBleHBlcmltZW50YWxfc3RhbmRhbG9uZU1pZGRsZXdhcmUgPSAoKSA9PiAoeyBjcmVhdGU6IGNyZWF0ZU1pZGRsZXdhcmVGYWN0b3J5KCkgfSk7XG4vKipcbiogQGludGVybmFsXG4qIFBsZWFzZSBub3RlLCBgdHJwYy1vcGVuYXBpYCB1c2VzIHRoaXMgZnVuY3Rpb24uXG4qL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRNaWRkbGV3YXJlKHBhcnNlKSB7XG5cdGNvbnN0IGlucHV0TWlkZGxld2FyZSA9IGFzeW5jIGZ1bmN0aW9uIGlucHV0VmFsaWRhdG9yTWlkZGxld2FyZShvcHRzKSB7XG5cdFx0bGV0IHBhcnNlZElucHV0O1xuXHRcdGNvbnN0IHJhd0lucHV0ID0gYXdhaXQgb3B0cy5nZXRSYXdJbnB1dCgpO1xuXHRcdHRyeSB7XG5cdFx0XHRwYXJzZWRJbnB1dCA9IGF3YWl0IHBhcnNlKHJhd0lucHV0KTtcblx0XHR9IGNhdGNoIChjYXVzZSkge1xuXHRcdFx0dGhyb3cgbmV3IFRSUENFcnJvcih7XG5cdFx0XHRcdGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcblx0XHRcdFx0Y2F1c2Vcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRjb25zdCBjb21iaW5lZElucHV0ID0gaXNPYmplY3Qob3B0cy5pbnB1dCkgJiYgaXNPYmplY3QocGFyc2VkSW5wdXQpID8ge1xuXHRcdFx0Li4ub3B0cy5pbnB1dCxcblx0XHRcdC4uLnBhcnNlZElucHV0XG5cdFx0fSA6IHBhcnNlZElucHV0O1xuXHRcdHJldHVybiBvcHRzLm5leHQoeyBpbnB1dDogY29tYmluZWRJbnB1dCB9KTtcblx0fTtcblx0aW5wdXRNaWRkbGV3YXJlLl90eXBlID0gXCJpbnB1dFwiO1xuXHRyZXR1cm4gaW5wdXRNaWRkbGV3YXJlO1xufVxuLyoqXG4qIEBpbnRlcm5hbFxuKi9cbmZ1bmN0aW9uIGNyZWF0ZU91dHB1dE1pZGRsZXdhcmUocGFyc2UpIHtcblx0Y29uc3Qgb3V0cHV0TWlkZGxld2FyZSA9IGFzeW5jIGZ1bmN0aW9uIG91dHB1dFZhbGlkYXRvck1pZGRsZXdhcmUoeyBuZXh0IH0pIHtcblx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBuZXh0KCk7XG5cdFx0aWYgKCFyZXN1bHQub2spIHJldHVybiByZXN1bHQ7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZShyZXN1bHQuZGF0YSk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHQuLi5yZXN1bHQsXG5cdFx0XHRcdGRhdGFcblx0XHRcdH07XG5cdFx0fSBjYXRjaCAoY2F1c2UpIHtcblx0XHRcdHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuXHRcdFx0XHRtZXNzYWdlOiBcIk91dHB1dCB2YWxpZGF0aW9uIGZhaWxlZFwiLFxuXHRcdFx0XHRjb2RlOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuXHRcdFx0XHRjYXVzZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xuXHRvdXRwdXRNaWRkbGV3YXJlLl90eXBlID0gXCJvdXRwdXRcIjtcblx0cmV0dXJuIG91dHB1dE1pZGRsZXdhcmU7XG59XG5cbi8vI2VuZHJlZ2lvblxuLy8jcmVnaW9uIHNyYy92ZW5kb3Ivc3RhbmRhcmQtc2NoZW1hLXYxL2Vycm9yLnRzXG4vKiogQSBzY2hlbWEgZXJyb3Igd2l0aCB1c2VmdWwgaW5mb3JtYXRpb24uICovXG52YXIgU3RhbmRhcmRTY2hlbWFWMUVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG5cdC8qKiBUaGUgc2NoZW1hIGlzc3Vlcy4gKi9cblx0aXNzdWVzO1xuXHQvKipcblx0KiBDcmVhdGVzIGEgc2NoZW1hIGVycm9yIHdpdGggdXNlZnVsIGluZm9ybWF0aW9uLlxuXHQqXG5cdCogQHBhcmFtIGlzc3VlcyBUaGUgc2NoZW1hIGlzc3Vlcy5cblx0Ki9cblx0Y29uc3RydWN0b3IoaXNzdWVzKSB7XG5cdFx0c3VwZXIoaXNzdWVzWzBdPy5tZXNzYWdlKTtcblx0XHR0aGlzLm5hbWUgPSBcIlNjaGVtYUVycm9yXCI7XG5cdFx0dGhpcy5pc3N1ZXMgPSBpc3N1ZXM7XG5cdH1cbn07XG5cbi8vI2VuZHJlZ2lvblxuLy8jcmVnaW9uIHNyYy91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQvcGFyc2VyLnRzXG5mdW5jdGlvbiBnZXRQYXJzZUZuKHByb2NlZHVyZVBhcnNlcikge1xuXHRjb25zdCBwYXJzZXIgPSBwcm9jZWR1cmVQYXJzZXI7XG5cdGNvbnN0IGlzU3RhbmRhcmRTY2hlbWEgPSBcIn5zdGFuZGFyZFwiIGluIHBhcnNlcjtcblx0aWYgKHR5cGVvZiBwYXJzZXIgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgcGFyc2VyLmFzc2VydCA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gcGFyc2VyLmFzc2VydC5iaW5kKHBhcnNlcik7XG5cdGlmICh0eXBlb2YgcGFyc2VyID09PSBcImZ1bmN0aW9uXCIgJiYgIWlzU3RhbmRhcmRTY2hlbWEpIHJldHVybiBwYXJzZXI7XG5cdGlmICh0eXBlb2YgcGFyc2VyLnBhcnNlQXN5bmMgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHBhcnNlci5wYXJzZUFzeW5jLmJpbmQocGFyc2VyKTtcblx0aWYgKHR5cGVvZiBwYXJzZXIucGFyc2UgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHBhcnNlci5wYXJzZS5iaW5kKHBhcnNlcik7XG5cdGlmICh0eXBlb2YgcGFyc2VyLnZhbGlkYXRlU3luYyA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gcGFyc2VyLnZhbGlkYXRlU3luYy5iaW5kKHBhcnNlcik7XG5cdGlmICh0eXBlb2YgcGFyc2VyLmNyZWF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gcGFyc2VyLmNyZWF0ZS5iaW5kKHBhcnNlcik7XG5cdGlmICh0eXBlb2YgcGFyc2VyLmFzc2VydCA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gKHZhbHVlKSA9PiB7XG5cdFx0cGFyc2VyLmFzc2VydCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9O1xuXHRpZiAoaXNTdGFuZGFyZFNjaGVtYSkgcmV0dXJuIGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBhcnNlcltcIn5zdGFuZGFyZFwiXS52YWxpZGF0ZSh2YWx1ZSk7XG5cdFx0aWYgKHJlc3VsdC5pc3N1ZXMpIHRocm93IG5ldyBTdGFuZGFyZFNjaGVtYVYxRXJyb3IocmVzdWx0Lmlzc3Vlcyk7XG5cdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0fTtcblx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgYSB2YWxpZGF0b3IgZm5cIik7XG59XG5cbi8vI2VuZHJlZ2lvblxuLy8jcmVnaW9uIHNyYy91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQvcHJvY2VkdXJlQnVpbGRlci50c1xuZnVuY3Rpb24gY3JlYXRlTmV3QnVpbGRlcihkZWYxLCBkZWYyKSB7XG5cdGNvbnN0IHsgbWlkZGxld2FyZXMgPSBbXSwgaW5wdXRzLCBtZXRhLC4uLnJlc3QgfSA9IGRlZjI7XG5cdHJldHVybiBjcmVhdGVCdWlsZGVyKHtcblx0XHQuLi5tZXJnZVdpdGhvdXRPdmVycmlkZXMoZGVmMSwgcmVzdCksXG5cdFx0aW5wdXRzOiBbLi4uZGVmMS5pbnB1dHMsIC4uLmlucHV0cyA/PyBbXV0sXG5cdFx0bWlkZGxld2FyZXM6IFsuLi5kZWYxLm1pZGRsZXdhcmVzLCAuLi5taWRkbGV3YXJlc10sXG5cdFx0bWV0YTogZGVmMS5tZXRhICYmIG1ldGEgPyB7XG5cdFx0XHQuLi5kZWYxLm1ldGEsXG5cdFx0XHQuLi5tZXRhXG5cdFx0fSA6IG1ldGEgPz8gZGVmMS5tZXRhXG5cdH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlQnVpbGRlcihpbml0RGVmID0ge30pIHtcblx0Y29uc3QgX2RlZiA9IHtcblx0XHRwcm9jZWR1cmU6IHRydWUsXG5cdFx0aW5wdXRzOiBbXSxcblx0XHRtaWRkbGV3YXJlczogW10sXG5cdFx0Li4uaW5pdERlZlxuXHR9O1xuXHRjb25zdCBidWlsZGVyID0ge1xuXHRcdF9kZWYsXG5cdFx0aW5wdXQoaW5wdXQpIHtcblx0XHRcdGNvbnN0IHBhcnNlciA9IGdldFBhcnNlRm4oaW5wdXQpO1xuXHRcdFx0cmV0dXJuIGNyZWF0ZU5ld0J1aWxkZXIoX2RlZiwge1xuXHRcdFx0XHRpbnB1dHM6IFtpbnB1dF0sXG5cdFx0XHRcdG1pZGRsZXdhcmVzOiBbY3JlYXRlSW5wdXRNaWRkbGV3YXJlKHBhcnNlcildXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdG91dHB1dChvdXRwdXQpIHtcblx0XHRcdGNvbnN0IHBhcnNlciA9IGdldFBhcnNlRm4ob3V0cHV0KTtcblx0XHRcdHJldHVybiBjcmVhdGVOZXdCdWlsZGVyKF9kZWYsIHtcblx0XHRcdFx0b3V0cHV0LFxuXHRcdFx0XHRtaWRkbGV3YXJlczogW2NyZWF0ZU91dHB1dE1pZGRsZXdhcmUocGFyc2VyKV1cblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0bWV0YShtZXRhKSB7XG5cdFx0XHRyZXR1cm4gY3JlYXRlTmV3QnVpbGRlcihfZGVmLCB7IG1ldGEgfSk7XG5cdFx0fSxcblx0XHR1c2UobWlkZGxld2FyZUJ1aWxkZXJPckZuKSB7XG5cdFx0XHRjb25zdCBtaWRkbGV3YXJlcyA9IFwiX21pZGRsZXdhcmVzXCIgaW4gbWlkZGxld2FyZUJ1aWxkZXJPckZuID8gbWlkZGxld2FyZUJ1aWxkZXJPckZuLl9taWRkbGV3YXJlcyA6IFttaWRkbGV3YXJlQnVpbGRlck9yRm5dO1xuXHRcdFx0cmV0dXJuIGNyZWF0ZU5ld0J1aWxkZXIoX2RlZiwgeyBtaWRkbGV3YXJlcyB9KTtcblx0XHR9LFxuXHRcdHVuc3RhYmxlX2NvbmNhdChidWlsZGVyJDEpIHtcblx0XHRcdHJldHVybiBjcmVhdGVOZXdCdWlsZGVyKF9kZWYsIGJ1aWxkZXIkMS5fZGVmKTtcblx0XHR9LFxuXHRcdGNvbmNhdChidWlsZGVyJDEpIHtcblx0XHRcdHJldHVybiBjcmVhdGVOZXdCdWlsZGVyKF9kZWYsIGJ1aWxkZXIkMS5fZGVmKTtcblx0XHR9LFxuXHRcdHF1ZXJ5KHJlc29sdmVyKSB7XG5cdFx0XHRyZXR1cm4gY3JlYXRlUmVzb2x2ZXIoe1xuXHRcdFx0XHQuLi5fZGVmLFxuXHRcdFx0XHR0eXBlOiBcInF1ZXJ5XCJcblx0XHRcdH0sIHJlc29sdmVyKTtcblx0XHR9LFxuXHRcdG11dGF0aW9uKHJlc29sdmVyKSB7XG5cdFx0XHRyZXR1cm4gY3JlYXRlUmVzb2x2ZXIoe1xuXHRcdFx0XHQuLi5fZGVmLFxuXHRcdFx0XHR0eXBlOiBcIm11dGF0aW9uXCJcblx0XHRcdH0sIHJlc29sdmVyKTtcblx0XHR9LFxuXHRcdHN1YnNjcmlwdGlvbihyZXNvbHZlcikge1xuXHRcdFx0cmV0dXJuIGNyZWF0ZVJlc29sdmVyKHtcblx0XHRcdFx0Li4uX2RlZixcblx0XHRcdFx0dHlwZTogXCJzdWJzY3JpcHRpb25cIlxuXHRcdFx0fSwgcmVzb2x2ZXIpO1xuXHRcdH0sXG5cdFx0ZXhwZXJpbWVudGFsX2NhbGxlcihjYWxsZXIpIHtcblx0XHRcdHJldHVybiBjcmVhdGVOZXdCdWlsZGVyKF9kZWYsIHsgY2FsbGVyIH0pO1xuXHRcdH1cblx0fTtcblx0cmV0dXJuIGJ1aWxkZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVSZXNvbHZlcihfZGVmSW4sIHJlc29sdmVyKSB7XG5cdGNvbnN0IGZpbmFsQnVpbGRlciA9IGNyZWF0ZU5ld0J1aWxkZXIoX2RlZkluLCB7XG5cdFx0cmVzb2x2ZXIsXG5cdFx0bWlkZGxld2FyZXM6IFthc3luYyBmdW5jdGlvbiByZXNvbHZlTWlkZGxld2FyZShvcHRzKSB7XG5cdFx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzb2x2ZXIob3B0cyk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRtYXJrZXI6IG1pZGRsZXdhcmVNYXJrZXIsXG5cdFx0XHRcdG9rOiB0cnVlLFxuXHRcdFx0XHRkYXRhLFxuXHRcdFx0XHRjdHg6IG9wdHMuY3R4XG5cdFx0XHR9O1xuXHRcdH1dXG5cdH0pO1xuXHRjb25zdCBfZGVmID0ge1xuXHRcdC4uLmZpbmFsQnVpbGRlci5fZGVmLFxuXHRcdHR5cGU6IF9kZWZJbi50eXBlLFxuXHRcdGV4cGVyaW1lbnRhbF9jYWxsZXI6IEJvb2xlYW4oZmluYWxCdWlsZGVyLl9kZWYuY2FsbGVyKSxcblx0XHRtZXRhOiBmaW5hbEJ1aWxkZXIuX2RlZi5tZXRhLFxuXHRcdCR0eXBlczogbnVsbFxuXHR9O1xuXHRjb25zdCBpbnZva2UgPSBjcmVhdGVQcm9jZWR1cmVDYWxsZXIoZmluYWxCdWlsZGVyLl9kZWYpO1xuXHRjb25zdCBjYWxsZXJPdmVycmlkZSA9IGZpbmFsQnVpbGRlci5fZGVmLmNhbGxlcjtcblx0aWYgKCFjYWxsZXJPdmVycmlkZSkgcmV0dXJuIGludm9rZTtcblx0Y29uc3QgY2FsbGVyV3JhcHBlciA9IGFzeW5jICguLi5hcmdzKSA9PiB7XG5cdFx0cmV0dXJuIGF3YWl0IGNhbGxlck92ZXJyaWRlKHtcblx0XHRcdGFyZ3MsXG5cdFx0XHRpbnZva2UsXG5cdFx0XHRfZGVmXG5cdFx0fSk7XG5cdH07XG5cdGNhbGxlcldyYXBwZXIuX2RlZiA9IF9kZWY7XG5cdHJldHVybiBjYWxsZXJXcmFwcGVyO1xufVxuY29uc3QgY29kZWJsb2NrID0gYFxuVGhpcyBpcyBhIGNsaWVudC1vbmx5IGZ1bmN0aW9uLlxuSWYgeW91IHdhbnQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIG9uIHRoZSBzZXJ2ZXIsIHNlZSBodHRwczovL3RycGMuaW8vZG9jcy92MTEvc2VydmVyL3NlcnZlci1zaWRlLWNhbGxzXG5gLnRyaW0oKTtcbmFzeW5jIGZ1bmN0aW9uIGNhbGxSZWN1cnNpdmUoaW5kZXgsIF9kZWYsIG9wdHMpIHtcblx0dHJ5IHtcblx0XHRjb25zdCBtaWRkbGV3YXJlID0gX2RlZi5taWRkbGV3YXJlc1tpbmRleF07XG5cdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgbWlkZGxld2FyZSh7XG5cdFx0XHQuLi5vcHRzLFxuXHRcdFx0bWV0YTogX2RlZi5tZXRhLFxuXHRcdFx0aW5wdXQ6IG9wdHMuaW5wdXQsXG5cdFx0XHRuZXh0KF9uZXh0T3B0cykge1xuXHRcdFx0XHRjb25zdCBuZXh0T3B0cyA9IF9uZXh0T3B0cztcblx0XHRcdFx0cmV0dXJuIGNhbGxSZWN1cnNpdmUoaW5kZXggKyAxLCBfZGVmLCB7XG5cdFx0XHRcdFx0Li4ub3B0cyxcblx0XHRcdFx0XHRjdHg6IG5leHRPcHRzPy5jdHggPyB7XG5cdFx0XHRcdFx0XHQuLi5vcHRzLmN0eCxcblx0XHRcdFx0XHRcdC4uLm5leHRPcHRzLmN0eFxuXHRcdFx0XHRcdH0gOiBvcHRzLmN0eCxcblx0XHRcdFx0XHRpbnB1dDogbmV4dE9wdHMgJiYgXCJpbnB1dFwiIGluIG5leHRPcHRzID8gbmV4dE9wdHMuaW5wdXQgOiBvcHRzLmlucHV0LFxuXHRcdFx0XHRcdGdldFJhd0lucHV0OiBuZXh0T3B0cz8uZ2V0UmF3SW5wdXQgPz8gb3B0cy5nZXRSYXdJbnB1dFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9IGNhdGNoIChjYXVzZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRvazogZmFsc2UsXG5cdFx0XHRlcnJvcjogZ2V0VFJQQ0Vycm9yRnJvbVVua25vd24oY2F1c2UpLFxuXHRcdFx0bWFya2VyOiBtaWRkbGV3YXJlTWFya2VyXG5cdFx0fTtcblx0fVxufVxuZnVuY3Rpb24gY3JlYXRlUHJvY2VkdXJlQ2FsbGVyKF9kZWYpIHtcblx0YXN5bmMgZnVuY3Rpb24gcHJvY2VkdXJlKG9wdHMpIHtcblx0XHRpZiAoIW9wdHMgfHwgIShcImdldFJhd0lucHV0XCIgaW4gb3B0cykpIHRocm93IG5ldyBFcnJvcihjb2RlYmxvY2spO1xuXHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxSZWN1cnNpdmUoMCwgX2RlZiwgb3B0cyk7XG5cdFx0aWYgKCFyZXN1bHQpIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuXHRcdFx0Y29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcblx0XHRcdG1lc3NhZ2U6IFwiTm8gcmVzdWx0IGZyb20gbWlkZGxld2FyZXMgLSBkaWQgeW91IGZvcmdldCB0byBgcmV0dXJuIG5leHQoKWA/XCJcblx0XHR9KTtcblx0XHRpZiAoIXJlc3VsdC5vaykgdGhyb3cgcmVzdWx0LmVycm9yO1xuXHRcdHJldHVybiByZXN1bHQuZGF0YTtcblx0fVxuXHRwcm9jZWR1cmUuX2RlZiA9IF9kZWY7XG5cdHByb2NlZHVyZS5wcm9jZWR1cmUgPSB0cnVlO1xuXHRwcm9jZWR1cmUubWV0YSA9IF9kZWYubWV0YTtcblx0cmV0dXJuIHByb2NlZHVyZTtcbn1cblxuLy8jZW5kcmVnaW9uXG4vLyNyZWdpb24gc3JjL3Vuc3RhYmxlLWNvcmUtZG8tbm90LWltcG9ydC9yb290Q29uZmlnLnRzXG4vKipcbiogVGhlIGRlZmF1bHQgY2hlY2sgdG8gc2VlIGlmIHdlJ3JlIGluIGEgc2VydmVyXG4qL1xuY29uc3QgaXNTZXJ2ZXJEZWZhdWx0ID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiB8fCBcIkRlbm9cIiBpbiB3aW5kb3cgfHwgZ2xvYmFsVGhpcy5wcm9jZXNzPy5lbnY/LltcIk5PREVfRU5WXCJdID09PSBcInRlc3RcIiB8fCAhIWdsb2JhbFRoaXMucHJvY2Vzcz8uZW52Py5bXCJKRVNUX1dPUktFUl9JRFwiXSB8fCAhIWdsb2JhbFRoaXMucHJvY2Vzcz8uZW52Py5bXCJWSVRFU1RfV09SS0VSX0lEXCJdO1xuXG4vLyNlbmRyZWdpb25cbi8vI3JlZ2lvbiBzcmMvdW5zdGFibGUtY29yZS1kby1ub3QtaW1wb3J0L2luaXRUUlBDLnRzXG52YXIgVFJQQ0J1aWxkZXIgPSBjbGFzcyBUUlBDQnVpbGRlciB7XG5cdC8qKlxuXHQqIEFkZCBhIGNvbnRleHQgc2hhcGUgYXMgYSBnZW5lcmljIHRvIHRoZSByb290IG9iamVjdFxuXHQqIEBzZWUgaHR0cHM6Ly90cnBjLmlvL2RvY3MvdjExL3NlcnZlci9jb250ZXh0XG5cdCovXG5cdGNvbnRleHQoKSB7XG5cdFx0cmV0dXJuIG5ldyBUUlBDQnVpbGRlcigpO1xuXHR9XG5cdC8qKlxuXHQqIEFkZCBhIG1ldGEgc2hhcGUgYXMgYSBnZW5lcmljIHRvIHRoZSByb290IG9iamVjdFxuXHQqIEBzZWUgaHR0cHM6Ly90cnBjLmlvL2RvY3MvdjExL3F1aWNrc3RhcnRcblx0Ki9cblx0bWV0YSgpIHtcblx0XHRyZXR1cm4gbmV3IFRSUENCdWlsZGVyKCk7XG5cdH1cblx0LyoqXG5cdCogQ3JlYXRlIHRoZSByb290IG9iamVjdFxuXHQqIEBzZWUgaHR0cHM6Ly90cnBjLmlvL2RvY3MvdjExL3NlcnZlci9yb3V0ZXJzI2luaXRpYWxpemUtdHJwY1xuXHQqL1xuXHRjcmVhdGUob3B0cykge1xuXHRcdGNvbnN0IGNvbmZpZyA9IHtcblx0XHRcdC4uLm9wdHMsXG5cdFx0XHR0cmFuc2Zvcm1lcjogZ2V0RGF0YVRyYW5zZm9ybWVyKG9wdHM/LnRyYW5zZm9ybWVyID8/IGRlZmF1bHRUcmFuc2Zvcm1lciksXG5cdFx0XHRpc0Rldjogb3B0cz8uaXNEZXYgPz8gZ2xvYmFsVGhpcy5wcm9jZXNzPy5lbnZbXCJOT0RFX0VOVlwiXSAhPT0gXCJwcm9kdWN0aW9uXCIsXG5cdFx0XHRhbGxvd091dHNpZGVPZlNlcnZlcjogb3B0cz8uYWxsb3dPdXRzaWRlT2ZTZXJ2ZXIgPz8gZmFsc2UsXG5cdFx0XHRlcnJvckZvcm1hdHRlcjogb3B0cz8uZXJyb3JGb3JtYXR0ZXIgPz8gZGVmYXVsdEZvcm1hdHRlcixcblx0XHRcdGlzU2VydmVyOiBvcHRzPy5pc1NlcnZlciA/PyBpc1NlcnZlckRlZmF1bHQsXG5cdFx0XHQkdHlwZXM6IG51bGxcblx0XHR9O1xuXHRcdHtcblx0XHRcdGNvbnN0IGlzU2VydmVyID0gb3B0cz8uaXNTZXJ2ZXIgPz8gaXNTZXJ2ZXJEZWZhdWx0O1xuXHRcdFx0aWYgKCFpc1NlcnZlciAmJiBvcHRzPy5hbGxvd091dHNpZGVPZlNlcnZlciAhPT0gdHJ1ZSkgdGhyb3cgbmV3IEVycm9yKGBZb3UncmUgdHJ5aW5nIHRvIHVzZSBAdHJwYy9zZXJ2ZXIgaW4gYSBub24tc2VydmVyIGVudmlyb25tZW50LiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQgYnkgZGVmYXVsdC5gKTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdF9jb25maWc6IGNvbmZpZyxcblx0XHRcdHByb2NlZHVyZTogY3JlYXRlQnVpbGRlcih7IG1ldGE6IG9wdHM/LmRlZmF1bHRNZXRhIH0pLFxuXHRcdFx0bWlkZGxld2FyZTogY3JlYXRlTWlkZGxld2FyZUZhY3RvcnkoKSxcblx0XHRcdHJvdXRlcjogY3JlYXRlUm91dGVyRmFjdG9yeShjb25maWcpLFxuXHRcdFx0bWVyZ2VSb3V0ZXJzLFxuXHRcdFx0Y3JlYXRlQ2FsbGVyRmFjdG9yeTogY3JlYXRlQ2FsbGVyRmFjdG9yeSgpXG5cdFx0fTtcblx0fVxufTtcbi8qKlxuKiBCdWlsZGVyIHRvIGluaXRpYWxpemUgdGhlIHRSUEMgcm9vdCBvYmplY3QgLSB1c2UgdGhpcyBleGFjdGx5IG9uY2UgcGVyIGJhY2tlbmRcbiogQHNlZSBodHRwczovL3RycGMuaW8vZG9jcy92MTEvcXVpY2tzdGFydFxuKi9cbmNvbnN0IGluaXRUUlBDID0gbmV3IFRSUENCdWlsZGVyKCk7XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgU3RhbmRhcmRTY2hlbWFWMUVycm9yLCBjcmVhdGVCdWlsZGVyLCBjcmVhdGVJbnB1dE1pZGRsZXdhcmUsIGNyZWF0ZU1pZGRsZXdhcmVGYWN0b3J5LCBjcmVhdGVPdXRwdXRNaWRkbGV3YXJlLCBleHBlcmltZW50YWxfc3RhbmRhbG9uZU1pZGRsZXdhcmUsIGdldFBhcnNlRm4sIGluaXRUUlBDLCBpc1NlcnZlckRlZmF1bHQsIG1pZGRsZXdhcmVNYXJrZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXRUUlBDLUNPYUpNU2hoLm1qcy5tYXAiXSwibmFtZXMiOlsiVFJQQ0Vycm9yIiwiY3JlYXRlQ2FsbGVyRmFjdG9yeSIsImNyZWF0ZVJvdXRlckZhY3RvcnkiLCJkZWZhdWx0Rm9ybWF0dGVyIiwiZGVmYXVsdFRyYW5zZm9ybWVyIiwiZ2V0RGF0YVRyYW5zZm9ybWVyIiwiZ2V0VFJQQ0Vycm9yRnJvbVVua25vd24iLCJtZXJnZVJvdXRlcnMiLCJpc09iamVjdCIsIm1lcmdlV2l0aG91dE92ZXJyaWRlcyIsIm1pZGRsZXdhcmVNYXJrZXIiLCJjcmVhdGVNaWRkbGV3YXJlRmFjdG9yeSIsImNyZWF0ZU1pZGRsZXdhcmVJbm5lciIsIm1pZGRsZXdhcmVzIiwiX21pZGRsZXdhcmVzIiwidW5zdGFibGVfcGlwZSIsIm1pZGRsZXdhcmVCdWlsZGVyT3JGbiIsInBpcGVkTWlkZGxld2FyZSIsImNyZWF0ZU1pZGRsZXdhcmUiLCJmbiIsImV4cGVyaW1lbnRhbF9zdGFuZGFsb25lTWlkZGxld2FyZSIsImNyZWF0ZSIsImNyZWF0ZUlucHV0TWlkZGxld2FyZSIsInBhcnNlIiwiaW5wdXRNaWRkbGV3YXJlIiwiaW5wdXRWYWxpZGF0b3JNaWRkbGV3YXJlIiwib3B0cyIsInBhcnNlZElucHV0IiwicmF3SW5wdXQiLCJnZXRSYXdJbnB1dCIsImNhdXNlIiwiY29kZSIsImNvbWJpbmVkSW5wdXQiLCJpbnB1dCIsIm5leHQiLCJfdHlwZSIsImNyZWF0ZU91dHB1dE1pZGRsZXdhcmUiLCJvdXRwdXRNaWRkbGV3YXJlIiwib3V0cHV0VmFsaWRhdG9yTWlkZGxld2FyZSIsInJlc3VsdCIsIm9rIiwiZGF0YSIsIm1lc3NhZ2UiLCJTdGFuZGFyZFNjaGVtYVYxRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiaXNzdWVzIiwibmFtZSIsImdldFBhcnNlRm4iLCJwcm9jZWR1cmVQYXJzZXIiLCJwYXJzZXIiLCJpc1N0YW5kYXJkU2NoZW1hIiwiYXNzZXJ0IiwiYmluZCIsInBhcnNlQXN5bmMiLCJ2YWxpZGF0ZVN5bmMiLCJ2YWx1ZSIsInZhbGlkYXRlIiwiY3JlYXRlTmV3QnVpbGRlciIsImRlZjEiLCJkZWYyIiwiaW5wdXRzIiwibWV0YSIsInJlc3QiLCJjcmVhdGVCdWlsZGVyIiwiaW5pdERlZiIsIl9kZWYiLCJwcm9jZWR1cmUiLCJidWlsZGVyIiwib3V0cHV0IiwidXNlIiwidW5zdGFibGVfY29uY2F0IiwiYnVpbGRlciQxIiwiY29uY2F0IiwicXVlcnkiLCJyZXNvbHZlciIsImNyZWF0ZVJlc29sdmVyIiwidHlwZSIsIm11dGF0aW9uIiwic3Vic2NyaXB0aW9uIiwiZXhwZXJpbWVudGFsX2NhbGxlciIsImNhbGxlciIsIl9kZWZJbiIsImZpbmFsQnVpbGRlciIsInJlc29sdmVNaWRkbGV3YXJlIiwibWFya2VyIiwiY3R4IiwiQm9vbGVhbiIsIiR0eXBlcyIsImludm9rZSIsImNyZWF0ZVByb2NlZHVyZUNhbGxlciIsImNhbGxlck92ZXJyaWRlIiwiY2FsbGVyV3JhcHBlciIsImFyZ3MiLCJjb2RlYmxvY2siLCJ0cmltIiwiY2FsbFJlY3Vyc2l2ZSIsImluZGV4IiwibWlkZGxld2FyZSIsIl9uZXh0T3B0cyIsIm5leHRPcHRzIiwiZXJyb3IiLCJpc1NlcnZlckRlZmF1bHQiLCJ3aW5kb3ciLCJnbG9iYWxUaGlzIiwicHJvY2VzcyIsImVudiIsIlRSUENCdWlsZGVyIiwiY29udGV4dCIsImNvbmZpZyIsInRyYW5zZm9ybWVyIiwiaXNEZXYiLCJhbGxvd091dHNpZGVPZlNlcnZlciIsImVycm9yRm9ybWF0dGVyIiwiaXNTZXJ2ZXIiLCJfY29uZmlnIiwiZGVmYXVsdE1ldGEiLCJyb3V0ZXIiLCJpbml0VFJQQyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/initTRPC-COaJMShh.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-B1orLHHI.mjs":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-B1orLHHI.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObservable: () => (/* binding */ isObservable),\n/* harmony export */   observable: () => (/* binding */ observable),\n/* harmony export */   observableToAsyncIterable: () => (/* binding */ observableToAsyncIterable),\n/* harmony export */   observableToPromise: () => (/* binding */ observableToPromise)\n/* harmony export */ });\n//#region src/observable/observable.ts\n/** @public */ function isObservable(x) {\n    return typeof x === \"object\" && x !== null && \"subscribe\" in x;\n}\n/** @public */ function observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) return;\n                unsubscribed = true;\n                if (typeof teardownRef === \"function\") teardownRef();\n                else if (teardownRef) teardownRef.unsubscribe();\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    if (isDone) return;\n                    observer.next?.(value);\n                },\n                error (err) {\n                    if (isDone) return;\n                    isDone = true;\n                    observer.error?.(err);\n                    unsubscribe();\n                },\n                complete () {\n                    if (isDone) return;\n                    isDone = true;\n                    observer.complete?.();\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) unsubscribe();\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return operations.reduce(pipeReducer, self);\n        }\n    };\n    return self;\n}\nfunction pipeReducer(prev, fn) {\n    return fn(prev);\n}\n/** @internal */ function observableToPromise(observable$1) {\n    const ac = new AbortController();\n    const promise = new Promise((resolve, reject)=>{\n        let isDone = false;\n        function onDone() {\n            if (isDone) return;\n            isDone = true;\n            obs$.unsubscribe();\n        }\n        ac.signal.addEventListener(\"abort\", ()=>{\n            reject(ac.signal.reason);\n        });\n        const obs$ = observable$1.subscribe({\n            next (data) {\n                isDone = true;\n                resolve(data);\n                onDone();\n            },\n            error (data) {\n                reject(data);\n            },\n            complete () {\n                ac.abort();\n                onDone();\n            }\n        });\n    });\n    return promise;\n}\n/**\n* @internal\n*/ function observableToReadableStream(observable$1, signal) {\n    let unsub = null;\n    const onAbort = ()=>{\n        unsub?.unsubscribe();\n        unsub = null;\n        signal.removeEventListener(\"abort\", onAbort);\n    };\n    return new ReadableStream({\n        start (controller) {\n            unsub = observable$1.subscribe({\n                next (data) {\n                    controller.enqueue({\n                        ok: true,\n                        value: data\n                    });\n                },\n                error (error) {\n                    controller.enqueue({\n                        ok: false,\n                        error\n                    });\n                    controller.close();\n                },\n                complete () {\n                    controller.close();\n                }\n            });\n            if (signal.aborted) onAbort();\n            else signal.addEventListener(\"abort\", onAbort, {\n                once: true\n            });\n        },\n        cancel () {\n            onAbort();\n        }\n    });\n}\n/** @internal */ function observableToAsyncIterable(observable$1, signal) {\n    const stream = observableToReadableStream(observable$1, signal);\n    const reader = stream.getReader();\n    const iterator = {\n        async next () {\n            const value = await reader.read();\n            if (value.done) return {\n                value: void 0,\n                done: true\n            };\n            const { value: result } = value;\n            if (!result.ok) throw result.error;\n            return {\n                value: result.value,\n                done: false\n            };\n        },\n        async return () {\n            await reader.cancel();\n            return {\n                value: void 0,\n                done: true\n            };\n        }\n    };\n    return {\n        [Symbol.asyncIterator] () {\n            return iterator;\n        }\n    };\n}\n//#endregion\n //# sourceMappingURL=observable-B1orLHHI.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-B1orLHHI.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-DPbYgJDD.mjs":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-DPbYgJDD.mjs ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Unpromise: () => (/* binding */ Unpromise),\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __toESM: () => (/* binding */ __toESM),\n/* harmony export */   createDeferred: () => (/* binding */ createDeferred),\n/* harmony export */   getRequestInfo: () => (/* binding */ getRequestInfo),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   iteratorResource: () => (/* binding */ iteratorResource),\n/* harmony export */   jsonlStreamConsumer: () => (/* binding */ jsonlStreamConsumer),\n/* harmony export */   jsonlStreamProducer: () => (/* binding */ jsonlStreamProducer),\n/* harmony export */   makeAsyncResource: () => (/* binding */ makeAsyncResource),\n/* harmony export */   makeResource: () => (/* binding */ makeResource),\n/* harmony export */   parseConnectionParamsFromString: () => (/* binding */ parseConnectionParamsFromString),\n/* harmony export */   parseConnectionParamsFromUnknown: () => (/* binding */ parseConnectionParamsFromUnknown),\n/* harmony export */   require_usingCtx: () => (/* binding */ require_usingCtx),\n/* harmony export */   resolveResponse: () => (/* binding */ resolveResponse),\n/* harmony export */   sseHeaders: () => (/* binding */ sseHeaders),\n/* harmony export */   sseStreamConsumer: () => (/* binding */ sseStreamConsumer),\n/* harmony export */   sseStreamProducer: () => (/* binding */ sseStreamProducer),\n/* harmony export */   takeWithGrace: () => (/* binding */ takeWithGrace),\n/* harmony export */   throwAbortError: () => (/* binding */ throwAbortError),\n/* harmony export */   withMaxDuration: () => (/* binding */ withMaxDuration)\n/* harmony export */ });\n/* harmony import */ var _getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getErrorShape-DyYil4aT.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-DyYil4aT.mjs\");\n/* harmony import */ var _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracked-GEWPoL0C.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-GEWPoL0C.mjs\");\n/* harmony import */ var _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-BHZJcBRv.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs\");\n/* harmony import */ var _observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./observable-B1orLHHI.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/observable-B1orLHHI.mjs\");\n\n\n\n\n//#region rolldown:runtime\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod)=>function() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") for(var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++){\n        key = keys[i];\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ((k)=>from[k]).bind(null, key),\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n//#endregion\n//#region src/unstable-core-do-not-import/http/parseConnectionParams.ts\nfunction parseConnectionParamsFromUnknown(parsed) {\n    try {\n        if (parsed === null) return null;\n        if (!(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(parsed)) throw new Error(\"Expected object\");\n        const nonStringValues = Object.entries(parsed).filter(([_key, value])=>typeof value !== \"string\");\n        if (nonStringValues.length > 0) throw new Error(`Expected connectionParams to be string values. Got ${nonStringValues.map(([key, value])=>`${key}: ${typeof value}`).join(\", \")}`);\n        return parsed;\n    } catch (cause) {\n        throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"PARSE_ERROR\",\n            message: \"Invalid connection params shape\",\n            cause\n        });\n    }\n}\nfunction parseConnectionParamsFromString(str) {\n    let parsed;\n    try {\n        parsed = JSON.parse(str);\n    } catch (cause) {\n        throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"PARSE_ERROR\",\n            message: \"Not JSON-parsable query params\",\n            cause\n        });\n    }\n    return parseConnectionParamsFromUnknown(parsed);\n}\n//#endregion\n//#region src/unstable-core-do-not-import/http/contentType.ts\n/**\n* Memoize a function that takes no arguments\n* @internal\n*/ function memo(fn) {\n    let promise = null;\n    const sym = Symbol.for(\"@trpc/server/http/memo\");\n    let value = sym;\n    return {\n        read: async ()=>{\n            if (value !== sym) return value;\n            promise ??= fn().catch((cause)=>{\n                if (cause instanceof _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError) throw cause;\n                throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"BAD_REQUEST\",\n                    message: cause instanceof Error ? cause.message : \"Invalid input\",\n                    cause\n                });\n            });\n            value = await promise;\n            promise = null;\n            return value;\n        },\n        result: ()=>{\n            return value !== sym ? value : void 0;\n        }\n    };\n}\nconst jsonContentTypeHandler = {\n    isMatch (req) {\n        return !!req.headers.get(\"content-type\")?.startsWith(\"application/json\");\n    },\n    async parse (opts) {\n        const { req } = opts;\n        const isBatchCall = opts.searchParams.get(\"batch\") === \"1\";\n        const paths = isBatchCall ? opts.path.split(\",\") : [\n            opts.path\n        ];\n        const getInputs = memo(async ()=>{\n            let inputs = void 0;\n            if (req.method === \"GET\") {\n                const queryInput = opts.searchParams.get(\"input\");\n                if (queryInput) inputs = JSON.parse(queryInput);\n            } else inputs = await req.json();\n            if (inputs === void 0) return {};\n            if (!isBatchCall) return {\n                0: opts.router._def._config.transformer.input.deserialize(inputs)\n            };\n            if (!(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(inputs)) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                code: \"BAD_REQUEST\",\n                message: '\"input\" needs to be an object when doing a batch call'\n            });\n            const acc = {};\n            for (const index of paths.keys()){\n                const input = inputs[index];\n                if (input !== void 0) acc[index] = opts.router._def._config.transformer.input.deserialize(input);\n            }\n            return acc;\n        });\n        const calls = await Promise.all(paths.map(async (path, index)=>{\n            const procedure = await (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, path);\n            return {\n                path,\n                procedure,\n                getRawInput: async ()=>{\n                    const inputs = await getInputs.read();\n                    let input = inputs[index];\n                    if (procedure?._def.type === \"subscription\") {\n                        const lastEventId = opts.headers.get(\"last-event-id\") ?? opts.searchParams.get(\"lastEventId\") ?? opts.searchParams.get(\"Last-Event-Id\");\n                        if (lastEventId) if ((0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(input)) input = {\n                            ...input,\n                            lastEventId\n                        };\n                        else input ??= {\n                            lastEventId\n                        };\n                    }\n                    return input;\n                },\n                result: ()=>{\n                    return getInputs.result()?.[index];\n                }\n            };\n        }));\n        const types = new Set(calls.map((call)=>call.procedure?._def.type).filter(Boolean));\n        /* istanbul ignore if -- @preserve */ if (types.size > 1) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"BAD_REQUEST\",\n            message: `Cannot mix procedure types in call: ${Array.from(types).join(\", \")}`\n        });\n        const type = types.values().next().value ?? \"unknown\";\n        const connectionParamsStr = opts.searchParams.get(\"connectionParams\");\n        const info = {\n            isBatchCall,\n            accept: req.headers.get(\"trpc-accept\"),\n            calls,\n            type,\n            connectionParams: connectionParamsStr === null ? null : parseConnectionParamsFromString(connectionParamsStr),\n            signal: req.signal,\n            url: opts.url\n        };\n        return info;\n    }\n};\nconst formDataContentTypeHandler = {\n    isMatch (req) {\n        return !!req.headers.get(\"content-type\")?.startsWith(\"multipart/form-data\");\n    },\n    async parse (opts) {\n        const { req } = opts;\n        if (req.method !== \"POST\") throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"METHOD_NOT_SUPPORTED\",\n            message: \"Only POST requests are supported for multipart/form-data requests\"\n        });\n        const getInputs = memo(async ()=>{\n            const fd = await req.formData();\n            return fd;\n        });\n        const procedure = await (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, opts.path);\n        return {\n            accept: null,\n            calls: [\n                {\n                    path: opts.path,\n                    getRawInput: getInputs.read,\n                    result: getInputs.result,\n                    procedure\n                }\n            ],\n            isBatchCall: false,\n            type: \"mutation\",\n            connectionParams: null,\n            signal: req.signal,\n            url: opts.url\n        };\n    }\n};\nconst octetStreamContentTypeHandler = {\n    isMatch (req) {\n        return !!req.headers.get(\"content-type\")?.startsWith(\"application/octet-stream\");\n    },\n    async parse (opts) {\n        const { req } = opts;\n        if (req.method !== \"POST\") throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"METHOD_NOT_SUPPORTED\",\n            message: \"Only POST requests are supported for application/octet-stream requests\"\n        });\n        const getInputs = memo(async ()=>{\n            return req.body;\n        });\n        return {\n            calls: [\n                {\n                    path: opts.path,\n                    getRawInput: getInputs.read,\n                    result: getInputs.result,\n                    procedure: await (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, opts.path)\n                }\n            ],\n            isBatchCall: false,\n            accept: null,\n            type: \"mutation\",\n            connectionParams: null,\n            signal: req.signal,\n            url: opts.url\n        };\n    }\n};\nconst handlers = [\n    jsonContentTypeHandler,\n    formDataContentTypeHandler,\n    octetStreamContentTypeHandler\n];\nfunction getContentTypeHandler(req) {\n    const handler = handlers.find((handler$1)=>handler$1.isMatch(req));\n    if (handler) return handler;\n    if (!handler && req.method === \"GET\") return jsonContentTypeHandler;\n    throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n        code: \"UNSUPPORTED_MEDIA_TYPE\",\n        message: req.headers.has(\"content-type\") ? `Unsupported content-type \"${req.headers.get(\"content-type\")}` : \"Missing content-type header\"\n    });\n}\nasync function getRequestInfo(opts) {\n    const handler = getContentTypeHandler(opts.req);\n    return await handler.parse(opts);\n}\n//#endregion\n//#region src/unstable-core-do-not-import/http/abortError.ts\nfunction isAbortError(error) {\n    return (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(error) && error[\"name\"] === \"AbortError\";\n}\nfunction throwAbortError(message = \"AbortError\") {\n    throw new DOMException(message, \"AbortError\");\n}\n//#endregion\n//#region src/vendor/unpromise/unpromise.ts\n/** Memory safe (weakmapped) cache of the ProxyPromise for each Promise,\n* which is retained for the lifetime of the original Promise.\n*/ const subscribableCache = /* @__PURE__ */ new WeakMap();\n/** A NOOP function allowing a consistent interface for settled\n* SubscribedPromises (settled promises are not subscribed - they resolve\n* immediately). */ const NOOP = ()=>{};\nlet prop;\n/**\n* Every `Promise<T>` can be shadowed by a single `ProxyPromise<T>`. It is\n* created once, cached and reused throughout the lifetime of the Promise. Get a\n* Promise's ProxyPromise using `Unpromise.proxy(promise)`.\n*\n* The `ProxyPromise<T>` attaches handlers to the original `Promise<T>`\n* `.then()` and `.catch()` just once. Promises derived from it use a\n* subscription- (and unsubscription-) based mechanism that monitors these\n* handlers.\n*\n* Every time you call `.subscribe()`, `.then()` `.catch()` or `.finally()` on a\n* `ProxyPromise<T>` it returns a `SubscribedPromise<T>` having an additional\n* `unsubscribe()` method. Calling `unsubscribe()` detaches reference chains\n* from the original, potentially long-lived Promise, eliminating memory leaks.\n*\n* This approach can eliminate the memory leaks that otherwise come about from\n* repeated `race()` or `any()` calls invoking `.then()` and `.catch()` multiple\n* times on the same long-lived native Promise (subscriptions which can never be\n* cleaned up).\n*\n* `Unpromise.race(promises)` is a reference implementation of `Promise.race`\n* avoiding memory leaks when using long-lived unsettled Promises.\n*\n* `Unpromise.any(promises)` is a reference implementation of `Promise.any`\n* avoiding memory leaks when using long-lived unsettled Promises.\n*\n* `Unpromise.resolve(promise)` returns an ephemeral `SubscribedPromise<T>` for\n* any given `Promise<T>` facilitating arbitrary async/await patterns. Behind\n* the scenes, `resolve` is implemented simply as\n* `Unpromise.proxy(promise).subscribe()`. Don't forget to call `.unsubscribe()`\n* to tidy up!\n*\n*/ var Unpromise = class Unpromise {\n    static{\n        prop = Symbol.toStringTag;\n    }\n    constructor(arg){\n        /** Promises expecting eventual settlement (unless unsubscribed first). This list is deleted\n\t* after the original promise settles - no further notifications will be issued. */ this.subscribers = [];\n        /** The Promise's settlement (recorded when it fulfils or rejects). This is consulted when\n\t* calling .subscribe() .then() .catch() .finally() to see if an immediately-resolving Promise\n\t* can be returned, and therefore subscription can be bypassed. */ this.settlement = null;\n        /** TOSTRING SUPPORT */ this[prop] = \"Unpromise\";\n        if (typeof arg === \"function\") this.promise = new Promise(arg);\n        else this.promise = arg;\n        const thenReturn = this.promise.then((value)=>{\n            const { subscribers } = this;\n            this.subscribers = null;\n            this.settlement = {\n                status: \"fulfilled\",\n                value\n            };\n            subscribers?.forEach(({ resolve })=>{\n                resolve(value);\n            });\n        });\n        if (\"catch\" in thenReturn) thenReturn.catch((reason)=>{\n            const { subscribers } = this;\n            this.subscribers = null;\n            this.settlement = {\n                status: \"rejected\",\n                reason\n            };\n            subscribers?.forEach(({ reject })=>{\n                reject(reason);\n            });\n        });\n    }\n    /** Create a promise that mitigates uncontrolled subscription to a long-lived\n\t* Promise via .then() and .catch() - otherwise a source of memory leaks.\n\t*\n\t* The returned promise has an `unsubscribe()` method which can be called when\n\t* the Promise is no longer being tracked by application logic, and which\n\t* ensures that there is no reference chain from the original promise to the\n\t* new one, and therefore no memory leak.\n\t*\n\t* If original promise has not yet settled, this adds a new unique promise\n\t* that listens to then/catch events, along with an `unsubscribe()` method to\n\t* detach it.\n\t*\n\t* If original promise has settled, then creates a new Promise.resolve() or\n\t* Promise.reject() and provided unsubscribe is a noop.\n\t*\n\t* If you call `unsubscribe()` before the returned Promise has settled, it\n\t* will never settle.\n\t*/ subscribe() {\n        let promise;\n        let unsubscribe;\n        const { settlement } = this;\n        if (settlement === null) {\n            if (this.subscribers === null) throw new Error(\"Unpromise settled but still has subscribers\");\n            const subscriber = withResolvers();\n            this.subscribers = listWithMember(this.subscribers, subscriber);\n            promise = subscriber.promise;\n            unsubscribe = ()=>{\n                if (this.subscribers !== null) this.subscribers = listWithoutMember(this.subscribers, subscriber);\n            };\n        } else {\n            const { status } = settlement;\n            if (status === \"fulfilled\") promise = Promise.resolve(settlement.value);\n            else promise = Promise.reject(settlement.reason);\n            unsubscribe = NOOP;\n        }\n        return Object.assign(promise, {\n            unsubscribe\n        });\n    }\n    /** STANDARD PROMISE METHODS (but returning a SubscribedPromise) */ then(onfulfilled, onrejected) {\n        const subscribed = this.subscribe();\n        const { unsubscribe } = subscribed;\n        return Object.assign(subscribed.then(onfulfilled, onrejected), {\n            unsubscribe\n        });\n    }\n    catch(onrejected) {\n        const subscribed = this.subscribe();\n        const { unsubscribe } = subscribed;\n        return Object.assign(subscribed.catch(onrejected), {\n            unsubscribe\n        });\n    }\n    finally(onfinally) {\n        const subscribed = this.subscribe();\n        const { unsubscribe } = subscribed;\n        return Object.assign(subscribed.finally(onfinally), {\n            unsubscribe\n        });\n    }\n    /** Unpromise STATIC METHODS */ /** Create or Retrieve the proxy Unpromise (a re-used Unpromise for the VM lifetime\n\t* of the provided Promise reference) */ static proxy(promise) {\n        const cached = Unpromise.getSubscribablePromise(promise);\n        return typeof cached !== \"undefined\" ? cached : Unpromise.createSubscribablePromise(promise);\n    }\n    /** Create and store an Unpromise keyed by an original Promise. */ static createSubscribablePromise(promise) {\n        const created = new Unpromise(promise);\n        subscribableCache.set(promise, created);\n        subscribableCache.set(created, created);\n        return created;\n    }\n    /** Retrieve a previously-created Unpromise keyed by an original Promise. */ static getSubscribablePromise(promise) {\n        return subscribableCache.get(promise);\n    }\n    /** Promise STATIC METHODS */ /** Lookup the Unpromise for this promise, and derive a SubscribedPromise from\n\t* it (that can be later unsubscribed to eliminate Memory leaks) */ static resolve(value) {\n        const promise = typeof value === \"object\" && value !== null && \"then\" in value && typeof value.then === \"function\" ? value : Promise.resolve(value);\n        return Unpromise.proxy(promise).subscribe();\n    }\n    static async any(values) {\n        const valuesArray = Array.isArray(values) ? values : [\n            ...values\n        ];\n        const subscribedPromises = valuesArray.map(Unpromise.resolve);\n        try {\n            return await Promise.any(subscribedPromises);\n        } finally{\n            subscribedPromises.forEach(({ unsubscribe })=>{\n                unsubscribe();\n            });\n        }\n    }\n    static async race(values) {\n        const valuesArray = Array.isArray(values) ? values : [\n            ...values\n        ];\n        const subscribedPromises = valuesArray.map(Unpromise.resolve);\n        try {\n            return await Promise.race(subscribedPromises);\n        } finally{\n            subscribedPromises.forEach(({ unsubscribe })=>{\n                unsubscribe();\n            });\n        }\n    }\n    /** Create a race of SubscribedPromises that will fulfil to a single winning\n\t* Promise (in a 1-Tuple). Eliminates memory leaks from long-lived promises\n\t* accumulating .then() and .catch() subscribers. Allows simple logic to\n\t* consume the result, like...\n\t* ```ts\n\t* const [ winner ] = await Unpromise.race([ promiseA, promiseB ]);\n\t* if(winner === promiseB){\n\t*   const result = await promiseB;\n\t*   // do the thing\n\t* }\n\t* ```\n\t* */ static async raceReferences(promises) {\n        const selfPromises = promises.map(resolveSelfTuple);\n        try {\n            return await Promise.race(selfPromises);\n        } finally{\n            for (const promise of selfPromises)promise.unsubscribe();\n        }\n    }\n};\n/** Promises a 1-tuple containing the original promise when it resolves. Allows\n* awaiting the eventual Promise ***reference*** (easy to destructure and\n* exactly compare with ===). Avoids resolving to the Promise ***value*** (which\n* may be ambiguous and therefore hard to identify as the winner of a race).\n* You can call unsubscribe on the Promise to mitigate memory leaks.\n* */ function resolveSelfTuple(promise) {\n    return Unpromise.proxy(promise).then(()=>[\n            promise\n        ]);\n}\n/** VENDORED (Future) PROMISE UTILITIES */ /** Reference implementation of https://github.com/tc39/proposal-promise-with-resolvers */ function withResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject)=>{\n        resolve = _resolve;\n        reject = _reject;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n/** IMMUTABLE LIST OPERATIONS */ function listWithMember(arr, member) {\n    return [\n        ...arr,\n        member\n    ];\n}\nfunction listWithoutIndex(arr, index) {\n    return [\n        ...arr.slice(0, index),\n        ...arr.slice(index + 1)\n    ];\n}\nfunction listWithoutMember(arr, member) {\n    const index = arr.indexOf(member);\n    if (index !== -1) return listWithoutIndex(arr, index);\n    return arr;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/disposable.ts\nSymbol.dispose ??= Symbol();\nSymbol.asyncDispose ??= Symbol();\n/**\n* Takes a value and a dispose function and returns a new object that implements the Disposable interface.\n* The returned object is the original value augmented with a Symbol.dispose method.\n* @param thing The value to make disposable\n* @param dispose Function to call when disposing the resource\n* @returns The original value with Symbol.dispose method added\n*/ function makeResource(thing, dispose) {\n    const it = thing;\n    const existing = it[Symbol.dispose];\n    it[Symbol.dispose] = ()=>{\n        dispose();\n        existing?.();\n    };\n    return it;\n}\n/**\n* Takes a value and an async dispose function and returns a new object that implements the AsyncDisposable interface.\n* The returned object is the original value augmented with a Symbol.asyncDispose method.\n* @param thing The value to make async disposable\n* @param dispose Async function to call when disposing the resource\n* @returns The original value with Symbol.asyncDispose method added\n*/ function makeAsyncResource(thing, dispose) {\n    const it = thing;\n    const existing = it[Symbol.asyncDispose];\n    it[Symbol.asyncDispose] = async ()=>{\n        await dispose();\n        await existing?.();\n    };\n    return it;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/timerResource.ts\nconst disposablePromiseTimerResult = Symbol();\nfunction timerResource(ms) {\n    let timer = null;\n    return makeResource({\n        start () {\n            if (timer) throw new Error(\"Timer already started\");\n            const promise = new Promise((resolve)=>{\n                timer = setTimeout(()=>resolve(disposablePromiseTimerResult), ms);\n            });\n            return promise;\n        }\n    }, ()=>{\n        if (timer) clearTimeout(timer);\n    });\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js\nvar require_usingCtx = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js\" (exports, module) {\n        function _usingCtx() {\n            var r = \"function\" == typeof SuppressedError ? SuppressedError : function(r$1, e$1) {\n                var n$1 = Error();\n                return n$1.name = \"SuppressedError\", n$1.error = r$1, n$1.suppressed = e$1, n$1;\n            }, e = {}, n = [];\n            function using(r$1, e$1) {\n                if (null != e$1) {\n                    if (Object(e$1) !== e$1) throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");\n                    if (r$1) var o = e$1[Symbol.asyncDispose || Symbol[\"for\"](\"Symbol.asyncDispose\")];\n                    if (void 0 === o && (o = e$1[Symbol.dispose || Symbol[\"for\"](\"Symbol.dispose\")], r$1)) var t = o;\n                    if (\"function\" != typeof o) throw new TypeError(\"Object is not disposable.\");\n                    t && (o = function o$1() {\n                        try {\n                            t.call(e$1);\n                        } catch (r$2) {\n                            return Promise.reject(r$2);\n                        }\n                    }), n.push({\n                        v: e$1,\n                        d: o,\n                        a: r$1\n                    });\n                } else r$1 && n.push({\n                    d: e$1,\n                    a: r$1\n                });\n                return e$1;\n            }\n            return {\n                e,\n                u: using.bind(null, !1),\n                a: using.bind(null, !0),\n                d: function d() {\n                    var o, t = this.e, s = 0;\n                    function next() {\n                        for(; o = n.pop();)try {\n                            if (!o.a && 1 === s) return s = 0, n.push(o), Promise.resolve().then(next);\n                            if (o.d) {\n                                var r$1 = o.d.call(o.v);\n                                if (o.a) return s |= 2, Promise.resolve(r$1).then(next, err);\n                            } else s |= 1;\n                        } catch (r$2) {\n                            return err(r$2);\n                        }\n                        if (1 === s) return t !== e ? Promise.reject(t) : Promise.resolve();\n                        if (t !== e) throw t;\n                    }\n                    function err(n$1) {\n                        return t = t !== e ? new r(n$1, t) : n$1, next();\n                    }\n                    return next();\n                }\n            };\n        }\n        module.exports = _usingCtx, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/asyncIterable.ts\nvar import_usingCtx$4 = __toESM(require_usingCtx(), 1);\nfunction iteratorResource(iterable) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    if (iterator[Symbol.asyncDispose]) return iterator;\n    return makeAsyncResource(iterator, async ()=>{\n        await iterator.return?.();\n    });\n}\n/**\n* Derives a new {@link AsyncGenerator} based on {@link iterable}, that automatically aborts after the specified duration.\n*/ async function* withMaxDuration(iterable, opts) {\n    try {\n        var _usingCtx$1 = (0, import_usingCtx$4.default)();\n        const iterator = _usingCtx$1.a(iteratorResource(iterable));\n        const timer = _usingCtx$1.u(timerResource(opts.maxDurationMs));\n        const timerPromise = timer.start();\n        let result;\n        while(true){\n            result = await Unpromise.race([\n                iterator.next(),\n                timerPromise\n            ]);\n            if (result === disposablePromiseTimerResult) throwAbortError();\n            if (result.done) return result;\n            yield result.value;\n            result = null;\n        }\n    } catch (_) {\n        _usingCtx$1.e = _;\n    } finally{\n        await _usingCtx$1.d();\n    }\n}\n/**\n* Derives a new {@link AsyncGenerator} based of {@link iterable}, that yields its first\n* {@link count} values. Then, a grace period of {@link gracePeriodMs} is started in which further\n* values may still come through. After this period, the generator aborts.\n*/ async function* takeWithGrace(iterable, opts) {\n    try {\n        var _usingCtx3 = (0, import_usingCtx$4.default)();\n        const iterator = _usingCtx3.a(iteratorResource(iterable));\n        let result;\n        const timer = _usingCtx3.u(timerResource(opts.gracePeriodMs));\n        let count = opts.count;\n        let timerPromise = new Promise(()=>{});\n        while(true){\n            result = await Unpromise.race([\n                iterator.next(),\n                timerPromise\n            ]);\n            if (result === disposablePromiseTimerResult) throwAbortError();\n            if (result.done) return result.value;\n            yield result.value;\n            if (--count === 0) timerPromise = timer.start();\n            result = null;\n        }\n    } catch (_) {\n        _usingCtx3.e = _;\n    } finally{\n        await _usingCtx3.d();\n    }\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/createDeferred.ts\nfunction createDeferred() {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/mergeAsyncIterables.ts\nvar import_usingCtx$3 = __toESM(require_usingCtx(), 1);\nfunction createManagedIterator(iterable, onResult) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    let state = \"idle\";\n    function cleanup() {\n        state = \"done\";\n        onResult = ()=>{};\n    }\n    function pull() {\n        if (state !== \"idle\") return;\n        state = \"pending\";\n        const next = iterator.next();\n        next.then((result)=>{\n            if (result.done) {\n                state = \"done\";\n                onResult({\n                    status: \"return\",\n                    value: result.value\n                });\n                cleanup();\n                return;\n            }\n            state = \"idle\";\n            onResult({\n                status: \"yield\",\n                value: result.value\n            });\n        }).catch((cause)=>{\n            onResult({\n                status: \"error\",\n                error: cause\n            });\n            cleanup();\n        });\n    }\n    return {\n        pull,\n        destroy: async ()=>{\n            cleanup();\n            await iterator.return?.();\n        }\n    };\n}\n/**\n* Creates a new async iterable that merges multiple async iterables into a single stream.\n* Values from the input iterables are yielded in the order they resolve, similar to Promise.race().\n*\n* New iterables can be added dynamically using the returned {@link MergedAsyncIterables.add} method, even after iteration has started.\n*\n* If any of the input iterables throws an error, that error will be propagated through the merged stream.\n* Other iterables will not continue to be processed.\n*\n* @template TYield The type of values yielded by the input iterables\n*/ function mergeAsyncIterables() {\n    let state = \"idle\";\n    let flushSignal = createDeferred();\n    /**\n\t* used while {@link state} is `idle`\n\t*/ const iterables = [];\n    /**\n\t* used while {@link state} is `pending`\n\t*/ const iterators = /* @__PURE__ */ new Set();\n    const buffer = [];\n    function initIterable(iterable) {\n        if (state !== \"pending\") return;\n        const iterator = createManagedIterator(iterable, (result)=>{\n            if (state !== \"pending\") return;\n            switch(result.status){\n                case \"yield\":\n                    buffer.push([\n                        iterator,\n                        result\n                    ]);\n                    break;\n                case \"return\":\n                    iterators.delete(iterator);\n                    break;\n                case \"error\":\n                    buffer.push([\n                        iterator,\n                        result\n                    ]);\n                    iterators.delete(iterator);\n                    break;\n            }\n            flushSignal.resolve();\n        });\n        iterators.add(iterator);\n        iterator.pull();\n    }\n    return {\n        add (iterable) {\n            switch(state){\n                case \"idle\":\n                    iterables.push(iterable);\n                    break;\n                case \"pending\":\n                    initIterable(iterable);\n                    break;\n                case \"done\":\n                    break;\n            }\n        },\n        async *[Symbol.asyncIterator] () {\n            try {\n                var _usingCtx$1 = (0, import_usingCtx$3.default)();\n                if (state !== \"idle\") throw new Error(\"Cannot iterate twice\");\n                state = \"pending\";\n                const _finally = _usingCtx$1.a(makeAsyncResource({}, async ()=>{\n                    state = \"done\";\n                    const errors = [];\n                    await Promise.all(Array.from(iterators.values()).map(async (it)=>{\n                        try {\n                            await it.destroy();\n                        } catch (cause) {\n                            errors.push(cause);\n                        }\n                    }));\n                    buffer.length = 0;\n                    iterators.clear();\n                    flushSignal.resolve();\n                    if (errors.length > 0) throw new AggregateError(errors);\n                }));\n                while(iterables.length > 0)initIterable(iterables.shift());\n                while(iterators.size > 0){\n                    await flushSignal.promise;\n                    while(buffer.length > 0){\n                        const [iterator, result] = buffer.shift();\n                        switch(result.status){\n                            case \"yield\":\n                                yield result.value;\n                                iterator.pull();\n                                break;\n                            case \"error\":\n                                throw result.error;\n                        }\n                    }\n                    flushSignal = createDeferred();\n                }\n            } catch (_) {\n                _usingCtx$1.e = _;\n            } finally{\n                await _usingCtx$1.d();\n            }\n        }\n    };\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/readableStreamFrom.ts\n/**\n* Creates a ReadableStream from an AsyncIterable.\n*\n* @param iterable - The source AsyncIterable to stream from\n* @returns A ReadableStream that yields values from the AsyncIterable\n*/ function readableStreamFrom(iterable) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    return new ReadableStream({\n        async cancel () {\n            await iterator.return?.();\n        },\n        async pull (controller) {\n            const result = await iterator.next();\n            if (result.done) {\n                controller.close();\n                return;\n            }\n            controller.enqueue(result.value);\n        }\n    });\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/withPing.ts\nvar import_usingCtx$2 = __toESM(require_usingCtx(), 1);\nconst PING_SYM = Symbol(\"ping\");\n/**\n* Derives a new {@link AsyncGenerator} based of {@link iterable}, that yields {@link PING_SYM}\n* whenever no value has been yielded for {@link pingIntervalMs}.\n*/ async function* withPing(iterable, pingIntervalMs) {\n    try {\n        var _usingCtx$1 = (0, import_usingCtx$2.default)();\n        const iterator = _usingCtx$1.a(iteratorResource(iterable));\n        let result;\n        let nextPromise = iterator.next();\n        while(true)try {\n            var _usingCtx3 = (0, import_usingCtx$2.default)();\n            const pingPromise = _usingCtx3.u(timerResource(pingIntervalMs));\n            result = await Unpromise.race([\n                nextPromise,\n                pingPromise.start()\n            ]);\n            if (result === disposablePromiseTimerResult) {\n                yield PING_SYM;\n                continue;\n            }\n            if (result.done) return result.value;\n            nextPromise = iterator.next();\n            yield result.value;\n            result = null;\n        } catch (_) {\n            _usingCtx3.e = _;\n        } finally{\n            _usingCtx3.d();\n        }\n    } catch (_) {\n        _usingCtx$1.e = _;\n    } finally{\n        await _usingCtx$1.d();\n    }\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/jsonl.ts\nvar import_usingCtx$1 = __toESM(require_usingCtx(), 1);\nfunction isPlainObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\nconst CHUNK_VALUE_TYPE_PROMISE = 0;\nconst CHUNK_VALUE_TYPE_ASYNC_ITERABLE = 1;\nconst PROMISE_STATUS_FULFILLED = 0;\nconst PROMISE_STATUS_REJECTED = 1;\nconst ASYNC_ITERABLE_STATUS_RETURN = 0;\nconst ASYNC_ITERABLE_STATUS_YIELD = 1;\nconst ASYNC_ITERABLE_STATUS_ERROR = 2;\nfunction isPromise(value) {\n    return ((0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) || (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value)) && typeof value?.[\"then\"] === \"function\" && typeof value?.[\"catch\"] === \"function\";\n}\nvar MaxDepthError = class extends Error {\n    constructor(path){\n        super(\"Max depth reached at path: \" + path.join(\".\"));\n        this.path = path;\n    }\n};\nasync function* createBatchStreamProducer(opts) {\n    const { data } = opts;\n    let counter = 0;\n    const placeholder = 0;\n    const mergedIterables = mergeAsyncIterables();\n    function registerAsync(callback) {\n        const idx = counter++;\n        const iterable$1 = callback(idx);\n        mergedIterables.add(iterable$1);\n        return idx;\n    }\n    function encodePromise(promise, path) {\n        return registerAsync(async function*(idx) {\n            const error = checkMaxDepth(path);\n            if (error) {\n                promise.catch((cause)=>{\n                    opts.onError?.({\n                        error: cause,\n                        path\n                    });\n                });\n                promise = Promise.reject(error);\n            }\n            try {\n                const next = await promise;\n                yield [\n                    idx,\n                    PROMISE_STATUS_FULFILLED,\n                    encode(next, path)\n                ];\n            } catch (cause) {\n                opts.onError?.({\n                    error: cause,\n                    path\n                });\n                yield [\n                    idx,\n                    PROMISE_STATUS_REJECTED,\n                    opts.formatError?.({\n                        error: cause,\n                        path\n                    })\n                ];\n            }\n        });\n    }\n    function encodeAsyncIterable(iterable$1, path) {\n        return registerAsync(async function*(idx) {\n            try {\n                var _usingCtx$1 = (0, import_usingCtx$1.default)();\n                const error = checkMaxDepth(path);\n                if (error) throw error;\n                const iterator = _usingCtx$1.a(iteratorResource(iterable$1));\n                try {\n                    while(true){\n                        const next = await iterator.next();\n                        if (next.done) {\n                            yield [\n                                idx,\n                                ASYNC_ITERABLE_STATUS_RETURN,\n                                encode(next.value, path)\n                            ];\n                            break;\n                        }\n                        yield [\n                            idx,\n                            ASYNC_ITERABLE_STATUS_YIELD,\n                            encode(next.value, path)\n                        ];\n                    }\n                } catch (cause) {\n                    opts.onError?.({\n                        error: cause,\n                        path\n                    });\n                    yield [\n                        idx,\n                        ASYNC_ITERABLE_STATUS_ERROR,\n                        opts.formatError?.({\n                            error: cause,\n                            path\n                        })\n                    ];\n                }\n            } catch (_) {\n                _usingCtx$1.e = _;\n            } finally{\n                await _usingCtx$1.d();\n            }\n        });\n    }\n    function checkMaxDepth(path) {\n        if (opts.maxDepth && path.length > opts.maxDepth) return new MaxDepthError(path);\n        return null;\n    }\n    function encodeAsync(value, path) {\n        if (isPromise(value)) return [\n            CHUNK_VALUE_TYPE_PROMISE,\n            encodePromise(value, path)\n        ];\n        if ((0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(value)) {\n            if (opts.maxDepth && path.length >= opts.maxDepth) throw new Error(\"Max depth reached\");\n            return [\n                CHUNK_VALUE_TYPE_ASYNC_ITERABLE,\n                encodeAsyncIterable(value, path)\n            ];\n        }\n        return null;\n    }\n    function encode(value, path) {\n        if (value === void 0) return [\n            []\n        ];\n        const reg = encodeAsync(value, path);\n        if (reg) return [\n            [\n                placeholder\n            ],\n            [\n                null,\n                ...reg\n            ]\n        ];\n        if (!isPlainObject(value)) return [\n            [\n                value\n            ]\n        ];\n        const newObj = {};\n        const asyncValues = [];\n        for (const [key, item] of Object.entries(value)){\n            const transformed = encodeAsync(item, [\n                ...path,\n                key\n            ]);\n            if (!transformed) {\n                newObj[key] = item;\n                continue;\n            }\n            newObj[key] = placeholder;\n            asyncValues.push([\n                key,\n                ...transformed\n            ]);\n        }\n        return [\n            [\n                newObj\n            ],\n            ...asyncValues\n        ];\n    }\n    const newHead = {};\n    for (const [key, item] of Object.entries(data))newHead[key] = encode(item, [\n        key\n    ]);\n    yield newHead;\n    let iterable = mergedIterables;\n    if (opts.pingMs) iterable = withPing(mergedIterables, opts.pingMs);\n    for await (const value of iterable)yield value;\n}\n/**\n* JSON Lines stream producer\n* @see https://jsonlines.org/\n*/ function jsonlStreamProducer(opts) {\n    let stream = readableStreamFrom(createBatchStreamProducer(opts));\n    const { serialize } = opts;\n    if (serialize) stream = stream.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            if (chunk === PING_SYM) controller.enqueue(PING_SYM);\n            else controller.enqueue(serialize(chunk));\n        }\n    }));\n    return stream.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            if (chunk === PING_SYM) controller.enqueue(\" \");\n            else controller.enqueue(JSON.stringify(chunk) + \"\\n\");\n        }\n    })).pipeThrough(new TextEncoderStream());\n}\nvar AsyncError = class extends Error {\n    constructor(data){\n        super(\"Received error from server\");\n        this.data = data;\n    }\n};\nconst nodeJsStreamToReaderEsque = (source)=>{\n    return {\n        getReader () {\n            const stream = new ReadableStream({\n                start (controller) {\n                    source.on(\"data\", (chunk)=>{\n                        controller.enqueue(chunk);\n                    });\n                    source.on(\"end\", ()=>{\n                        controller.close();\n                    });\n                    source.on(\"error\", (error)=>{\n                        controller.error(error);\n                    });\n                }\n            });\n            return stream.getReader();\n        }\n    };\n};\nfunction createLineAccumulator(from) {\n    const reader = \"getReader\" in from ? from.getReader() : nodeJsStreamToReaderEsque(from).getReader();\n    let lineAggregate = \"\";\n    return new ReadableStream({\n        async pull (controller) {\n            const { done, value } = await reader.read();\n            if (done) controller.close();\n            else controller.enqueue(value);\n        },\n        cancel () {\n            return reader.cancel();\n        }\n    }).pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            lineAggregate += chunk;\n            const parts = lineAggregate.split(\"\\n\");\n            lineAggregate = parts.pop() ?? \"\";\n            for (const part of parts)controller.enqueue(part);\n        }\n    }));\n}\nfunction createConsumerStream(from) {\n    const stream = createLineAccumulator(from);\n    let sentHead = false;\n    return stream.pipeThrough(new TransformStream({\n        transform (line, controller) {\n            if (!sentHead) {\n                const head = JSON.parse(line);\n                controller.enqueue(head);\n                sentHead = true;\n            } else {\n                const chunk = JSON.parse(line);\n                controller.enqueue(chunk);\n            }\n        }\n    }));\n}\n/**\n* Creates a handler for managing stream controllers and their lifecycle\n*/ function createStreamsManager(abortController) {\n    const controllerMap = /* @__PURE__ */ new Map();\n    /**\n\t* Checks if there are no pending controllers or deferred promises\n\t*/ function isEmpty() {\n        return Array.from(controllerMap.values()).every((c)=>c.closed);\n    }\n    /**\n\t* Creates a stream controller\n\t*/ function createStreamController() {\n        let originalController;\n        const stream = new ReadableStream({\n            start (controller) {\n                originalController = controller;\n            }\n        });\n        const streamController = {\n            enqueue: (v)=>originalController.enqueue(v),\n            close: ()=>{\n                originalController.close();\n                clear();\n                if (isEmpty()) abortController.abort();\n            },\n            closed: false,\n            getReaderResource: ()=>{\n                const reader = stream.getReader();\n                return makeResource(reader, ()=>{\n                    reader.releaseLock();\n                    streamController.close();\n                });\n            },\n            error: (reason)=>{\n                originalController.error(reason);\n                clear();\n            }\n        };\n        function clear() {\n            Object.assign(streamController, {\n                closed: true,\n                close: ()=>{},\n                enqueue: ()=>{},\n                getReaderResource: null,\n                error: ()=>{}\n            });\n        }\n        return streamController;\n    }\n    /**\n\t* Gets or creates a stream controller\n\t*/ function getOrCreate(chunkId) {\n        let c = controllerMap.get(chunkId);\n        if (!c) {\n            c = createStreamController();\n            controllerMap.set(chunkId, c);\n        }\n        return c;\n    }\n    /**\n\t* Cancels all pending controllers and rejects deferred promises\n\t*/ function cancelAll(reason) {\n        for (const controller of controllerMap.values())controller.error(reason);\n    }\n    return {\n        getOrCreate,\n        isEmpty,\n        cancelAll\n    };\n}\n/**\n* JSON Lines stream consumer\n* @see https://jsonlines.org/\n*/ async function jsonlStreamConsumer(opts) {\n    const { deserialize = (v)=>v } = opts;\n    let source = createConsumerStream(opts.from);\n    if (deserialize) source = source.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(deserialize(chunk));\n        }\n    }));\n    let headDeferred = createDeferred();\n    const streamManager = createStreamsManager(opts.abortController);\n    function decodeChunkDefinition(value) {\n        const [_path, type, chunkId] = value;\n        const controller = streamManager.getOrCreate(chunkId);\n        switch(type){\n            case CHUNK_VALUE_TYPE_PROMISE:\n                return (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async ()=>{\n                    try {\n                        var _usingCtx3 = (0, import_usingCtx$1.default)();\n                        const reader = _usingCtx3.u(controller.getReaderResource());\n                        const { value: value$1 } = await reader.read();\n                        const [_chunkId, status, data] = value$1;\n                        switch(status){\n                            case PROMISE_STATUS_FULFILLED:\n                                return decode(data);\n                            case PROMISE_STATUS_REJECTED:\n                                throw opts.formatError?.({\n                                    error: data\n                                }) ?? new AsyncError(data);\n                        }\n                    } catch (_) {\n                        _usingCtx3.e = _;\n                    } finally{\n                        _usingCtx3.d();\n                    }\n                });\n            case CHUNK_VALUE_TYPE_ASYNC_ITERABLE:\n                return (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async function*() {\n                    try {\n                        var _usingCtx4 = (0, import_usingCtx$1.default)();\n                        const reader = _usingCtx4.u(controller.getReaderResource());\n                        while(true){\n                            const { value: value$1 } = await reader.read();\n                            const [_chunkId, status, data] = value$1;\n                            switch(status){\n                                case ASYNC_ITERABLE_STATUS_YIELD:\n                                    yield decode(data);\n                                    break;\n                                case ASYNC_ITERABLE_STATUS_RETURN:\n                                    return decode(data);\n                                case ASYNC_ITERABLE_STATUS_ERROR:\n                                    throw opts.formatError?.({\n                                        error: data\n                                    }) ?? new AsyncError(data);\n                            }\n                        }\n                    } catch (_) {\n                        _usingCtx4.e = _;\n                    } finally{\n                        _usingCtx4.d();\n                    }\n                });\n        }\n    }\n    function decode(value) {\n        const [[data], ...asyncProps] = value;\n        for (const value$1 of asyncProps){\n            const [key] = value$1;\n            const decoded = decodeChunkDefinition(value$1);\n            if (key === null) return decoded;\n            data[key] = decoded;\n        }\n        return data;\n    }\n    const closeOrAbort = (reason)=>{\n        headDeferred?.reject(reason);\n        streamManager.cancelAll(reason);\n    };\n    source.pipeTo(new WritableStream({\n        write (chunkOrHead) {\n            if (headDeferred) {\n                const head = chunkOrHead;\n                for (const [key, value] of Object.entries(chunkOrHead)){\n                    const parsed = decode(value);\n                    head[key] = parsed;\n                }\n                headDeferred.resolve(head);\n                headDeferred = null;\n                return;\n            }\n            const chunk = chunkOrHead;\n            const [idx] = chunk;\n            const controller = streamManager.getOrCreate(idx);\n            controller.enqueue(chunk);\n        },\n        close: ()=>closeOrAbort(new Error(\"Stream closed\")),\n        abort: closeOrAbort\n    }), {\n        signal: opts.abortController.signal\n    }).catch((error)=>{\n        opts.onError?.({\n            error\n        });\n        closeOrAbort(error);\n    });\n    return [\n        await headDeferred.promise,\n        streamManager\n    ];\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/sse.ts\nvar import_usingCtx = __toESM(require_usingCtx(), 1);\nconst PING_EVENT = \"ping\";\nconst SERIALIZED_ERROR_EVENT = \"serialized-error\";\nconst CONNECTED_EVENT = \"connected\";\nconst RETURN_EVENT = \"return\";\n/**\n*\n* @see https://html.spec.whatwg.org/multipage/server-sent-events.html\n*/ function sseStreamProducer(opts) {\n    const { serialize = _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.identity } = opts;\n    const ping = {\n        enabled: opts.ping?.enabled ?? false,\n        intervalMs: opts.ping?.intervalMs ?? 1e3\n    };\n    const client = opts.client ?? {};\n    if (ping.enabled && client.reconnectAfterInactivityMs && ping.intervalMs > client.reconnectAfterInactivityMs) throw new Error(`Ping interval must be less than client reconnect interval to prevent unnecessary reconnection - ping.intervalMs: ${ping.intervalMs} client.reconnectAfterInactivityMs: ${client.reconnectAfterInactivityMs}`);\n    async function* generator() {\n        yield {\n            event: CONNECTED_EVENT,\n            data: JSON.stringify(client)\n        };\n        let iterable = opts.data;\n        if (opts.emitAndEndImmediately) iterable = takeWithGrace(iterable, {\n            count: 1,\n            gracePeriodMs: 1\n        });\n        if (opts.maxDurationMs && opts.maxDurationMs > 0 && opts.maxDurationMs !== Infinity) iterable = withMaxDuration(iterable, {\n            maxDurationMs: opts.maxDurationMs\n        });\n        if (ping.enabled && ping.intervalMs !== Infinity && ping.intervalMs > 0) iterable = withPing(iterable, ping.intervalMs);\n        let value;\n        let chunk;\n        for await (value of iterable){\n            if (value === PING_SYM) {\n                yield {\n                    event: PING_EVENT,\n                    data: \"\"\n                };\n                continue;\n            }\n            chunk = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.isTrackedEnvelope)(value) ? {\n                id: value[0],\n                data: value[1]\n            } : {\n                data: value\n            };\n            chunk.data = JSON.stringify(serialize(chunk.data));\n            yield chunk;\n            value = null;\n            chunk = null;\n        }\n    }\n    async function* generatorWithErrorHandling() {\n        try {\n            yield* generator();\n            yield {\n                event: RETURN_EVENT,\n                data: \"\"\n            };\n        } catch (cause) {\n            if (isAbortError(cause)) return;\n            const error = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n            const data = opts.formatError?.({\n                error\n            }) ?? null;\n            yield {\n                event: SERIALIZED_ERROR_EVENT,\n                data: JSON.stringify(serialize(data))\n            };\n        }\n    }\n    const stream = readableStreamFrom(generatorWithErrorHandling());\n    return stream.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            if (\"event\" in chunk) controller.enqueue(`event: ${chunk.event}\\n`);\n            if (\"data\" in chunk) controller.enqueue(`data: ${chunk.data}\\n`);\n            if (\"id\" in chunk) controller.enqueue(`id: ${chunk.id}\\n`);\n            if (\"comment\" in chunk) controller.enqueue(`: ${chunk.comment}\\n`);\n            controller.enqueue(\"\\n\\n\");\n        }\n    })).pipeThrough(new TextEncoderStream());\n}\nasync function withTimeout(opts) {\n    try {\n        var _usingCtx$1 = (0, import_usingCtx.default)();\n        const timeoutPromise = _usingCtx$1.u(timerResource(opts.timeoutMs));\n        const res = await Unpromise.race([\n            opts.promise,\n            timeoutPromise.start()\n        ]);\n        if (res === disposablePromiseTimerResult) return await opts.onTimeout();\n        return res;\n    } catch (_) {\n        _usingCtx$1.e = _;\n    } finally{\n        _usingCtx$1.d();\n    }\n}\n/**\n* @see https://html.spec.whatwg.org/multipage/server-sent-events.html\n*/ function sseStreamConsumer(opts) {\n    const { deserialize = (v)=>v } = opts;\n    let clientOptions = {};\n    const signal = opts.signal;\n    let _es = null;\n    const createStream = ()=>new ReadableStream({\n            async start (controller) {\n                const [url, init] = await Promise.all([\n                    opts.url(),\n                    opts.init()\n                ]);\n                const eventSource = _es = new opts.EventSource(url, init);\n                controller.enqueue({\n                    type: \"connecting\",\n                    eventSource: _es,\n                    event: null\n                });\n                eventSource.addEventListener(CONNECTED_EVENT, (_msg)=>{\n                    const msg = _msg;\n                    const options = JSON.parse(msg.data);\n                    clientOptions = options;\n                    controller.enqueue({\n                        type: \"connected\",\n                        options,\n                        eventSource\n                    });\n                });\n                eventSource.addEventListener(SERIALIZED_ERROR_EVENT, (_msg)=>{\n                    const msg = _msg;\n                    controller.enqueue({\n                        type: \"serialized-error\",\n                        error: deserialize(JSON.parse(msg.data)),\n                        eventSource\n                    });\n                });\n                eventSource.addEventListener(PING_EVENT, ()=>{\n                    controller.enqueue({\n                        type: \"ping\",\n                        eventSource\n                    });\n                });\n                eventSource.addEventListener(RETURN_EVENT, ()=>{\n                    eventSource.close();\n                    controller.close();\n                    _es = null;\n                });\n                eventSource.addEventListener(\"error\", (event)=>{\n                    if (eventSource.readyState === eventSource.CLOSED) controller.error(event);\n                    else controller.enqueue({\n                        type: \"connecting\",\n                        eventSource,\n                        event\n                    });\n                });\n                eventSource.addEventListener(\"message\", (_msg)=>{\n                    const msg = _msg;\n                    const chunk = deserialize(JSON.parse(msg.data));\n                    const def = {\n                        data: chunk\n                    };\n                    if (msg.lastEventId) def.id = msg.lastEventId;\n                    controller.enqueue({\n                        type: \"data\",\n                        data: def,\n                        eventSource\n                    });\n                });\n                const onAbort = ()=>{\n                    try {\n                        eventSource.close();\n                        controller.close();\n                    } catch  {}\n                };\n                if (signal.aborted) onAbort();\n                else signal.addEventListener(\"abort\", onAbort);\n            },\n            cancel () {\n                _es?.close();\n            }\n        });\n    const getStreamResource = ()=>{\n        let stream = createStream();\n        let reader = stream.getReader();\n        async function dispose() {\n            await reader.cancel();\n            _es = null;\n        }\n        return makeAsyncResource({\n            read () {\n                return reader.read();\n            },\n            async recreate () {\n                await dispose();\n                stream = createStream();\n                reader = stream.getReader();\n            }\n        }, dispose);\n    };\n    return (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async function*() {\n        try {\n            var _usingCtx3 = (0, import_usingCtx.default)();\n            const stream = _usingCtx3.a(getStreamResource());\n            while(true){\n                let promise = stream.read();\n                const timeoutMs = clientOptions.reconnectAfterInactivityMs;\n                if (timeoutMs) promise = withTimeout({\n                    promise,\n                    timeoutMs,\n                    onTimeout: async ()=>{\n                        const res = {\n                            value: {\n                                type: \"timeout\",\n                                ms: timeoutMs,\n                                eventSource: _es\n                            },\n                            done: false\n                        };\n                        await stream.recreate();\n                        return res;\n                    }\n                });\n                const result = await promise;\n                if (result.done) return result.value;\n                yield result.value;\n            }\n        } catch (_) {\n            _usingCtx3.e = _;\n        } finally{\n            await _usingCtx3.d();\n        }\n    });\n}\nconst sseHeaders = {\n    \"Content-Type\": \"text/event-stream\",\n    \"Cache-Control\": \"no-cache, no-transform\",\n    \"X-Accel-Buffering\": \"no\",\n    Connection: \"keep-alive\"\n};\n//#endregion\n//#region src/unstable-core-do-not-import/http/resolveResponse.ts\nfunction errorToAsyncIterable(err) {\n    return (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async function*() {\n        throw err;\n    });\n}\nconst TYPE_ACCEPTED_METHOD_MAP = {\n    mutation: [\n        \"POST\"\n    ],\n    query: [\n        \"GET\"\n    ],\n    subscription: [\n        \"GET\"\n    ]\n};\nconst TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE = {\n    mutation: [\n        \"POST\"\n    ],\n    query: [\n        \"GET\",\n        \"POST\"\n    ],\n    subscription: [\n        \"GET\",\n        \"POST\"\n    ]\n};\nfunction initResponse(initOpts) {\n    const { ctx, info, responseMeta, untransformedJSON, errors = [], headers } = initOpts;\n    let status = untransformedJSON ? (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getHTTPStatusCode)(untransformedJSON) : 200;\n    const eagerGeneration = !untransformedJSON;\n    const data = eagerGeneration ? [] : Array.isArray(untransformedJSON) ? untransformedJSON : [\n        untransformedJSON\n    ];\n    const meta = responseMeta?.({\n        ctx,\n        info,\n        paths: info?.calls.map((call)=>call.path),\n        data,\n        errors,\n        eagerGeneration,\n        type: info?.calls.find((call)=>call.procedure?._def.type)?.procedure?._def.type ?? \"unknown\"\n    }) ?? {};\n    if (meta.headers) {\n        if (meta.headers instanceof Headers) for (const [key, value] of meta.headers.entries())headers.append(key, value);\n        else /**\n\t\t* @deprecated, delete in v12\n\t\t*/ for (const [key, value] of Object.entries(meta.headers))if (Array.isArray(value)) for (const v of value)headers.append(key, v);\n        else if (typeof value === \"string\") headers.set(key, value);\n    }\n    if (meta.status) status = meta.status;\n    return {\n        status\n    };\n}\nfunction caughtErrorToData(cause, errorOpts) {\n    const { router, req, onError } = errorOpts.opts;\n    const error = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n    onError?.({\n        error,\n        path: errorOpts.path,\n        input: errorOpts.input,\n        ctx: errorOpts.ctx,\n        type: errorOpts.type,\n        req\n    });\n    const untransformedJSON = {\n        error: (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n            config: router._def._config,\n            error,\n            type: errorOpts.type,\n            path: errorOpts.path,\n            input: errorOpts.input,\n            ctx: errorOpts.ctx\n        })\n    };\n    const transformedJSON = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(router._def._config, untransformedJSON);\n    const body = JSON.stringify(transformedJSON);\n    return {\n        error,\n        untransformedJSON,\n        body\n    };\n}\n/**\n* Check if a value is a stream-like object\n* - if it's an async iterable\n* - if it's an object with async iterables or promises\n*/ function isDataStream(v) {\n    if (!(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(v)) return false;\n    if ((0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(v)) return true;\n    return Object.values(v).some(isPromise) || Object.values(v).some(_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable);\n}\nasync function resolveResponse(opts) {\n    const { router, req } = opts;\n    const headers = new Headers([\n        [\n            \"vary\",\n            \"trpc-accept\"\n        ]\n    ]);\n    const config = router._def._config;\n    const url = new URL(req.url);\n    if (req.method === \"HEAD\") return new Response(null, {\n        status: 204\n    });\n    const allowBatching = opts.allowBatching ?? opts.batching?.enabled ?? true;\n    const allowMethodOverride = (opts.allowMethodOverride ?? false) && req.method === \"POST\";\n    const infoTuple = await (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async ()=>{\n        try {\n            return [\n                void 0,\n                await getRequestInfo({\n                    req,\n                    path: decodeURIComponent(opts.path),\n                    router,\n                    searchParams: url.searchParams,\n                    headers: opts.req.headers,\n                    url\n                })\n            ];\n        } catch (cause) {\n            return [\n                (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n                void 0\n            ];\n        }\n    });\n    const ctxManager = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(()=>{\n        let result = void 0;\n        return {\n            valueOrUndefined: ()=>{\n                if (!result) return void 0;\n                return result[1];\n            },\n            value: ()=>{\n                const [err, ctx] = result;\n                if (err) throw err;\n                return ctx;\n            },\n            create: async (info)=>{\n                if (result) throw new Error(\"This should only be called once - report a bug in tRPC\");\n                try {\n                    const ctx = await opts.createContext({\n                        info\n                    });\n                    result = [\n                        void 0,\n                        ctx\n                    ];\n                } catch (cause) {\n                    result = [\n                        (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n                        void 0\n                    ];\n                }\n            }\n        };\n    });\n    const methodMapper = allowMethodOverride ? TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE : TYPE_ACCEPTED_METHOD_MAP;\n    /**\n\t* @deprecated\n\t*/ const isStreamCall = req.headers.get(\"trpc-accept\") === \"application/jsonl\";\n    const experimentalSSE = config.sse?.enabled ?? true;\n    try {\n        const [infoError, info] = infoTuple;\n        if (infoError) throw infoError;\n        if (info.isBatchCall && !allowBatching) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"BAD_REQUEST\",\n            message: `Batching is not enabled on the server`\n        });\n        /* istanbul ignore if -- @preserve */ if (isStreamCall && !info.isBatchCall) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            message: `Streaming requests must be batched (you can do a batch of 1)`,\n            code: \"BAD_REQUEST\"\n        });\n        await ctxManager.create(info);\n        const rpcCalls = info.calls.map(async (call)=>{\n            const proc = call.procedure;\n            try {\n                if (opts.error) throw opts.error;\n                if (!proc) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"NOT_FOUND\",\n                    message: `No procedure found on path \"${call.path}\"`\n                });\n                if (!methodMapper[proc._def.type].includes(req.method)) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"METHOD_NOT_SUPPORTED\",\n                    message: `Unsupported ${req.method}-request to ${proc._def.type} procedure at path \"${call.path}\"`\n                });\n                if (proc._def.type === \"subscription\") {\n                    /* istanbul ignore if -- @preserve */ if (info.isBatchCall) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                        code: \"BAD_REQUEST\",\n                        message: `Cannot batch subscription calls`\n                    });\n                }\n                const data = await proc({\n                    path: call.path,\n                    getRawInput: call.getRawInput,\n                    ctx: ctxManager.value(),\n                    type: proc._def.type,\n                    signal: opts.req.signal\n                });\n                return [\n                    void 0,\n                    {\n                        data\n                    }\n                ];\n            } catch (cause) {\n                const error = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n                const input = call.result();\n                opts.onError?.({\n                    error,\n                    path: call.path,\n                    input,\n                    ctx: ctxManager.valueOrUndefined(),\n                    type: call.procedure?._def.type ?? \"unknown\",\n                    req: opts.req\n                });\n                return [\n                    error,\n                    void 0\n                ];\n            }\n        });\n        if (!info.isBatchCall) {\n            const [call] = info.calls;\n            const [error, result] = await rpcCalls[0];\n            switch(info.type){\n                case \"unknown\":\n                case \"mutation\":\n                case \"query\":\n                    {\n                        headers.set(\"content-type\", \"application/json\");\n                        if (isDataStream(result?.data)) throw new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                            code: \"UNSUPPORTED_MEDIA_TYPE\",\n                            message: \"Cannot use stream-like response in non-streaming request - use httpBatchStreamLink\"\n                        });\n                        const res = error ? {\n                            error: (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                                config,\n                                ctx: ctxManager.valueOrUndefined(),\n                                error,\n                                input: call.result(),\n                                path: call.path,\n                                type: info.type\n                            })\n                        } : {\n                            result: {\n                                data: result.data\n                            }\n                        };\n                        const headResponse$1 = initResponse({\n                            ctx: ctxManager.valueOrUndefined(),\n                            info,\n                            responseMeta: opts.responseMeta,\n                            errors: error ? [\n                                error\n                            ] : [],\n                            headers,\n                            untransformedJSON: [\n                                res\n                            ]\n                        });\n                        return new Response(JSON.stringify((0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(config, res)), {\n                            status: headResponse$1.status,\n                            headers\n                        });\n                    }\n                case \"subscription\":\n                    {\n                        const iterable = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(()=>{\n                            if (error) return errorToAsyncIterable(error);\n                            if (!experimentalSSE) return errorToAsyncIterable(new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                                code: \"METHOD_NOT_SUPPORTED\",\n                                message: 'Missing experimental flag \"sseSubscriptions\"'\n                            }));\n                            if (!(0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) && !(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(result.data)) return errorToAsyncIterable(new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                                message: `Subscription ${call.path} did not return an observable or a AsyncGenerator`,\n                                code: \"INTERNAL_SERVER_ERROR\"\n                            }));\n                            const dataAsIterable = (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) ? (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__.observableToAsyncIterable)(result.data, opts.req.signal) : result.data;\n                            return dataAsIterable;\n                        });\n                        const stream = sseStreamProducer({\n                            ...config.sse,\n                            data: iterable,\n                            serialize: (v)=>config.transformer.output.serialize(v),\n                            formatError (errorOpts) {\n                                const error$1 = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(errorOpts.error);\n                                const input = call?.result();\n                                const path = call?.path;\n                                const type = call?.procedure?._def.type ?? \"unknown\";\n                                opts.onError?.({\n                                    error: error$1,\n                                    path,\n                                    input,\n                                    ctx: ctxManager.valueOrUndefined(),\n                                    req: opts.req,\n                                    type\n                                });\n                                const shape = (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                                    config,\n                                    ctx: ctxManager.valueOrUndefined(),\n                                    error: error$1,\n                                    input,\n                                    path,\n                                    type\n                                });\n                                return shape;\n                            }\n                        });\n                        for (const [key, value] of Object.entries(sseHeaders))headers.set(key, value);\n                        const headResponse$1 = initResponse({\n                            ctx: ctxManager.valueOrUndefined(),\n                            info,\n                            responseMeta: opts.responseMeta,\n                            errors: [],\n                            headers,\n                            untransformedJSON: null\n                        });\n                        return new Response(stream, {\n                            headers,\n                            status: headResponse$1.status\n                        });\n                    }\n            }\n        }\n        if (info.accept === \"application/jsonl\") {\n            headers.set(\"content-type\", \"application/json\");\n            headers.set(\"transfer-encoding\", \"chunked\");\n            const headResponse$1 = initResponse({\n                ctx: ctxManager.valueOrUndefined(),\n                info,\n                responseMeta: opts.responseMeta,\n                errors: [],\n                headers,\n                untransformedJSON: null\n            });\n            const stream = jsonlStreamProducer({\n                ...config.jsonl,\n                maxDepth: Infinity,\n                data: rpcCalls.map(async (res)=>{\n                    const [error, result] = await res;\n                    const call = info.calls[0];\n                    if (error) return {\n                        error: (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                            config,\n                            ctx: ctxManager.valueOrUndefined(),\n                            error,\n                            input: call.result(),\n                            path: call.path,\n                            type: call.procedure?._def.type ?? \"unknown\"\n                        })\n                    };\n                    /**\n\t\t\t\t\t* Not very pretty, but we need to wrap nested data in promises\n\t\t\t\t\t* Our stream producer will only resolve top-level async values or async values that are directly nested in another async value\n\t\t\t\t\t*/ const iterable = (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) ? (0,_observable_B1orLHHI_mjs__WEBPACK_IMPORTED_MODULE_3__.observableToAsyncIterable)(result.data, opts.req.signal) : Promise.resolve(result.data);\n                    return {\n                        result: Promise.resolve({\n                            data: iterable\n                        })\n                    };\n                }),\n                serialize: config.transformer.output.serialize,\n                onError: (cause)=>{\n                    opts.onError?.({\n                        error: (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n                        path: void 0,\n                        input: void 0,\n                        ctx: ctxManager.valueOrUndefined(),\n                        req: opts.req,\n                        type: info?.type ?? \"unknown\"\n                    });\n                },\n                formatError (errorOpts) {\n                    const call = info?.calls[errorOpts.path[0]];\n                    const error = (0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(errorOpts.error);\n                    const input = call?.result();\n                    const path = call?.path;\n                    const type = call?.procedure?._def.type ?? \"unknown\";\n                    const shape = (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                        config,\n                        ctx: ctxManager.valueOrUndefined(),\n                        error,\n                        input,\n                        path,\n                        type\n                    });\n                    return shape;\n                }\n            });\n            return new Response(stream, {\n                headers,\n                status: headResponse$1.status\n            });\n        }\n        /**\n\t\t* Non-streaming response:\n\t\t* - await all responses in parallel, blocking on the slowest one\n\t\t* - create headers with known response body\n\t\t* - return a complete HTTPResponse\n\t\t*/ headers.set(\"content-type\", \"application/json\");\n        const results = (await Promise.all(rpcCalls)).map((res)=>{\n            const [error, result] = res;\n            if (error) return res;\n            if (isDataStream(result.data)) return [\n                new _tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"UNSUPPORTED_MEDIA_TYPE\",\n                    message: \"Cannot use stream-like response in non-streaming request - use httpBatchStreamLink\"\n                }),\n                void 0\n            ];\n            return res;\n        });\n        const resultAsRPCResponse = results.map(([error, result], index)=>{\n            const call = info.calls[index];\n            if (error) return {\n                error: (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                    config,\n                    ctx: ctxManager.valueOrUndefined(),\n                    error,\n                    input: call.result(),\n                    path: call.path,\n                    type: call.procedure?._def.type ?? \"unknown\"\n                })\n            };\n            return {\n                result: {\n                    data: result.data\n                }\n            };\n        });\n        const errors = results.map(([error])=>error).filter(Boolean);\n        const headResponse = initResponse({\n            ctx: ctxManager.valueOrUndefined(),\n            info,\n            responseMeta: opts.responseMeta,\n            untransformedJSON: resultAsRPCResponse,\n            errors,\n            headers\n        });\n        return new Response(JSON.stringify((0,_tracked_GEWPoL0C_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(config, resultAsRPCResponse)), {\n            status: headResponse.status,\n            headers\n        });\n    } catch (cause) {\n        const [_infoError, info] = infoTuple;\n        const ctx = ctxManager.valueOrUndefined();\n        const { error, untransformedJSON, body } = caughtErrorToData(cause, {\n            opts,\n            ctx: ctxManager.valueOrUndefined(),\n            type: info?.type ?? \"unknown\"\n        });\n        const headResponse = initResponse({\n            ctx,\n            info,\n            responseMeta: opts.responseMeta,\n            untransformedJSON,\n            errors: [\n                error\n            ],\n            headers\n        });\n        return new Response(body, {\n            status: headResponse.status,\n            headers\n        });\n    }\n}\n//#endregion\n //# sourceMappingURL=resolveResponse-DPbYgJDD.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-DPbYgJDD.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-GEWPoL0C.mjs":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-GEWPoL0C.mjs ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCError: () => (/* binding */ TRPCError),\n/* harmony export */   callProcedure: () => (/* binding */ callProcedure),\n/* harmony export */   createCallerFactory: () => (/* binding */ createCallerFactory),\n/* harmony export */   createRouterFactory: () => (/* binding */ createRouterFactory),\n/* harmony export */   defaultFormatter: () => (/* binding */ defaultFormatter),\n/* harmony export */   defaultTransformer: () => (/* binding */ defaultTransformer),\n/* harmony export */   getCauseFromUnknown: () => (/* binding */ getCauseFromUnknown),\n/* harmony export */   getDataTransformer: () => (/* binding */ getDataTransformer),\n/* harmony export */   getProcedureAtPath: () => (/* binding */ getProcedureAtPath),\n/* harmony export */   getTRPCErrorFromUnknown: () => (/* binding */ getTRPCErrorFromUnknown),\n/* harmony export */   isTrackedEnvelope: () => (/* binding */ isTrackedEnvelope),\n/* harmony export */   lazy: () => (/* binding */ lazy),\n/* harmony export */   mergeRouters: () => (/* binding */ mergeRouters),\n/* harmony export */   sse: () => (/* binding */ sse),\n/* harmony export */   tracked: () => (/* binding */ tracked),\n/* harmony export */   transformResult: () => (/* binding */ transformResult),\n/* harmony export */   transformTRPCResponse: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getErrorShape-DyYil4aT.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-DyYil4aT.mjs\");\n/* harmony import */ var _utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-BHZJcBRv.mjs */ \"(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs\");\n\n\n//#region src/unstable-core-do-not-import/error/formatter.ts\nconst defaultFormatter = ({ shape })=>{\n    return shape;\n};\n//#endregion\n//#region src/unstable-core-do-not-import/error/TRPCError.ts\nvar UnknownCauseError = class extends Error {\n};\nfunction getCauseFromUnknown(cause) {\n    if (cause instanceof Error) return cause;\n    const type = typeof cause;\n    if (type === \"undefined\" || type === \"function\" || cause === null) return void 0;\n    if (type !== \"object\") return new Error(String(cause));\n    if ((0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(cause)) return Object.assign(new UnknownCauseError(), cause);\n    return void 0;\n}\nfunction getTRPCErrorFromUnknown(cause) {\n    if (cause instanceof TRPCError) return cause;\n    if (cause instanceof Error && cause.name === \"TRPCError\") return cause;\n    const trpcError = new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        cause\n    });\n    if (cause instanceof Error && cause.stack) trpcError.stack = cause.stack;\n    return trpcError;\n}\nvar TRPCError = class extends Error {\n    constructor(opts){\n        const cause = getCauseFromUnknown(opts.cause);\n        const message = opts.message ?? cause?.message ?? opts.code;\n        super(message, {\n            cause\n        });\n        this.code = opts.code;\n        this.name = \"TRPCError\";\n        this.cause ??= cause;\n    }\n};\n//#endregion\n//#region src/unstable-core-do-not-import/transformer.ts\n/**\n* @internal\n*/ function getDataTransformer(transformer) {\n    if (\"input\" in transformer) return transformer;\n    return {\n        input: transformer,\n        output: transformer\n    };\n}\n/**\n* @internal\n*/ const defaultTransformer = {\n    input: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    },\n    output: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    }\n};\nfunction transformTRPCResponseItem(config, item) {\n    if (\"error\" in item) return {\n        ...item,\n        error: config.transformer.output.serialize(item.error)\n    };\n    if (\"data\" in item.result) return {\n        ...item,\n        result: {\n            ...item.result,\n            data: config.transformer.output.serialize(item.result.data)\n        }\n    };\n    return item;\n}\n/**\n* Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n**/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n/** @internal */ function transformResultInner(response, transformer) {\n    if (\"error\" in response) {\n        const error = transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: {\n                ...response,\n                error\n            }\n        };\n    }\n    const result = {\n        ...response.result,\n        ...(!response.result.type || response.result.type === \"data\") && {\n            type: \"data\",\n            data: transformer.deserialize(response.result.data)\n        }\n    };\n    return {\n        ok: true,\n        result\n    };\n}\nvar TransformResultError = class extends Error {\n    constructor(){\n        super(\"Unable to transform response from server\");\n    }\n};\n/**\n* Transforms and validates that the result is a valid TRPCResponse\n* @internal\n*/ function transformResult(response, transformer) {\n    let result;\n    try {\n        result = transformResultInner(response, transformer);\n    } catch  {\n        throw new TransformResultError();\n    }\n    if (!result.ok && (!(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(result.error.error) || typeof result.error.error[\"code\"] !== \"number\")) throw new TransformResultError();\n    if (result.ok && !(0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(result.result)) throw new TransformResultError();\n    return result;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/router.ts\nconst lazySymbol = Symbol(\"lazy\");\nfunction once(fn) {\n    const uncalled = Symbol();\n    let result = uncalled;\n    return ()=>{\n        if (result === uncalled) result = fn();\n        return result;\n    };\n}\n/**\n* Lazy load a router\n* @see https://trpc.io/docs/server/merging-routers#lazy-load\n*/ function lazy(importRouter) {\n    async function resolve() {\n        const mod = await importRouter();\n        if (isRouter(mod)) return mod;\n        const routers = Object.values(mod);\n        if (routers.length !== 1 || !isRouter(routers[0])) throw new Error(\"Invalid router module - either define exactly 1 export or return the router directly.\\nExample: `lazy(() => import('./slow.js').then((m) => m.slowRouter))`\");\n        return routers[0];\n    }\n    resolve[lazySymbol] = true;\n    return resolve;\n}\nfunction isLazy(input) {\n    return typeof input === \"function\" && lazySymbol in input;\n}\nfunction isRouter(value) {\n    return (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(value[\"_def\"]) && \"router\" in value[\"_def\"];\n}\nconst emptyRouter = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: defaultFormatter,\n    transformer: defaultTransformer\n};\n/**\n* Reserved words that can't be used as router or procedure names\n*/ const reservedWords = [\n    \"then\",\n    \"call\",\n    \"apply\"\n];\n/**\n* @internal\n*/ function createRouterFactory(config) {\n    function createRouterInner(input) {\n        const reservedWordsUsed = new Set(Object.keys(input).filter((v)=>reservedWords.includes(v)));\n        if (reservedWordsUsed.size > 0) throw new Error(\"Reserved words used in `router({})` call: \" + Array.from(reservedWordsUsed).join(\", \"));\n        const procedures = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.omitPrototype)({});\n        const lazy$1 = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.omitPrototype)({});\n        function createLazyLoader(opts) {\n            return {\n                ref: opts.ref,\n                load: once(async ()=>{\n                    const router$1 = await opts.ref();\n                    const lazyPath = [\n                        ...opts.path,\n                        opts.key\n                    ];\n                    const lazyKey = lazyPath.join(\".\");\n                    opts.aggregate[opts.key] = step(router$1._def.record, lazyPath);\n                    delete lazy$1[lazyKey];\n                    for (const [nestedKey, nestedItem] of Object.entries(router$1._def.lazy)){\n                        const nestedRouterKey = [\n                            ...lazyPath,\n                            nestedKey\n                        ].join(\".\");\n                        lazy$1[nestedRouterKey] = createLazyLoader({\n                            ref: nestedItem.ref,\n                            path: lazyPath,\n                            key: nestedKey,\n                            aggregate: opts.aggregate[opts.key]\n                        });\n                    }\n                })\n            };\n        }\n        function step(from, path = []) {\n            const aggregate = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.omitPrototype)({});\n            for (const [key, item] of Object.entries(from ?? {})){\n                if (isLazy(item)) {\n                    lazy$1[[\n                        ...path,\n                        key\n                    ].join(\".\")] = createLazyLoader({\n                        path,\n                        ref: item,\n                        key,\n                        aggregate\n                    });\n                    continue;\n                }\n                if (isRouter(item)) {\n                    aggregate[key] = step(item._def.record, [\n                        ...path,\n                        key\n                    ]);\n                    continue;\n                }\n                if (!isProcedure(item)) {\n                    aggregate[key] = step(item, [\n                        ...path,\n                        key\n                    ]);\n                    continue;\n                }\n                const newPath = [\n                    ...path,\n                    key\n                ].join(\".\");\n                if (procedures[newPath]) throw new Error(`Duplicate key: ${newPath}`);\n                procedures[newPath] = item;\n                aggregate[key] = item;\n            }\n            return aggregate;\n        }\n        const record = step(input);\n        const _def = {\n            _config: config,\n            router: true,\n            procedures,\n            lazy: lazy$1,\n            ...emptyRouter,\n            record\n        };\n        const router = {\n            ...record,\n            _def,\n            createCaller: createCallerFactory()({\n                _def\n            })\n        };\n        return router;\n    }\n    return createRouterInner;\n}\nfunction isProcedure(procedureOrRouter) {\n    return typeof procedureOrRouter === \"function\";\n}\n/**\n* @internal\n*/ async function getProcedureAtPath(router, path) {\n    const { _def } = router;\n    let procedure = _def.procedures[path];\n    while(!procedure){\n        const key = Object.keys(_def.lazy).find((key$1)=>path.startsWith(key$1));\n        if (!key) return null;\n        const lazyRouter = _def.lazy[key];\n        await lazyRouter.load();\n        procedure = _def.procedures[path];\n    }\n    return procedure;\n}\n/**\n* @internal\n*/ async function callProcedure(opts) {\n    const { type, path } = opts;\n    const proc = await getProcedureAtPath(opts.router, path);\n    if (!proc || !isProcedure(proc) || proc._def.type !== type && !opts.allowMethodOverride) throw new TRPCError({\n        code: \"NOT_FOUND\",\n        message: `No \"${type}\"-procedure on path \"${path}\"`\n    });\n    /* istanbul ignore if -- @preserve */ if (proc._def.type !== type && opts.allowMethodOverride && proc._def.type === \"subscription\") throw new TRPCError({\n        code: \"METHOD_NOT_SUPPORTED\",\n        message: `Method override is not supported for subscriptions`\n    });\n    return proc(opts);\n}\nfunction createCallerFactory() {\n    return function createCallerInner(router) {\n        const { _def } = router;\n        return function createCaller(ctxOrCallback, opts) {\n            return (0,_getErrorShape_DyYil4aT_mjs__WEBPACK_IMPORTED_MODULE_1__.createRecursiveProxy)(async ({ path, args })=>{\n                const fullPath = path.join(\".\");\n                if (path.length === 1 && path[0] === \"_def\") return _def;\n                const procedure = await getProcedureAtPath(router, fullPath);\n                let ctx = void 0;\n                try {\n                    if (!procedure) throw new TRPCError({\n                        code: \"NOT_FOUND\",\n                        message: `No procedure found on path \"${path}\"`\n                    });\n                    ctx = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(ctxOrCallback) ? await Promise.resolve(ctxOrCallback()) : ctxOrCallback;\n                    return await procedure({\n                        path: fullPath,\n                        getRawInput: async ()=>args[0],\n                        ctx,\n                        type: procedure._def.type,\n                        signal: opts?.signal\n                    });\n                } catch (cause) {\n                    opts?.onError?.({\n                        ctx,\n                        error: getTRPCErrorFromUnknown(cause),\n                        input: args[0],\n                        path: fullPath,\n                        type: procedure?._def.type ?? \"unknown\"\n                    });\n                    throw cause;\n                }\n            });\n        };\n    };\n}\nfunction mergeRouters(...routerList) {\n    const record = (0,_utils_BHZJcBRv_mjs__WEBPACK_IMPORTED_MODULE_0__.mergeWithoutOverrides)({}, ...routerList.map((r)=>r._def.record));\n    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{\n        if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== defaultFormatter) {\n            if (currentErrorFormatter !== defaultFormatter && currentErrorFormatter !== nextRouter._def._config.errorFormatter) throw new Error(\"You seem to have several error formatters\");\n            return nextRouter._def._config.errorFormatter;\n        }\n        return currentErrorFormatter;\n    }, defaultFormatter);\n    const transformer = routerList.reduce((prev, current)=>{\n        if (current._def._config.transformer && current._def._config.transformer !== defaultTransformer) {\n            if (prev !== defaultTransformer && prev !== current._def._config.transformer) throw new Error(\"You seem to have several transformers\");\n            return current._def._config.transformer;\n        }\n        return prev;\n    }, defaultTransformer);\n    const router = createRouterFactory({\n        errorFormatter,\n        transformer,\n        isDev: routerList.every((r)=>r._def._config.isDev),\n        allowOutsideOfServer: routerList.every((r)=>r._def._config.allowOutsideOfServer),\n        isServer: routerList.every((r)=>r._def._config.isServer),\n        $types: routerList[0]?._def._config.$types\n    })(record);\n    return router;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/tracked.ts\nconst trackedSymbol = Symbol();\n/**\n* Produce a typed server-sent event message\n* @deprecated use `tracked(id, data)` instead\n*/ function sse(event) {\n    return tracked(event.id, event.data);\n}\nfunction isTrackedEnvelope(value) {\n    return Array.isArray(value) && value[2] === trackedSymbol;\n}\n/**\n* Automatically track an event so that it can be resumed from a given id if the connection is lost\n*/ function tracked(id, data) {\n    if (id === \"\") throw new Error(\"`id` must not be an empty string as empty string is the same as not setting the id at all\");\n    return [\n        id,\n        data,\n        trackedSymbol\n    ];\n}\n//#endregion\n //# sourceMappingURL=tracked-GEWPoL0C.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-GEWPoL0C.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPC_ERROR_CODES_BY_KEY: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   TRPC_ERROR_CODES_BY_NUMBER: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   abortSignalsAnyPonyfill: () => (/* binding */ abortSignalsAnyPonyfill),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   mergeWithoutOverrides: () => (/* binding */ mergeWithoutOverrides),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   omitPrototype: () => (/* binding */ omitPrototype),\n/* harmony export */   retryableRpcCodes: () => (/* binding */ retryableRpcCodes),\n/* harmony export */   run: () => (/* binding */ run),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n//#region src/unstable-core-do-not-import/rpc/codes.ts\n/**\n* JSON-RPC 2.0 Error codes\n*\n* `-32000` to `-32099` are reserved for implementation-defined server-errors.\n* For tRPC we're copying the last digits of HTTP 4XX errors.\n*/ const TRPC_ERROR_CODES_BY_KEY = {\n    PARSE_ERROR: -32700,\n    BAD_REQUEST: -32600,\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    BAD_GATEWAY: -32603,\n    SERVICE_UNAVAILABLE: -32603,\n    GATEWAY_TIMEOUT: -32603,\n    UNAUTHORIZED: -32001,\n    PAYMENT_REQUIRED: -32002,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNSUPPORTED_MEDIA_TYPE: -32015,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = {\n    [-32700]: \"PARSE_ERROR\",\n    [-32600]: \"BAD_REQUEST\",\n    [-32603]: \"INTERNAL_SERVER_ERROR\",\n    [-32001]: \"UNAUTHORIZED\",\n    [-32002]: \"PAYMENT_REQUIRED\",\n    [-32003]: \"FORBIDDEN\",\n    [-32004]: \"NOT_FOUND\",\n    [-32005]: \"METHOD_NOT_SUPPORTED\",\n    [-32008]: \"TIMEOUT\",\n    [-32009]: \"CONFLICT\",\n    [-32012]: \"PRECONDITION_FAILED\",\n    [-32013]: \"PAYLOAD_TOO_LARGE\",\n    [-32015]: \"UNSUPPORTED_MEDIA_TYPE\",\n    [-32022]: \"UNPROCESSABLE_CONTENT\",\n    [-32029]: \"TOO_MANY_REQUESTS\",\n    [-32099]: \"CLIENT_CLOSED_REQUEST\"\n};\n/**\n* tRPC error codes that are considered retryable\n* With out of the box SSE, the client will reconnect when these errors are encountered\n*/ const retryableRpcCodes = [\n    TRPC_ERROR_CODES_BY_KEY.BAD_GATEWAY,\n    TRPC_ERROR_CODES_BY_KEY.SERVICE_UNAVAILABLE,\n    TRPC_ERROR_CODES_BY_KEY.GATEWAY_TIMEOUT,\n    TRPC_ERROR_CODES_BY_KEY.INTERNAL_SERVER_ERROR\n];\n//#endregion\n//#region src/unstable-core-do-not-import/utils.ts\n/**\n* Ensures there are no duplicate keys when building a procedure.\n* @internal\n*/ function mergeWithoutOverrides(obj1, ...objs) {\n    const newObj = Object.assign(Object.create(null), obj1);\n    for (const overrides of objs)for(const key in overrides){\n        if (key in newObj && newObj[key] !== overrides[key]) throw new Error(`Duplicate key ${key}`);\n        newObj[key] = overrides[key];\n    }\n    return newObj;\n}\n/**\n* Check that value is object\n* @internal\n*/ function isObject(value) {\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\nfunction isFunction(fn) {\n    return typeof fn === \"function\";\n}\n/**\n* Create an object without inheriting anything from `Object.prototype`\n* @internal\n*/ function omitPrototype(obj) {\n    return Object.assign(Object.create(null), obj);\n}\nconst asyncIteratorsSupported = typeof Symbol === \"function\" && !!Symbol.asyncIterator;\nfunction isAsyncIterable(value) {\n    return asyncIteratorsSupported && isObject(value) && Symbol.asyncIterator in value;\n}\n/**\n* Run an IIFE\n*/ const run = (fn)=>fn();\nfunction noop() {}\nfunction identity(it) {\n    return it;\n}\n/**\n* Generic runtime assertion function. Throws, if the condition is not `true`.\n*\n* Can be used as a slightly less dangerous variant of type assertions. Code\n* mistakes would be revealed at runtime then (hopefully during testing).\n*/ function assert(condition, msg = \"no additional info\") {\n    if (!condition) throw new Error(`AssertionError: ${msg}`);\n}\nfunction sleep(ms = 0) {\n    return new Promise((res)=>setTimeout(res, ms));\n}\n/**\n* Ponyfill for\n* [`AbortSignal.any`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static).\n*/ function abortSignalsAnyPonyfill(signals) {\n    if (typeof AbortSignal.any === \"function\") return AbortSignal.any(signals);\n    const ac = new AbortController();\n    for (const signal of signals){\n        if (signal.aborted) {\n            trigger();\n            break;\n        }\n        signal.addEventListener(\"abort\", trigger, {\n            once: true\n        });\n    }\n    return ac.signal;\n    function trigger() {\n        ac.abort();\n        for (const signal of signals)signal.removeEventListener(\"abort\", trigger);\n    }\n}\n//#endregion\n //# sourceMappingURL=utils-BHZJcBRv.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@trpc+server@11.4.1_typescript@5.8.3/node_modules/@trpc/server/dist/utils-BHZJcBRv.mjs\n");

/***/ })

};
;